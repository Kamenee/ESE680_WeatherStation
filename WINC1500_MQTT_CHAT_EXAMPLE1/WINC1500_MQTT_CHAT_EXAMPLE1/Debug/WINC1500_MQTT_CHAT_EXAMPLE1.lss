
WINC1500_MQTT_CHAT_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b080  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000080  20000000  0000b080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000430  20000080  0000b100  00020080  2**2
                  ALLOC
  3 .stack        00002000  200004b0  0000b530  00020080  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  5 .comment      000000ca  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
  6 .debug_info   00060d6c  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000085d4  00000000  00000000  00080ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001341d  00000000  00000000  000894b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e38  00000000  00000000  0009c8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001470  00000000  00000000  0009d707  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022b8d  00000000  00000000  0009eb77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cc1c  00000000  00000000  000c1704  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095cfa  00000000  00000000  000de320  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000325c  00000000  00000000  0017401c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 24 00 20 59 57 00 00 55 57 00 00 55 57 00 00     .$. YW..UW..UW..
	...
      2c:	55 57 00 00 00 00 00 00 00 00 00 00 55 57 00 00     UW..........UW..
      3c:	55 57 00 00 55 57 00 00 55 57 00 00 55 57 00 00     UW..UW..UW..UW..
      4c:	55 57 00 00 49 39 00 00 55 57 00 00 55 57 00 00     UW..I9..UW..UW..
      5c:	55 57 00 00 55 57 00 00 b5 3e 00 00 c5 3e 00 00     UW..UW...>...>..
      6c:	d5 3e 00 00 e5 3e 00 00 f5 3e 00 00 05 3f 00 00     .>...>...>...?..
      7c:	25 57 00 00 35 57 00 00 45 57 00 00 55 57 00 00     %W..5W..EW..UW..
      8c:	55 57 00 00 55 57 00 00 00 00 00 00 00 00 00 00     UW..UW..........
      9c:	1d 38 00 00 55 57 00 00 55 57 00 00 55 57 00 00     .8..UW..UW..UW..
      ac:	55 57 00 00 00 00 00 00                             UW......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000080 	.word	0x20000080
      d4:	00000000 	.word	0x00000000
      d8:	0000b080 	.word	0x0000b080

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000084 	.word	0x20000084
     108:	0000b080 	.word	0x0000b080
     10c:	0000b080 	.word	0x0000b080
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00004e85 	.word	0x00004e85
     140:	00006f45 	.word	0x00006f45
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_ms+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_ms+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_ms+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_ms+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000000 	.word	0x20000000
     17c:	e000e010 	.word	0xe000e010

00000180 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     180:	b510      	push	{r4, lr}
	if (gpfIsr) {
     182:	4b03      	ldr	r3, [pc, #12]	; (190 <chip_isr+0x10>)
     184:	681b      	ldr	r3, [r3, #0]
     186:	2b00      	cmp	r3, #0
     188:	d000      	beq.n	18c <chip_isr+0xc>
		gpfIsr();
     18a:	4798      	blx	r3
	}
}
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	2000009c 	.word	0x2000009c

00000194 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     194:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     196:	1e44      	subs	r4, r0, #1
     198:	2800      	cmp	r0, #0
     19a:	d004      	beq.n	1a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
     19c:	4d02      	ldr	r5, [pc, #8]	; (1a8 <nm_bsp_sleep+0x14>)
     19e:	2001      	movs	r0, #1
     1a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
     1a2:	3c01      	subs	r4, #1
     1a4:	d2fb      	bcs.n	19e <nm_bsp_sleep+0xa>
	}
}
     1a6:	bd70      	pop	{r4, r5, r6, pc}
     1a8:	00000155 	.word	0x00000155

000001ac <nm_bsp_reset>:
{
     1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1ae:	4c08      	ldr	r4, [pc, #32]	; (1d0 <nm_bsp_reset+0x24>)
     1b0:	2780      	movs	r7, #128	; 0x80
     1b2:	057f      	lsls	r7, r7, #21
     1b4:	6167      	str	r7, [r4, #20]
     1b6:	2680      	movs	r6, #128	; 0x80
     1b8:	0536      	lsls	r6, r6, #20
     1ba:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
     1bc:	2064      	movs	r0, #100	; 0x64
     1be:	4d05      	ldr	r5, [pc, #20]	; (1d4 <nm_bsp_reset+0x28>)
     1c0:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
     1c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
     1c4:	2064      	movs	r0, #100	; 0x64
     1c6:	47a8      	blx	r5
     1c8:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
     1ca:	2064      	movs	r0, #100	; 0x64
     1cc:	47a8      	blx	r5
}
     1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1d0:	41004400 	.word	0x41004400
     1d4:	00000195 	.word	0x00000195

000001d8 <nm_bsp_init>:
{
     1d8:	b570      	push	{r4, r5, r6, lr}
     1da:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1dc:	2300      	movs	r3, #0
     1de:	4a16      	ldr	r2, [pc, #88]	; (238 <nm_bsp_init+0x60>)
     1e0:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1e2:	ac01      	add	r4, sp, #4
     1e4:	2501      	movs	r5, #1
     1e6:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e8:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1ea:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1ec:	0021      	movs	r1, r4
     1ee:	201b      	movs	r0, #27
     1f0:	4e12      	ldr	r6, [pc, #72]	; (23c <nm_bsp_init+0x64>)
     1f2:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1f4:	0021      	movs	r1, r4
     1f6:	201c      	movs	r0, #28
     1f8:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1fa:	0021      	movs	r1, r4
     1fc:	2028      	movs	r0, #40	; 0x28
     1fe:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     200:	4b0f      	ldr	r3, [pc, #60]	; (240 <nm_bsp_init+0x68>)
     202:	2280      	movs	r2, #128	; 0x80
     204:	0552      	lsls	r2, r2, #21
     206:	615a      	str	r2, [r3, #20]
     208:	2280      	movs	r2, #128	; 0x80
     20a:	0512      	lsls	r2, r2, #20
     20c:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     20e:	4b0d      	ldr	r3, [pc, #52]	; (244 <nm_bsp_init+0x6c>)
     210:	681b      	ldr	r3, [r3, #0]
     212:	421d      	tst	r5, r3
     214:	d003      	beq.n	21e <nm_bsp_init+0x46>
     216:	4b0b      	ldr	r3, [pc, #44]	; (244 <nm_bsp_init+0x6c>)
     218:	681b      	ldr	r3, [r3, #0]
     21a:	079b      	lsls	r3, r3, #30
     21c:	d401      	bmi.n	222 <nm_bsp_init+0x4a>
	    delay_init();
     21e:	4b0a      	ldr	r3, [pc, #40]	; (248 <nm_bsp_init+0x70>)
     220:	4798      	blx	r3
	nm_bsp_reset();
     222:	4b0a      	ldr	r3, [pc, #40]	; (24c <nm_bsp_init+0x74>)
     224:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     226:	2201      	movs	r2, #1
     228:	4b09      	ldr	r3, [pc, #36]	; (250 <nm_bsp_init+0x78>)
     22a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     22c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     230:	b662      	cpsie	i
}
     232:	2000      	movs	r0, #0
     234:	b002      	add	sp, #8
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	2000009c 	.word	0x2000009c
     23c:	00003aad 	.word	0x00003aad
     240:	41004400 	.word	0x41004400
     244:	e000e010 	.word	0xe000e010
     248:	00000115 	.word	0x00000115
     24c:	000001ad 	.word	0x000001ad
     250:	2000000a 	.word	0x2000000a

00000254 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     254:	b510      	push	{r4, lr}
     256:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     258:	4b0e      	ldr	r3, [pc, #56]	; (294 <nm_bsp_register_isr+0x40>)
     25a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     25c:	ac01      	add	r4, sp, #4
     25e:	0020      	movs	r0, r4
     260:	4b0d      	ldr	r3, [pc, #52]	; (298 <nm_bsp_register_isr+0x44>)
     262:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     264:	2329      	movs	r3, #41	; 0x29
     266:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     268:	2300      	movs	r3, #0
     26a:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     26c:	3301      	adds	r3, #1
     26e:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     270:	3301      	adds	r3, #1
     272:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     274:	0021      	movs	r1, r4
     276:	2009      	movs	r0, #9
     278:	4b08      	ldr	r3, [pc, #32]	; (29c <nm_bsp_register_isr+0x48>)
     27a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     27c:	2200      	movs	r2, #0
     27e:	2109      	movs	r1, #9
     280:	4807      	ldr	r0, [pc, #28]	; (2a0 <nm_bsp_register_isr+0x4c>)
     282:	4b08      	ldr	r3, [pc, #32]	; (2a4 <nm_bsp_register_isr+0x50>)
     284:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     286:	2100      	movs	r1, #0
     288:	2009      	movs	r0, #9
     28a:	4b07      	ldr	r3, [pc, #28]	; (2a8 <nm_bsp_register_isr+0x54>)
     28c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     28e:	b004      	add	sp, #16
     290:	bd10      	pop	{r4, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	2000009c 	.word	0x2000009c
     298:	00003a21 	.word	0x00003a21
     29c:	00003a35 	.word	0x00003a35
     2a0:	00000181 	.word	0x00000181
     2a4:	000038dd 	.word	0x000038dd
     2a8:	00003909 	.word	0x00003909

000002ac <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     2ac:	b510      	push	{r4, lr}
	if (u8Enable) {
     2ae:	2800      	cmp	r0, #0
     2b0:	d104      	bne.n	2bc <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2b2:	2100      	movs	r1, #0
     2b4:	2009      	movs	r0, #9
     2b6:	4b04      	ldr	r3, [pc, #16]	; (2c8 <nm_bsp_interrupt_ctrl+0x1c>)
     2b8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2ba:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     2bc:	2100      	movs	r1, #0
     2be:	2009      	movs	r0, #9
     2c0:	4b02      	ldr	r3, [pc, #8]	; (2cc <nm_bsp_interrupt_ctrl+0x20>)
     2c2:	4798      	blx	r3
     2c4:	e7f9      	b.n	2ba <nm_bsp_interrupt_ctrl+0xe>
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	00003929 	.word	0x00003929
     2cc:	00003909 	.word	0x00003909

000002d0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2d0:	b530      	push	{r4, r5, lr}
     2d2:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2d4:	4c30      	ldr	r4, [pc, #192]	; (398 <nm_bus_init+0xc8>)
     2d6:	230e      	movs	r3, #14
     2d8:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2da:	2300      	movs	r3, #0
     2dc:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2de:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     2e0:	a901      	add	r1, sp, #4
     2e2:	2201      	movs	r2, #1
     2e4:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2e6:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2e8:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2ea:	200e      	movs	r0, #14
     2ec:	4b2b      	ldr	r3, [pc, #172]	; (39c <nm_bus_init+0xcc>)
     2ee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2f0:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2f2:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2f6:	2900      	cmp	r1, #0
     2f8:	d104      	bne.n	304 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2fa:	0953      	lsrs	r3, r2, #5
     2fc:	01db      	lsls	r3, r3, #7
     2fe:	4928      	ldr	r1, [pc, #160]	; (3a0 <nm_bus_init+0xd0>)
     300:	468c      	mov	ip, r1
     302:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     304:	211f      	movs	r1, #31
     306:	4011      	ands	r1, r2
     308:	2201      	movs	r2, #1
     30a:	0010      	movs	r0, r2
     30c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     30e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     310:	ac02      	add	r4, sp, #8
     312:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     314:	2300      	movs	r3, #0
     316:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     318:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     31a:	21c0      	movs	r1, #192	; 0xc0
     31c:	0389      	lsls	r1, r1, #14
     31e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     320:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     322:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     324:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     326:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     328:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     32a:	3223      	adds	r2, #35	; 0x23
     32c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     32e:	3a18      	subs	r2, #24
     330:	2100      	movs	r1, #0
     332:	a808      	add	r0, sp, #32
     334:	4b1b      	ldr	r3, [pc, #108]	; (3a4 <nm_bus_init+0xd4>)
     336:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     338:	4b1b      	ldr	r3, [pc, #108]	; (3a8 <nm_bus_init+0xd8>)
     33a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     33c:	4b1b      	ldr	r3, [pc, #108]	; (3ac <nm_bus_init+0xdc>)
     33e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     340:	2301      	movs	r3, #1
     342:	425b      	negs	r3, r3
     344:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     346:	4b1a      	ldr	r3, [pc, #104]	; (3b0 <nm_bus_init+0xe0>)
     348:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     34a:	4b1a      	ldr	r3, [pc, #104]	; (3b4 <nm_bus_init+0xe4>)
     34c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     34e:	0022      	movs	r2, r4
     350:	4919      	ldr	r1, [pc, #100]	; (3b8 <nm_bus_init+0xe8>)
     352:	481a      	ldr	r0, [pc, #104]	; (3bc <nm_bus_init+0xec>)
     354:	4b1a      	ldr	r3, [pc, #104]	; (3c0 <nm_bus_init+0xf0>)
     356:	4798      	blx	r3
     358:	2800      	cmp	r0, #0
     35a:	d11a      	bne.n	392 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     35c:	4d17      	ldr	r5, [pc, #92]	; (3bc <nm_bus_init+0xec>)
     35e:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     360:	0020      	movs	r0, r4
     362:	4b18      	ldr	r3, [pc, #96]	; (3c4 <nm_bus_init+0xf4>)
     364:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     366:	231f      	movs	r3, #31
     368:	4018      	ands	r0, r3
     36a:	3b1e      	subs	r3, #30
     36c:	4083      	lsls	r3, r0
     36e:	4a16      	ldr	r2, [pc, #88]	; (3c8 <nm_bus_init+0xf8>)
     370:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     372:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     374:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
     376:	2b00      	cmp	r3, #0
     378:	d1fc      	bne.n	374 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     37a:	6823      	ldr	r3, [r4, #0]
     37c:	2202      	movs	r2, #2
     37e:	4313      	orrs	r3, r2
     380:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     382:	4b12      	ldr	r3, [pc, #72]	; (3cc <nm_bus_init+0xfc>)
     384:	4798      	blx	r3
	nm_bsp_sleep(1);
     386:	2001      	movs	r0, #1
     388:	4b11      	ldr	r3, [pc, #68]	; (3d0 <nm_bus_init+0x100>)
     38a:	4798      	blx	r3
#endif
	return result;
     38c:	2000      	movs	r0, #0
}
     38e:	b011      	add	sp, #68	; 0x44
     390:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
     392:	2006      	movs	r0, #6
     394:	4240      	negs	r0, r0
     396:	e7fa      	b.n	38e <nm_bus_init+0xbe>
     398:	2000028c 	.word	0x2000028c
     39c:	00003aad 	.word	0x00003aad
     3a0:	41004400 	.word	0x41004400
     3a4:	00008843 	.word	0x00008843
     3a8:	000c0002 	.word	0x000c0002
     3ac:	000d0002 	.word	0x000d0002
     3b0:	000f0002 	.word	0x000f0002
     3b4:	00b71b00 	.word	0x00b71b00
     3b8:	42001000 	.word	0x42001000
     3bc:	20000290 	.word	0x20000290
     3c0:	00003f15 	.word	0x00003f15
     3c4:	00003e85 	.word	0x00003e85
     3c8:	e000e100 	.word	0xe000e100
     3cc:	000001ad 	.word	0x000001ad
     3d0:	00000195 	.word	0x00000195

000003d4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d6:	46de      	mov	lr, fp
     3d8:	4657      	mov	r7, sl
     3da:	464e      	mov	r6, r9
     3dc:	4645      	mov	r5, r8
     3de:	b5e0      	push	{r5, r6, r7, lr}
     3e0:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3e2:	2803      	cmp	r0, #3
     3e4:	d000      	beq.n	3e8 <nm_bus_ioctl+0x14>
     3e6:	e075      	b.n	4d4 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3e8:	680e      	ldr	r6, [r1, #0]
     3ea:	684d      	ldr	r5, [r1, #4]
     3ec:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     3ee:	2200      	movs	r2, #0
     3f0:	466b      	mov	r3, sp
     3f2:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     3f4:	2d00      	cmp	r5, #0
     3f6:	d027      	beq.n	448 <nm_bus_ioctl+0x74>
     3f8:	2c00      	cmp	r4, #0
     3fa:	d065      	beq.n	4c8 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     3fc:	2e00      	cmp	r6, #0
     3fe:	d100      	bne.n	402 <nm_bus_ioctl+0x2e>
     400:	e077      	b.n	4f2 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     402:	2300      	movs	r3, #0
     404:	4698      	mov	r8, r3
     406:	2300      	movs	r3, #0
     408:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
     40a:	2201      	movs	r2, #1
     40c:	493b      	ldr	r1, [pc, #236]	; (4fc <nm_bus_ioctl+0x128>)
     40e:	483c      	ldr	r0, [pc, #240]	; (500 <nm_bus_ioctl+0x12c>)
     410:	4b3c      	ldr	r3, [pc, #240]	; (504 <nm_bus_ioctl+0x130>)
     412:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     414:	4b3a      	ldr	r3, [pc, #232]	; (500 <nm_bus_ioctl+0x12c>)
     416:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
     418:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
     41a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     41c:	4699      	mov	r9, r3
			pu8Miso++;
     41e:	4659      	mov	r1, fp
     420:	424b      	negs	r3, r1
     422:	4159      	adcs	r1, r3
     424:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     426:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     428:	4653      	mov	r3, sl
     42a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     42c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     42e:	4239      	tst	r1, r7
     430:	d0fc      	beq.n	42c <nm_bus_ioctl+0x58>
     432:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     434:	4239      	tst	r1, r7
     436:	d0fc      	beq.n	432 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     438:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     43a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
     43c:	4211      	tst	r1, r2
     43e:	d0fc      	beq.n	43a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     440:	4649      	mov	r1, r9
     442:	7989      	ldrb	r1, [r1, #6]
     444:	468c      	mov	ip, r1
     446:	e011      	b.n	46c <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
     448:	2e00      	cmp	r6, #0
     44a:	d03a      	beq.n	4c2 <nm_bus_ioctl+0xee>
     44c:	2c00      	cmp	r4, #0
     44e:	d03e      	beq.n	4ce <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     450:	2300      	movs	r3, #0
     452:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     454:	3301      	adds	r3, #1
     456:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     458:	466b      	mov	r3, sp
     45a:	1ddd      	adds	r5, r3, #7
     45c:	e7d5      	b.n	40a <nm_bus_ioctl+0x36>
     45e:	4660      	mov	r0, ip
     460:	2801      	cmp	r0, #1
     462:	d00d      	beq.n	480 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     464:	6a98      	ldr	r0, [r3, #40]	; 0x28
     466:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     468:	2900      	cmp	r1, #0
     46a:	d00d      	beq.n	488 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     46c:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     46e:	4211      	tst	r1, r2
     470:	d0fc      	beq.n	46c <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     472:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     474:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     476:	4210      	tst	r0, r2
     478:	d0f1      	beq.n	45e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     47a:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     47c:	311e      	adds	r1, #30
     47e:	e7ee      	b.n	45e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     480:	6a98      	ldr	r0, [r3, #40]	; 0x28
     482:	05c0      	lsls	r0, r0, #23
     484:	0dc0      	lsrs	r0, r0, #23
     486:	e7ef      	b.n	468 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     488:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     48a:	3c01      	subs	r4, #1
     48c:	b2a4      	uxth	r4, r4
			pu8Miso++;
     48e:	445d      	add	r5, fp
			pu8Mosi++;
     490:	4643      	mov	r3, r8
     492:	4259      	negs	r1, r3
     494:	414b      	adcs	r3, r1
     496:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     498:	2c00      	cmp	r4, #0
     49a:	d1c4      	bne.n	426 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     49c:	4b18      	ldr	r3, [pc, #96]	; (500 <nm_bus_ioctl+0x12c>)
     49e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
     4a0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     4a2:	7e0b      	ldrb	r3, [r1, #24]
     4a4:	4213      	tst	r3, r2
     4a6:	d0fc      	beq.n	4a2 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
     4a8:	2200      	movs	r2, #0
     4aa:	4914      	ldr	r1, [pc, #80]	; (4fc <nm_bus_ioctl+0x128>)
     4ac:	4814      	ldr	r0, [pc, #80]	; (500 <nm_bus_ioctl+0x12c>)
     4ae:	4b15      	ldr	r3, [pc, #84]	; (504 <nm_bus_ioctl+0x130>)
     4b0:	4798      	blx	r3
	return M2M_SUCCESS;
     4b2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     4b4:	b003      	add	sp, #12
     4b6:	bc3c      	pop	{r2, r3, r4, r5}
     4b8:	4690      	mov	r8, r2
     4ba:	4699      	mov	r9, r3
     4bc:	46a2      	mov	sl, r4
     4be:	46ab      	mov	fp, r5
     4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     4c2:	200f      	movs	r0, #15
     4c4:	4240      	negs	r0, r0
     4c6:	e7f5      	b.n	4b4 <nm_bus_ioctl+0xe0>
     4c8:	200f      	movs	r0, #15
     4ca:	4240      	negs	r0, r0
     4cc:	e7f2      	b.n	4b4 <nm_bus_ioctl+0xe0>
     4ce:	200f      	movs	r0, #15
     4d0:	4240      	negs	r0, r0
		break;
     4d2:	e7ef      	b.n	4b4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
     4d4:	220e      	movs	r2, #14
     4d6:	32ff      	adds	r2, #255	; 0xff
     4d8:	490b      	ldr	r1, [pc, #44]	; (508 <nm_bus_ioctl+0x134>)
     4da:	480c      	ldr	r0, [pc, #48]	; (50c <nm_bus_ioctl+0x138>)
     4dc:	4b0c      	ldr	r3, [pc, #48]	; (510 <nm_bus_ioctl+0x13c>)
     4de:	4798      	blx	r3
     4e0:	480c      	ldr	r0, [pc, #48]	; (514 <nm_bus_ioctl+0x140>)
     4e2:	4b0d      	ldr	r3, [pc, #52]	; (518 <nm_bus_ioctl+0x144>)
     4e4:	4798      	blx	r3
     4e6:	200d      	movs	r0, #13
     4e8:	4b0c      	ldr	r3, [pc, #48]	; (51c <nm_bus_ioctl+0x148>)
     4ea:	4798      	blx	r3
			s8Ret = -1;
     4ec:	2001      	movs	r0, #1
     4ee:	4240      	negs	r0, r0
	return s8Ret;
     4f0:	e7e0      	b.n	4b4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     4f2:	2301      	movs	r3, #1
     4f4:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     4f6:	466b      	mov	r3, sp
     4f8:	1dde      	adds	r6, r3, #7
     4fa:	e784      	b.n	406 <nm_bus_ioctl+0x32>
     4fc:	2000028c 	.word	0x2000028c
     500:	20000290 	.word	0x20000290
     504:	000040ed 	.word	0x000040ed
     508:	00009d40 	.word	0x00009d40
     50c:	00009d50 	.word	0x00009d50
     510:	000089a5 	.word	0x000089a5
     514:	00009d64 	.word	0x00009d64
     518:	00008ac1 	.word	0x00008ac1
     51c:	000089d9 	.word	0x000089d9

00000520 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     520:	b530      	push	{r4, r5, lr}
     522:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     524:	ab01      	add	r3, sp, #4
     526:	2200      	movs	r2, #0
     528:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
     52a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
     52c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
     52e:	4d13      	ldr	r5, [pc, #76]	; (57c <nm_bus_deinit+0x5c>)
     530:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     532:	0020      	movs	r0, r4
     534:	4b12      	ldr	r3, [pc, #72]	; (580 <nm_bus_deinit+0x60>)
     536:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     538:	231f      	movs	r3, #31
     53a:	4018      	ands	r0, r3
     53c:	3b1e      	subs	r3, #30
     53e:	4083      	lsls	r3, r0
     540:	2280      	movs	r2, #128	; 0x80
     542:	4910      	ldr	r1, [pc, #64]	; (584 <nm_bus_deinit+0x64>)
     544:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
     546:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     548:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     54a:	2b00      	cmp	r3, #0
     54c:	d1fc      	bne.n	548 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     54e:	338f      	adds	r3, #143	; 0x8f
     550:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     552:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     554:	6823      	ldr	r3, [r4, #0]
     556:	2202      	movs	r2, #2
     558:	4393      	bics	r3, r2
     55a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
     55c:	a901      	add	r1, sp, #4
     55e:	200c      	movs	r0, #12
     560:	4c09      	ldr	r4, [pc, #36]	; (588 <nm_bus_deinit+0x68>)
     562:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
     564:	a901      	add	r1, sp, #4
     566:	200f      	movs	r0, #15
     568:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
     56a:	a901      	add	r1, sp, #4
     56c:	200d      	movs	r0, #13
     56e:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
     570:	a901      	add	r1, sp, #4
     572:	200e      	movs	r0, #14
     574:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     576:	2000      	movs	r0, #0
     578:	b003      	add	sp, #12
     57a:	bd30      	pop	{r4, r5, pc}
     57c:	20000290 	.word	0x20000290
     580:	00003e85 	.word	0x00003e85
     584:	e000e100 	.word	0xe000e100
     588:	00003aad 	.word	0x00003aad

0000058c <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     58c:	2a00      	cmp	r2, #0
     58e:	d006      	beq.n	59e <m2m_memcpy+0x12>
     590:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     592:	780b      	ldrb	r3, [r1, #0]
     594:	7003      	strb	r3, [r0, #0]
		pDst++;
     596:	3001      	adds	r0, #1
		pSrc++;
     598:	3101      	adds	r1, #1
	}while(--sz);
     59a:	4290      	cmp	r0, r2
     59c:	d1f9      	bne.n	592 <m2m_memcpy+0x6>
}
     59e:	4770      	bx	lr

000005a0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d004      	beq.n	5ae <m2m_memset+0xe>
     5a4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     5a6:	7001      	strb	r1, [r0, #0]
		pBuf++;
     5a8:	3001      	adds	r0, #1
	}while(--sz);
     5aa:	4290      	cmp	r0, r2
     5ac:	d1fb      	bne.n	5a6 <m2m_memset+0x6>
}
     5ae:	4770      	bx	lr

000005b0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     5b0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
     5b2:	7802      	ldrb	r2, [r0, #0]
     5b4:	2a00      	cmp	r2, #0
     5b6:	d007      	beq.n	5c8 <m2m_strlen+0x18>
     5b8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     5ba:	3001      	adds	r0, #1
     5bc:	b280      	uxth	r0, r0
		pcStr++;
     5be:	3301      	adds	r3, #1
	while(*pcStr)
     5c0:	781a      	ldrb	r2, [r3, #0]
     5c2:	2a00      	cmp	r2, #0
     5c4:	d1f9      	bne.n	5ba <m2m_strlen+0xa>
	}
	return u16StrLen;
}
     5c6:	4770      	bx	lr
	uint16	u16StrLen = 0;
     5c8:	2000      	movs	r0, #0
     5ca:	e7fc      	b.n	5c6 <m2m_strlen+0x16>

000005cc <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     5cc:	4a02      	ldr	r2, [pc, #8]	; (5d8 <isr+0xc>)
     5ce:	78d3      	ldrb	r3, [r2, #3]
     5d0:	3301      	adds	r3, #1
     5d2:	b2db      	uxtb	r3, r3
     5d4:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     5d6:	4770      	bx	lr
     5d8:	200002cc 	.word	0x200002cc

000005dc <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     5dc:	4770      	bx	lr
	...

000005e0 <hif_set_rx_done>:
{
     5e0:	b500      	push	{lr}
     5e2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     5e4:	2200      	movs	r2, #0
     5e6:	4b0a      	ldr	r3, [pc, #40]	; (610 <hif_set_rx_done+0x30>)
     5e8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     5ea:	2001      	movs	r0, #1
     5ec:	4b09      	ldr	r3, [pc, #36]	; (614 <hif_set_rx_done+0x34>)
     5ee:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     5f0:	a901      	add	r1, sp, #4
     5f2:	4809      	ldr	r0, [pc, #36]	; (618 <hif_set_rx_done+0x38>)
     5f4:	4b09      	ldr	r3, [pc, #36]	; (61c <hif_set_rx_done+0x3c>)
     5f6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     5f8:	2800      	cmp	r0, #0
     5fa:	d001      	beq.n	600 <hif_set_rx_done+0x20>
}
     5fc:	b003      	add	sp, #12
     5fe:	bd00      	pop	{pc}
	reg |= NBIT1;
     600:	2102      	movs	r1, #2
     602:	9b01      	ldr	r3, [sp, #4]
     604:	4319      	orrs	r1, r3
     606:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     608:	4803      	ldr	r0, [pc, #12]	; (618 <hif_set_rx_done+0x38>)
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <hif_set_rx_done+0x40>)
     60c:	4798      	blx	r3
     60e:	e7f5      	b.n	5fc <hif_set_rx_done+0x1c>
     610:	200002cc 	.word	0x200002cc
     614:	000002ad 	.word	0x000002ad
     618:	00001070 	.word	0x00001070
     61c:	000019e9 	.word	0x000019e9
     620:	000019f5 	.word	0x000019f5

00000624 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     624:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
     626:	4b0c      	ldr	r3, [pc, #48]	; (658 <hif_chip_wake+0x34>)
     628:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     62a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     62c:	2b00      	cmp	r3, #0
     62e:	d10d      	bne.n	64c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <hif_chip_wake+0x34>)
     632:	785b      	ldrb	r3, [r3, #1]
     634:	2b00      	cmp	r3, #0
     636:	d103      	bne.n	640 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     638:	4b07      	ldr	r3, [pc, #28]	; (658 <hif_chip_wake+0x34>)
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	2b00      	cmp	r3, #0
     63e:	d106      	bne.n	64e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     640:	4a05      	ldr	r2, [pc, #20]	; (658 <hif_chip_wake+0x34>)
     642:	7853      	ldrb	r3, [r2, #1]
     644:	3301      	adds	r3, #1
     646:	b2db      	uxtb	r3, r3
     648:	7053      	strb	r3, [r2, #1]
     64a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     64c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     64e:	4b03      	ldr	r3, [pc, #12]	; (65c <hif_chip_wake+0x38>)
     650:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     652:	2800      	cmp	r0, #0
     654:	d0f4      	beq.n	640 <hif_chip_wake+0x1c>
     656:	e7f9      	b.n	64c <hif_chip_wake+0x28>
     658:	200002cc 	.word	0x200002cc
     65c:	000016d1 	.word	0x000016d1

00000660 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     660:	4b05      	ldr	r3, [pc, #20]	; (678 <hif_chip_sleep_sc+0x18>)
     662:	785b      	ldrb	r3, [r3, #1]
     664:	2b00      	cmp	r3, #0
     666:	d004      	beq.n	672 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     668:	4a03      	ldr	r2, [pc, #12]	; (678 <hif_chip_sleep_sc+0x18>)
     66a:	7853      	ldrb	r3, [r2, #1]
     66c:	3b01      	subs	r3, #1
     66e:	b2db      	uxtb	r3, r3
     670:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     672:	2000      	movs	r0, #0
     674:	4770      	bx	lr
     676:	46c0      	nop			; (mov r8, r8)
     678:	200002cc 	.word	0x200002cc

0000067c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     67c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     67e:	4b0b      	ldr	r3, [pc, #44]	; (6ac <hif_chip_sleep+0x30>)
     680:	785b      	ldrb	r3, [r3, #1]
     682:	2b00      	cmp	r3, #0
     684:	d004      	beq.n	690 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     686:	4a09      	ldr	r2, [pc, #36]	; (6ac <hif_chip_sleep+0x30>)
     688:	7853      	ldrb	r3, [r2, #1]
     68a:	3b01      	subs	r3, #1
     68c:	b2db      	uxtb	r3, r3
     68e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <hif_chip_sleep+0x30>)
     692:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     694:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     696:	2b00      	cmp	r3, #0
     698:	d103      	bne.n	6a2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     69a:	4b04      	ldr	r3, [pc, #16]	; (6ac <hif_chip_sleep+0x30>)
     69c:	781b      	ldrb	r3, [r3, #0]
     69e:	2b00      	cmp	r3, #0
     6a0:	d100      	bne.n	6a4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
     6a2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     6a4:	4b02      	ldr	r3, [pc, #8]	; (6b0 <hif_chip_sleep+0x34>)
     6a6:	4798      	blx	r3
     6a8:	e7fb      	b.n	6a2 <hif_chip_sleep+0x26>
     6aa:	46c0      	nop			; (mov r8, r8)
     6ac:	200002cc 	.word	0x200002cc
     6b0:	00001669 	.word	0x00001669

000006b4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6b6:	46de      	mov	lr, fp
     6b8:	4657      	mov	r7, sl
     6ba:	b580      	push	{r7, lr}
     6bc:	b089      	sub	sp, #36	; 0x24
     6be:	4683      	mov	fp, r0
     6c0:	468a      	mov	sl, r1
     6c2:	9201      	str	r2, [sp, #4]
     6c4:	9300      	str	r3, [sp, #0]
     6c6:	ab10      	add	r3, sp, #64	; 0x40
     6c8:	cb80      	ldmia	r3!, {r7}
     6ca:	881e      	ldrh	r6, [r3, #0]
     6cc:	ab12      	add	r3, sp, #72	; 0x48
     6ce:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6d0:	227f      	movs	r2, #127	; 0x7f
     6d2:	400a      	ands	r2, r1
     6d4:	ab07      	add	r3, sp, #28
     6d6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     6d8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6da:	2208      	movs	r2, #8
     6dc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     6de:	2f00      	cmp	r7, #0
     6e0:	d03d      	beq.n	75e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6e2:	885a      	ldrh	r2, [r3, #2]
     6e4:	1992      	adds	r2, r2, r6
     6e6:	18aa      	adds	r2, r5, r2
     6e8:	b292      	uxth	r2, r2
     6ea:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
     6ec:	4b69      	ldr	r3, [pc, #420]	; (894 <hif_send+0x1e0>)
     6ee:	4798      	blx	r3
     6f0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6f2:	d000      	beq.n	6f6 <hif_send+0x42>
     6f4:	e0c1      	b.n	87a <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
     6f6:	2300      	movs	r3, #0
     6f8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     6fa:	aa02      	add	r2, sp, #8
     6fc:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     6fe:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     700:	9b04      	ldr	r3, [sp, #16]
     702:	465a      	mov	r2, fp
     704:	431a      	orrs	r2, r3
     706:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     708:	9a04      	ldr	r2, [sp, #16]
     70a:	4653      	mov	r3, sl
     70c:	021b      	lsls	r3, r3, #8
     70e:	4313      	orrs	r3, r2
     710:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     712:	ab07      	add	r3, sp, #28
     714:	885b      	ldrh	r3, [r3, #2]
     716:	9a04      	ldr	r2, [sp, #16]
     718:	041b      	lsls	r3, r3, #16
     71a:	4313      	orrs	r3, r2
     71c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     71e:	9904      	ldr	r1, [sp, #16]
     720:	485d      	ldr	r0, [pc, #372]	; (898 <hif_send+0x1e4>)
     722:	4b5e      	ldr	r3, [pc, #376]	; (89c <hif_send+0x1e8>)
     724:	4798      	blx	r3
     726:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     728:	d157      	bne.n	7da <hif_send+0x126>

		reg = 0UL;
     72a:	2300      	movs	r3, #0
     72c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     72e:	9b04      	ldr	r3, [sp, #16]
     730:	2202      	movs	r2, #2
     732:	4313      	orrs	r3, r2
     734:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     736:	9904      	ldr	r1, [sp, #16]
     738:	4859      	ldr	r0, [pc, #356]	; (8a0 <hif_send+0x1ec>)
     73a:	4b58      	ldr	r3, [pc, #352]	; (89c <hif_send+0x1e8>)
     73c:	4798      	blx	r3
     73e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     740:	d14b      	bne.n	7da <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     742:	2200      	movs	r2, #0
     744:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     746:	ab02      	add	r3, sp, #8
     748:	80da      	strh	r2, [r3, #6]
     74a:	3306      	adds	r3, #6
     74c:	881b      	ldrh	r3, [r3, #0]
     74e:	b29b      	uxth	r3, r3
     750:	4a54      	ldr	r2, [pc, #336]	; (8a4 <hif_send+0x1f0>)
     752:	4293      	cmp	r3, r2
     754:	d849      	bhi.n	7ea <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     756:	4c54      	ldr	r4, [pc, #336]	; (8a8 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     758:	4b54      	ldr	r3, [pc, #336]	; (8ac <hif_send+0x1f8>)
     75a:	469a      	mov	sl, r3
     75c:	e017      	b.n	78e <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     75e:	ab07      	add	r3, sp, #28
     760:	885a      	ldrh	r2, [r3, #2]
     762:	9900      	ldr	r1, [sp, #0]
     764:	468c      	mov	ip, r1
     766:	4462      	add	r2, ip
     768:	b292      	uxth	r2, r2
     76a:	805a      	strh	r2, [r3, #2]
     76c:	e7be      	b.n	6ec <hif_send+0x38>
				nm_bsp_sleep(1);
     76e:	2001      	movs	r0, #1
     770:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
     772:	9b04      	ldr	r3, [sp, #16]
     774:	079b      	lsls	r3, r3, #30
     776:	d528      	bpl.n	7ca <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     778:	ab02      	add	r3, sp, #8
     77a:	88da      	ldrh	r2, [r3, #6]
     77c:	3201      	adds	r2, #1
     77e:	b292      	uxth	r2, r2
     780:	80da      	strh	r2, [r3, #6]
     782:	3306      	adds	r3, #6
     784:	881b      	ldrh	r3, [r3, #0]
     786:	b29b      	uxth	r3, r3
     788:	4a46      	ldr	r2, [pc, #280]	; (8a4 <hif_send+0x1f0>)
     78a:	4293      	cmp	r3, r2
     78c:	d82d      	bhi.n	7ea <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     78e:	a904      	add	r1, sp, #16
     790:	4843      	ldr	r0, [pc, #268]	; (8a0 <hif_send+0x1ec>)
     792:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     794:	2800      	cmp	r0, #0
     796:	d128      	bne.n	7ea <hif_send+0x136>
			if(cnt >= 500) {
     798:	ab02      	add	r3, sp, #8
     79a:	3306      	adds	r3, #6
     79c:	881b      	ldrh	r3, [r3, #0]
     79e:	b29b      	uxth	r3, r3
     7a0:	22f4      	movs	r2, #244	; 0xf4
     7a2:	32ff      	adds	r2, #255	; 0xff
     7a4:	4293      	cmp	r3, r2
     7a6:	d9e4      	bls.n	772 <hif_send+0xbe>
				if(cnt < 501) {
     7a8:	ab02      	add	r3, sp, #8
     7aa:	3306      	adds	r3, #6
     7ac:	881b      	ldrh	r3, [r3, #0]
     7ae:	b29b      	uxth	r3, r3
     7b0:	3201      	adds	r2, #1
     7b2:	4293      	cmp	r3, r2
     7b4:	d8db      	bhi.n	76e <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     7b6:	483e      	ldr	r0, [pc, #248]	; (8b0 <hif_send+0x1fc>)
     7b8:	4b3e      	ldr	r3, [pc, #248]	; (8b4 <hif_send+0x200>)
     7ba:	4798      	blx	r3
     7bc:	483e      	ldr	r0, [pc, #248]	; (8b8 <hif_send+0x204>)
     7be:	4b3f      	ldr	r3, [pc, #252]	; (8bc <hif_send+0x208>)
     7c0:	4798      	blx	r3
     7c2:	200d      	movs	r0, #13
     7c4:	4b3e      	ldr	r3, [pc, #248]	; (8c0 <hif_send+0x20c>)
     7c6:	4798      	blx	r3
     7c8:	e7d1      	b.n	76e <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     7ca:	a905      	add	r1, sp, #20
     7cc:	483d      	ldr	r0, [pc, #244]	; (8c4 <hif_send+0x210>)
     7ce:	4b36      	ldr	r3, [pc, #216]	; (8a8 <hif_send+0x1f4>)
     7d0:	4798      	blx	r3
     7d2:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
     7d4:	d009      	beq.n	7ea <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     7d6:	2300      	movs	r3, #0
     7d8:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     7da:	4b3b      	ldr	r3, [pc, #236]	; (8c8 <hif_send+0x214>)
     7dc:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     7de:	0020      	movs	r0, r4
     7e0:	b009      	add	sp, #36	; 0x24
     7e2:	bc0c      	pop	{r2, r3}
     7e4:	4692      	mov	sl, r2
     7e6:	469b      	mov	fp, r3
     7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
     7ea:	9b05      	ldr	r3, [sp, #20]
     7ec:	2b00      	cmp	r3, #0
     7ee:	d03f      	beq.n	870 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
     7f0:	9b05      	ldr	r3, [sp, #20]
     7f2:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     7f4:	a907      	add	r1, sp, #28
     7f6:	884b      	ldrh	r3, [r1, #2]
     7f8:	b29b      	uxth	r3, r3
     7fa:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     7fc:	9806      	ldr	r0, [sp, #24]
     7fe:	2208      	movs	r2, #8
     800:	4b32      	ldr	r3, [pc, #200]	; (8cc <hif_send+0x218>)
     802:	4798      	blx	r3
     804:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     806:	d1e8      	bne.n	7da <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     808:	9b06      	ldr	r3, [sp, #24]
     80a:	3308      	adds	r3, #8
     80c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     80e:	9b01      	ldr	r3, [sp, #4]
     810:	2b00      	cmp	r3, #0
     812:	d00b      	beq.n	82c <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     814:	9806      	ldr	r0, [sp, #24]
     816:	9a00      	ldr	r2, [sp, #0]
     818:	0019      	movs	r1, r3
     81a:	4b2c      	ldr	r3, [pc, #176]	; (8cc <hif_send+0x218>)
     81c:	4798      	blx	r3
     81e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     820:	d1db      	bne.n	7da <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     822:	9b06      	ldr	r3, [sp, #24]
     824:	9a00      	ldr	r2, [sp, #0]
     826:	4694      	mov	ip, r2
     828:	4463      	add	r3, ip
     82a:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     82c:	2f00      	cmp	r7, #0
     82e:	d00e      	beq.n	84e <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     830:	9b06      	ldr	r3, [sp, #24]
     832:	9a00      	ldr	r2, [sp, #0]
     834:	1aad      	subs	r5, r5, r2
     836:	18ed      	adds	r5, r5, r3
     838:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     83a:	9806      	ldr	r0, [sp, #24]
     83c:	0032      	movs	r2, r6
     83e:	0039      	movs	r1, r7
     840:	4b22      	ldr	r3, [pc, #136]	; (8cc <hif_send+0x218>)
     842:	4798      	blx	r3
     844:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     846:	d1c8      	bne.n	7da <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     848:	9b06      	ldr	r3, [sp, #24]
     84a:	18f3      	adds	r3, r6, r3
     84c:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     84e:	9b05      	ldr	r3, [sp, #20]
     850:	009b      	lsls	r3, r3, #2
     852:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     854:	9b04      	ldr	r3, [sp, #16]
     856:	2202      	movs	r2, #2
     858:	4313      	orrs	r3, r2
     85a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     85c:	9904      	ldr	r1, [sp, #16]
     85e:	481c      	ldr	r0, [pc, #112]	; (8d0 <hif_send+0x21c>)
     860:	4b0e      	ldr	r3, [pc, #56]	; (89c <hif_send+0x1e8>)
     862:	4798      	blx	r3
     864:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     866:	d1b8      	bne.n	7da <hif_send+0x126>
 	ret = hif_chip_sleep();
     868:	4b1a      	ldr	r3, [pc, #104]	; (8d4 <hif_send+0x220>)
     86a:	4798      	blx	r3
     86c:	0004      	movs	r4, r0
	return ret;
     86e:	e7b6      	b.n	7de <hif_send+0x12a>
			ret = hif_chip_sleep();
     870:	4b18      	ldr	r3, [pc, #96]	; (8d4 <hif_send+0x220>)
     872:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     874:	2403      	movs	r4, #3
     876:	4264      	negs	r4, r4
			goto ERR2;
     878:	e7b1      	b.n	7de <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     87a:	22cb      	movs	r2, #203	; 0xcb
     87c:	0052      	lsls	r2, r2, #1
     87e:	4916      	ldr	r1, [pc, #88]	; (8d8 <hif_send+0x224>)
     880:	4816      	ldr	r0, [pc, #88]	; (8dc <hif_send+0x228>)
     882:	4b0c      	ldr	r3, [pc, #48]	; (8b4 <hif_send+0x200>)
     884:	4798      	blx	r3
     886:	4816      	ldr	r0, [pc, #88]	; (8e0 <hif_send+0x22c>)
     888:	4b0c      	ldr	r3, [pc, #48]	; (8bc <hif_send+0x208>)
     88a:	4798      	blx	r3
     88c:	200d      	movs	r0, #13
     88e:	4b0c      	ldr	r3, [pc, #48]	; (8c0 <hif_send+0x20c>)
     890:	4798      	blx	r3
		goto ERR2;
     892:	e7a4      	b.n	7de <hif_send+0x12a>
     894:	00000625 	.word	0x00000625
     898:	0000108c 	.word	0x0000108c
     89c:	000019f5 	.word	0x000019f5
     8a0:	00001078 	.word	0x00001078
     8a4:	000003e7 	.word	0x000003e7
     8a8:	000019e9 	.word	0x000019e9
     8ac:	00000195 	.word	0x00000195
     8b0:	0000a080 	.word	0x0000a080
     8b4:	000089a5 	.word	0x000089a5
     8b8:	0000a08c 	.word	0x0000a08c
     8bc:	00008ac1 	.word	0x00008ac1
     8c0:	000089d9 	.word	0x000089d9
     8c4:	00150400 	.word	0x00150400
     8c8:	00000661 	.word	0x00000661
     8cc:	00001a69 	.word	0x00001a69
     8d0:	0000106c 	.word	0x0000106c
     8d4:	0000067d 	.word	0x0000067d
     8d8:	00009d98 	.word	0x00009d98
     8dc:	00009d50 	.word	0x00009d50
     8e0:	0000a09c 	.word	0x0000a09c

000008e4 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e6:	46ce      	mov	lr, r9
     8e8:	4647      	mov	r7, r8
     8ea:	b580      	push	{r7, lr}
     8ec:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
     8ee:	4bcf      	ldr	r3, [pc, #828]	; (c2c <hif_handle_isr+0x348>)
     8f0:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
     8f2:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
     8f4:	e080      	b.n	9f8 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
     8f6:	4bcd      	ldr	r3, [pc, #820]	; (c2c <hif_handle_isr+0x348>)
     8f8:	9a05      	ldr	r2, [sp, #20]
     8fa:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
     8fc:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     8fe:	af04      	add	r7, sp, #16
     900:	2204      	movs	r2, #4
     902:	0039      	movs	r1, r7
     904:	9805      	ldr	r0, [sp, #20]
     906:	4bca      	ldr	r3, [pc, #808]	; (c30 <hif_handle_isr+0x34c>)
     908:	4798      	blx	r3
     90a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     90c:	887b      	ldrh	r3, [r7, #2]
     90e:	b29b      	uxth	r3, r3
     910:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     912:	2800      	cmp	r0, #0
     914:	d133      	bne.n	97e <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
     916:	ab04      	add	r3, sp, #16
     918:	885b      	ldrh	r3, [r3, #2]
     91a:	b29b      	uxth	r3, r3
     91c:	429d      	cmp	r5, r3
     91e:	d004      	beq.n	92a <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
     920:	ab04      	add	r3, sp, #16
     922:	885b      	ldrh	r3, [r3, #2]
     924:	1aeb      	subs	r3, r5, r3
     926:	2b04      	cmp	r3, #4
     928:	dc39      	bgt.n	99e <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     92a:	ab04      	add	r3, sp, #16
     92c:	781b      	ldrb	r3, [r3, #0]
     92e:	2b01      	cmp	r3, #1
     930:	d04e      	beq.n	9d0 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     932:	ab04      	add	r3, sp, #16
     934:	781b      	ldrb	r3, [r3, #0]
     936:	2b02      	cmp	r3, #2
     938:	d078      	beq.n	a2c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     93a:	ab04      	add	r3, sp, #16
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b04      	cmp	r3, #4
     940:	d100      	bne.n	944 <hif_handle_isr+0x60>
     942:	e090      	b.n	a66 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     944:	ab04      	add	r3, sp, #16
     946:	781b      	ldrb	r3, [r3, #0]
     948:	2b06      	cmp	r3, #6
     94a:	d100      	bne.n	94e <hif_handle_isr+0x6a>
     94c:	e0a8      	b.n	aa0 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     94e:	ab04      	add	r3, sp, #16
     950:	781b      	ldrb	r3, [r3, #0]
     952:	2b07      	cmp	r3, #7
     954:	d100      	bne.n	958 <hif_handle_isr+0x74>
     956:	e0bf      	b.n	ad8 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     958:	ab04      	add	r3, sp, #16
     95a:	781b      	ldrb	r3, [r3, #0]
     95c:	2b05      	cmp	r3, #5
     95e:	d100      	bne.n	962 <hif_handle_isr+0x7e>
     960:	e0d6      	b.n	b10 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
     962:	4ab4      	ldr	r2, [pc, #720]	; (c34 <hif_handle_isr+0x350>)
     964:	49b4      	ldr	r1, [pc, #720]	; (c38 <hif_handle_isr+0x354>)
     966:	48b5      	ldr	r0, [pc, #724]	; (c3c <hif_handle_isr+0x358>)
     968:	4bb5      	ldr	r3, [pc, #724]	; (c40 <hif_handle_isr+0x35c>)
     96a:	4798      	blx	r3
     96c:	48b5      	ldr	r0, [pc, #724]	; (c44 <hif_handle_isr+0x360>)
     96e:	4bb6      	ldr	r3, [pc, #728]	; (c48 <hif_handle_isr+0x364>)
     970:	4798      	blx	r3
     972:	200d      	movs	r0, #13
     974:	4bb5      	ldr	r3, [pc, #724]	; (c4c <hif_handle_isr+0x368>)
     976:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     978:	2406      	movs	r4, #6
     97a:	4264      	negs	r4, r4
     97c:	e116      	b.n	bac <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
     97e:	22d2      	movs	r2, #210	; 0xd2
     980:	32ff      	adds	r2, #255	; 0xff
     982:	49ad      	ldr	r1, [pc, #692]	; (c38 <hif_handle_isr+0x354>)
     984:	48ad      	ldr	r0, [pc, #692]	; (c3c <hif_handle_isr+0x358>)
     986:	4bae      	ldr	r3, [pc, #696]	; (c40 <hif_handle_isr+0x35c>)
     988:	4798      	blx	r3
     98a:	48b1      	ldr	r0, [pc, #708]	; (c50 <hif_handle_isr+0x36c>)
     98c:	4bae      	ldr	r3, [pc, #696]	; (c48 <hif_handle_isr+0x364>)
     98e:	4798      	blx	r3
     990:	200d      	movs	r0, #13
     992:	4bae      	ldr	r3, [pc, #696]	; (c4c <hif_handle_isr+0x368>)
     994:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     996:	2001      	movs	r0, #1
     998:	4bae      	ldr	r3, [pc, #696]	; (c54 <hif_handle_isr+0x370>)
     99a:	4798      	blx	r3
     99c:	e106      	b.n	bac <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     99e:	22ed      	movs	r2, #237	; 0xed
     9a0:	0052      	lsls	r2, r2, #1
     9a2:	49a5      	ldr	r1, [pc, #660]	; (c38 <hif_handle_isr+0x354>)
     9a4:	48a5      	ldr	r0, [pc, #660]	; (c3c <hif_handle_isr+0x358>)
     9a6:	4ca6      	ldr	r4, [pc, #664]	; (c40 <hif_handle_isr+0x35c>)
     9a8:	47a0      	blx	r4
     9aa:	a904      	add	r1, sp, #16
     9ac:	884a      	ldrh	r2, [r1, #2]
     9ae:	b292      	uxth	r2, r2
     9b0:	780b      	ldrb	r3, [r1, #0]
     9b2:	b2db      	uxtb	r3, r3
     9b4:	7849      	ldrb	r1, [r1, #1]
     9b6:	9100      	str	r1, [sp, #0]
     9b8:	0029      	movs	r1, r5
     9ba:	48a7      	ldr	r0, [pc, #668]	; (c58 <hif_handle_isr+0x374>)
     9bc:	47a0      	blx	r4
     9be:	200d      	movs	r0, #13
     9c0:	4ba2      	ldr	r3, [pc, #648]	; (c4c <hif_handle_isr+0x368>)
     9c2:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     9c4:	2001      	movs	r0, #1
     9c6:	4ba3      	ldr	r3, [pc, #652]	; (c54 <hif_handle_isr+0x370>)
     9c8:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     9ca:	2406      	movs	r4, #6
     9cc:	4264      	negs	r4, r4
     9ce:	e0ed      	b.n	bac <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
     9d0:	4b96      	ldr	r3, [pc, #600]	; (c2c <hif_handle_isr+0x348>)
     9d2:	68db      	ldr	r3, [r3, #12]
     9d4:	2b00      	cmp	r3, #0
     9d6:	d01c      	beq.n	a12 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9d8:	4b94      	ldr	r3, [pc, #592]	; (c2c <hif_handle_isr+0x348>)
     9da:	68db      	ldr	r3, [r3, #12]
     9dc:	aa04      	add	r2, sp, #16
     9de:	7850      	ldrb	r0, [r2, #1]
     9e0:	b2c0      	uxtb	r0, r0
     9e2:	8851      	ldrh	r1, [r2, #2]
     9e4:	9a05      	ldr	r2, [sp, #20]
     9e6:	3208      	adds	r2, #8
     9e8:	3908      	subs	r1, #8
     9ea:	b289      	uxth	r1, r1
     9ec:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     9ee:	4b8f      	ldr	r3, [pc, #572]	; (c2c <hif_handle_isr+0x348>)
     9f0:	789b      	ldrb	r3, [r3, #2]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d000      	beq.n	9f8 <hif_handle_isr+0x114>
     9f6:	e09c      	b.n	b32 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
     9f8:	4643      	mov	r3, r8
     9fa:	78db      	ldrb	r3, [r3, #3]
     9fc:	2b00      	cmp	r3, #0
     9fe:	d100      	bne.n	a02 <hif_handle_isr+0x11e>
     a00:	e158      	b.n	cb4 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
     a02:	464b      	mov	r3, r9
     a04:	78db      	ldrb	r3, [r3, #3]
     a06:	3b01      	subs	r3, #1
     a08:	b2db      	uxtb	r3, r3
     a0a:	464a      	mov	r2, r9
     a0c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     a0e:	4e93      	ldr	r6, [pc, #588]	; (c5c <hif_handle_isr+0x378>)
     a10:	e0d7      	b.n	bc2 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
     a12:	22f3      	movs	r2, #243	; 0xf3
     a14:	0052      	lsls	r2, r2, #1
     a16:	4988      	ldr	r1, [pc, #544]	; (c38 <hif_handle_isr+0x354>)
     a18:	4888      	ldr	r0, [pc, #544]	; (c3c <hif_handle_isr+0x358>)
     a1a:	4b89      	ldr	r3, [pc, #548]	; (c40 <hif_handle_isr+0x35c>)
     a1c:	4798      	blx	r3
     a1e:	4890      	ldr	r0, [pc, #576]	; (c60 <hif_handle_isr+0x37c>)
     a20:	4b89      	ldr	r3, [pc, #548]	; (c48 <hif_handle_isr+0x364>)
     a22:	4798      	blx	r3
     a24:	200d      	movs	r0, #13
     a26:	4b89      	ldr	r3, [pc, #548]	; (c4c <hif_handle_isr+0x368>)
     a28:	4798      	blx	r3
     a2a:	e7e0      	b.n	9ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
     a2c:	4b7f      	ldr	r3, [pc, #508]	; (c2c <hif_handle_isr+0x348>)
     a2e:	691b      	ldr	r3, [r3, #16]
     a30:	2b00      	cmp	r3, #0
     a32:	d00b      	beq.n	a4c <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a34:	4b7d      	ldr	r3, [pc, #500]	; (c2c <hif_handle_isr+0x348>)
     a36:	691b      	ldr	r3, [r3, #16]
     a38:	aa04      	add	r2, sp, #16
     a3a:	7850      	ldrb	r0, [r2, #1]
     a3c:	b2c0      	uxtb	r0, r0
     a3e:	8851      	ldrh	r1, [r2, #2]
     a40:	9a05      	ldr	r2, [sp, #20]
     a42:	3208      	adds	r2, #8
     a44:	3908      	subs	r1, #8
     a46:	b289      	uxth	r1, r1
     a48:	4798      	blx	r3
     a4a:	e7d0      	b.n	9ee <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
     a4c:	22f7      	movs	r2, #247	; 0xf7
     a4e:	0052      	lsls	r2, r2, #1
     a50:	4979      	ldr	r1, [pc, #484]	; (c38 <hif_handle_isr+0x354>)
     a52:	487a      	ldr	r0, [pc, #488]	; (c3c <hif_handle_isr+0x358>)
     a54:	4b7a      	ldr	r3, [pc, #488]	; (c40 <hif_handle_isr+0x35c>)
     a56:	4798      	blx	r3
     a58:	4882      	ldr	r0, [pc, #520]	; (c64 <hif_handle_isr+0x380>)
     a5a:	4b7b      	ldr	r3, [pc, #492]	; (c48 <hif_handle_isr+0x364>)
     a5c:	4798      	blx	r3
     a5e:	200d      	movs	r0, #13
     a60:	4b7a      	ldr	r3, [pc, #488]	; (c4c <hif_handle_isr+0x368>)
     a62:	4798      	blx	r3
     a64:	e7c3      	b.n	9ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
     a66:	4b71      	ldr	r3, [pc, #452]	; (c2c <hif_handle_isr+0x348>)
     a68:	695b      	ldr	r3, [r3, #20]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d00b      	beq.n	a86 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a6e:	4b6f      	ldr	r3, [pc, #444]	; (c2c <hif_handle_isr+0x348>)
     a70:	695b      	ldr	r3, [r3, #20]
     a72:	aa04      	add	r2, sp, #16
     a74:	7850      	ldrb	r0, [r2, #1]
     a76:	b2c0      	uxtb	r0, r0
     a78:	8851      	ldrh	r1, [r2, #2]
     a7a:	9a05      	ldr	r2, [sp, #20]
     a7c:	3208      	adds	r2, #8
     a7e:	3908      	subs	r1, #8
     a80:	b289      	uxth	r1, r1
     a82:	4798      	blx	r3
     a84:	e7b3      	b.n	9ee <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
     a86:	22fb      	movs	r2, #251	; 0xfb
     a88:	0052      	lsls	r2, r2, #1
     a8a:	496b      	ldr	r1, [pc, #428]	; (c38 <hif_handle_isr+0x354>)
     a8c:	486b      	ldr	r0, [pc, #428]	; (c3c <hif_handle_isr+0x358>)
     a8e:	4b6c      	ldr	r3, [pc, #432]	; (c40 <hif_handle_isr+0x35c>)
     a90:	4798      	blx	r3
     a92:	4875      	ldr	r0, [pc, #468]	; (c68 <hif_handle_isr+0x384>)
     a94:	4b6c      	ldr	r3, [pc, #432]	; (c48 <hif_handle_isr+0x364>)
     a96:	4798      	blx	r3
     a98:	200d      	movs	r0, #13
     a9a:	4b6c      	ldr	r3, [pc, #432]	; (c4c <hif_handle_isr+0x368>)
     a9c:	4798      	blx	r3
     a9e:	e7a6      	b.n	9ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
     aa0:	4b62      	ldr	r3, [pc, #392]	; (c2c <hif_handle_isr+0x348>)
     aa2:	6a1b      	ldr	r3, [r3, #32]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d00b      	beq.n	ac0 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aa8:	4b60      	ldr	r3, [pc, #384]	; (c2c <hif_handle_isr+0x348>)
     aaa:	6a1b      	ldr	r3, [r3, #32]
     aac:	aa04      	add	r2, sp, #16
     aae:	7850      	ldrb	r0, [r2, #1]
     ab0:	b2c0      	uxtb	r0, r0
     ab2:	8851      	ldrh	r1, [r2, #2]
     ab4:	9a05      	ldr	r2, [sp, #20]
     ab6:	3208      	adds	r2, #8
     ab8:	3908      	subs	r1, #8
     aba:	b289      	uxth	r1, r1
     abc:	4798      	blx	r3
     abe:	e796      	b.n	9ee <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
     ac0:	4a6a      	ldr	r2, [pc, #424]	; (c6c <hif_handle_isr+0x388>)
     ac2:	495d      	ldr	r1, [pc, #372]	; (c38 <hif_handle_isr+0x354>)
     ac4:	485d      	ldr	r0, [pc, #372]	; (c3c <hif_handle_isr+0x358>)
     ac6:	4b5e      	ldr	r3, [pc, #376]	; (c40 <hif_handle_isr+0x35c>)
     ac8:	4798      	blx	r3
     aca:	4869      	ldr	r0, [pc, #420]	; (c70 <hif_handle_isr+0x38c>)
     acc:	4b5e      	ldr	r3, [pc, #376]	; (c48 <hif_handle_isr+0x364>)
     ace:	4798      	blx	r3
     ad0:	200d      	movs	r0, #13
     ad2:	4b5e      	ldr	r3, [pc, #376]	; (c4c <hif_handle_isr+0x368>)
     ad4:	4798      	blx	r3
     ad6:	e78a      	b.n	9ee <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
     ad8:	4b54      	ldr	r3, [pc, #336]	; (c2c <hif_handle_isr+0x348>)
     ada:	699b      	ldr	r3, [r3, #24]
     adc:	2b00      	cmp	r3, #0
     ade:	d00b      	beq.n	af8 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     ae0:	4b52      	ldr	r3, [pc, #328]	; (c2c <hif_handle_isr+0x348>)
     ae2:	699b      	ldr	r3, [r3, #24]
     ae4:	aa04      	add	r2, sp, #16
     ae6:	7850      	ldrb	r0, [r2, #1]
     ae8:	b2c0      	uxtb	r0, r0
     aea:	8851      	ldrh	r1, [r2, #2]
     aec:	9a05      	ldr	r2, [sp, #20]
     aee:	3208      	adds	r2, #8
     af0:	3908      	subs	r1, #8
     af2:	b289      	uxth	r1, r1
     af4:	4798      	blx	r3
     af6:	e77a      	b.n	9ee <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
     af8:	4a5e      	ldr	r2, [pc, #376]	; (c74 <hif_handle_isr+0x390>)
     afa:	494f      	ldr	r1, [pc, #316]	; (c38 <hif_handle_isr+0x354>)
     afc:	484f      	ldr	r0, [pc, #316]	; (c3c <hif_handle_isr+0x358>)
     afe:	4b50      	ldr	r3, [pc, #320]	; (c40 <hif_handle_isr+0x35c>)
     b00:	4798      	blx	r3
     b02:	485d      	ldr	r0, [pc, #372]	; (c78 <hif_handle_isr+0x394>)
     b04:	4b50      	ldr	r3, [pc, #320]	; (c48 <hif_handle_isr+0x364>)
     b06:	4798      	blx	r3
     b08:	200d      	movs	r0, #13
     b0a:	4b50      	ldr	r3, [pc, #320]	; (c4c <hif_handle_isr+0x368>)
     b0c:	4798      	blx	r3
     b0e:	e76e      	b.n	9ee <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
     b10:	4b46      	ldr	r3, [pc, #280]	; (c2c <hif_handle_isr+0x348>)
     b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b14:	2b00      	cmp	r3, #0
     b16:	d100      	bne.n	b1a <hif_handle_isr+0x236>
     b18:	e769      	b.n	9ee <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     b1a:	4b44      	ldr	r3, [pc, #272]	; (c2c <hif_handle_isr+0x348>)
     b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b1e:	aa04      	add	r2, sp, #16
     b20:	7850      	ldrb	r0, [r2, #1]
     b22:	b2c0      	uxtb	r0, r0
     b24:	8851      	ldrh	r1, [r2, #2]
     b26:	9a05      	ldr	r2, [sp, #20]
     b28:	3208      	adds	r2, #8
     b2a:	3908      	subs	r1, #8
     b2c:	b289      	uxth	r1, r1
     b2e:	4798      	blx	r3
     b30:	e75d      	b.n	9ee <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     b32:	4a52      	ldr	r2, [pc, #328]	; (c7c <hif_handle_isr+0x398>)
     b34:	4940      	ldr	r1, [pc, #256]	; (c38 <hif_handle_isr+0x354>)
     b36:	4841      	ldr	r0, [pc, #260]	; (c3c <hif_handle_isr+0x358>)
     b38:	4c41      	ldr	r4, [pc, #260]	; (c40 <hif_handle_isr+0x35c>)
     b3a:	47a0      	blx	r4
     b3c:	ab04      	add	r3, sp, #16
     b3e:	7819      	ldrb	r1, [r3, #0]
     b40:	b2c9      	uxtb	r1, r1
     b42:	785a      	ldrb	r2, [r3, #1]
     b44:	b2d2      	uxtb	r2, r2
     b46:	484e      	ldr	r0, [pc, #312]	; (c80 <hif_handle_isr+0x39c>)
     b48:	47a0      	blx	r4
     b4a:	200d      	movs	r0, #13
     b4c:	4b3f      	ldr	r3, [pc, #252]	; (c4c <hif_handle_isr+0x368>)
     b4e:	4798      	blx	r3
					ret = hif_set_rx_done();
     b50:	4b4c      	ldr	r3, [pc, #304]	; (c84 <hif_handle_isr+0x3a0>)
     b52:	4798      	blx	r3
     b54:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
     b56:	d129      	bne.n	bac <hif_handle_isr+0x2c8>
     b58:	e74e      	b.n	9f8 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
     b5a:	2287      	movs	r2, #135	; 0x87
     b5c:	0092      	lsls	r2, r2, #2
     b5e:	4936      	ldr	r1, [pc, #216]	; (c38 <hif_handle_isr+0x354>)
     b60:	4836      	ldr	r0, [pc, #216]	; (c3c <hif_handle_isr+0x358>)
     b62:	4b37      	ldr	r3, [pc, #220]	; (c40 <hif_handle_isr+0x35c>)
     b64:	4798      	blx	r3
     b66:	4848      	ldr	r0, [pc, #288]	; (c88 <hif_handle_isr+0x3a4>)
     b68:	4b37      	ldr	r3, [pc, #220]	; (c48 <hif_handle_isr+0x364>)
     b6a:	4798      	blx	r3
     b6c:	200d      	movs	r0, #13
     b6e:	4b37      	ldr	r3, [pc, #220]	; (c4c <hif_handle_isr+0x368>)
     b70:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b72:	2402      	movs	r4, #2
     b74:	4264      	negs	r4, r4
     b76:	e019      	b.n	bac <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
     b78:	2289      	movs	r2, #137	; 0x89
     b7a:	0092      	lsls	r2, r2, #2
     b7c:	492e      	ldr	r1, [pc, #184]	; (c38 <hif_handle_isr+0x354>)
     b7e:	482f      	ldr	r0, [pc, #188]	; (c3c <hif_handle_isr+0x358>)
     b80:	4c2f      	ldr	r4, [pc, #188]	; (c40 <hif_handle_isr+0x35c>)
     b82:	47a0      	blx	r4
     b84:	9903      	ldr	r1, [sp, #12]
     b86:	4841      	ldr	r0, [pc, #260]	; (c8c <hif_handle_isr+0x3a8>)
     b88:	47a0      	blx	r4
     b8a:	200d      	movs	r0, #13
     b8c:	4b2f      	ldr	r3, [pc, #188]	; (c4c <hif_handle_isr+0x368>)
     b8e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     b90:	240c      	movs	r4, #12
     b92:	4264      	negs	r4, r4
     b94:	e00a      	b.n	bac <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
     b96:	4a3e      	ldr	r2, [pc, #248]	; (c90 <hif_handle_isr+0x3ac>)
     b98:	4927      	ldr	r1, [pc, #156]	; (c38 <hif_handle_isr+0x354>)
     b9a:	4828      	ldr	r0, [pc, #160]	; (c3c <hif_handle_isr+0x358>)
     b9c:	4b28      	ldr	r3, [pc, #160]	; (c40 <hif_handle_isr+0x35c>)
     b9e:	4798      	blx	r3
     ba0:	483c      	ldr	r0, [pc, #240]	; (c94 <hif_handle_isr+0x3b0>)
     ba2:	4b29      	ldr	r3, [pc, #164]	; (c48 <hif_handle_isr+0x364>)
     ba4:	4798      	blx	r3
     ba6:	200d      	movs	r0, #13
     ba8:	4b28      	ldr	r3, [pc, #160]	; (c4c <hif_handle_isr+0x368>)
     baa:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     bac:	4a3a      	ldr	r2, [pc, #232]	; (c98 <hif_handle_isr+0x3b4>)
     bae:	493b      	ldr	r1, [pc, #236]	; (c9c <hif_handle_isr+0x3b8>)
     bb0:	4822      	ldr	r0, [pc, #136]	; (c3c <hif_handle_isr+0x358>)
     bb2:	4f23      	ldr	r7, [pc, #140]	; (c40 <hif_handle_isr+0x35c>)
     bb4:	47b8      	blx	r7
     bb6:	0021      	movs	r1, r4
     bb8:	4839      	ldr	r0, [pc, #228]	; (ca0 <hif_handle_isr+0x3bc>)
     bba:	47b8      	blx	r7
     bbc:	200d      	movs	r0, #13
     bbe:	4b23      	ldr	r3, [pc, #140]	; (c4c <hif_handle_isr+0x368>)
     bc0:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     bc2:	a903      	add	r1, sp, #12
     bc4:	4837      	ldr	r0, [pc, #220]	; (ca4 <hif_handle_isr+0x3c0>)
     bc6:	47b0      	blx	r6
     bc8:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     bca:	d1e4      	bne.n	b96 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
     bcc:	9b03      	ldr	r3, [sp, #12]
     bce:	07db      	lsls	r3, r3, #31
     bd0:	d5d2      	bpl.n	b78 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
     bd2:	2000      	movs	r0, #0
     bd4:	4b1f      	ldr	r3, [pc, #124]	; (c54 <hif_handle_isr+0x370>)
     bd6:	4798      	blx	r3
			reg &= ~NBIT0;
     bd8:	2301      	movs	r3, #1
     bda:	9903      	ldr	r1, [sp, #12]
     bdc:	4399      	bics	r1, r3
     bde:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     be0:	4830      	ldr	r0, [pc, #192]	; (ca4 <hif_handle_isr+0x3c0>)
     be2:	4b31      	ldr	r3, [pc, #196]	; (ca8 <hif_handle_isr+0x3c4>)
     be4:	4798      	blx	r3
     be6:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
     be8:	d1e0      	bne.n	bac <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
     bea:	2201      	movs	r2, #1
     bec:	4b0f      	ldr	r3, [pc, #60]	; (c2c <hif_handle_isr+0x348>)
     bee:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     bf0:	9b03      	ldr	r3, [sp, #12]
     bf2:	049d      	lsls	r5, r3, #18
     bf4:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
     bf6:	d0b0      	beq.n	b5a <hif_handle_isr+0x276>
				uint32 address = 0;
     bf8:	2300      	movs	r3, #0
     bfa:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     bfc:	a905      	add	r1, sp, #20
     bfe:	482b      	ldr	r0, [pc, #172]	; (cac <hif_handle_isr+0x3c8>)
     c00:	4b16      	ldr	r3, [pc, #88]	; (c5c <hif_handle_isr+0x378>)
     c02:	4798      	blx	r3
     c04:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     c06:	d100      	bne.n	c0a <hif_handle_isr+0x326>
     c08:	e675      	b.n	8f6 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     c0a:	22c8      	movs	r2, #200	; 0xc8
     c0c:	32ff      	adds	r2, #255	; 0xff
     c0e:	490a      	ldr	r1, [pc, #40]	; (c38 <hif_handle_isr+0x354>)
     c10:	480a      	ldr	r0, [pc, #40]	; (c3c <hif_handle_isr+0x358>)
     c12:	4b0b      	ldr	r3, [pc, #44]	; (c40 <hif_handle_isr+0x35c>)
     c14:	4798      	blx	r3
     c16:	4826      	ldr	r0, [pc, #152]	; (cb0 <hif_handle_isr+0x3cc>)
     c18:	4b0b      	ldr	r3, [pc, #44]	; (c48 <hif_handle_isr+0x364>)
     c1a:	4798      	blx	r3
     c1c:	200d      	movs	r0, #13
     c1e:	4b0b      	ldr	r3, [pc, #44]	; (c4c <hif_handle_isr+0x368>)
     c20:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     c22:	2001      	movs	r0, #1
     c24:	4b0b      	ldr	r3, [pc, #44]	; (c54 <hif_handle_isr+0x370>)
     c26:	4798      	blx	r3
     c28:	e7c0      	b.n	bac <hif_handle_isr+0x2c8>
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	200002cc 	.word	0x200002cc
     c30:	00001a01 	.word	0x00001a01
     c34:	0000020f 	.word	0x0000020f
     c38:	00009da4 	.word	0x00009da4
     c3c:	00009d50 	.word	0x00009d50
     c40:	000089a5 	.word	0x000089a5
     c44:	00009f00 	.word	0x00009f00
     c48:	00008ac1 	.word	0x00008ac1
     c4c:	000089d9 	.word	0x000089d9
     c50:	00009dfc 	.word	0x00009dfc
     c54:	000002ad 	.word	0x000002ad
     c58:	00009e14 	.word	0x00009e14
     c5c:	000019e9 	.word	0x000019e9
     c60:	00009e54 	.word	0x00009e54
     c64:	00009e74 	.word	0x00009e74
     c68:	00009e98 	.word	0x00009e98
     c6c:	000001ff 	.word	0x000001ff
     c70:	00009eb8 	.word	0x00009eb8
     c74:	00000206 	.word	0x00000206
     c78:	00009edc 	.word	0x00009edc
     c7c:	00000215 	.word	0x00000215
     c80:	00009f18 	.word	0x00009f18
     c84:	000005e1 	.word	0x000005e1
     c88:	00009f44 	.word	0x00009f44
     c8c:	00009f58 	.word	0x00009f58
     c90:	0000022d 	.word	0x0000022d
     c94:	00009f74 	.word	0x00009f74
     c98:	0000024a 	.word	0x0000024a
     c9c:	00009dac 	.word	0x00009dac
     ca0:	00009f98 	.word	0x00009f98
     ca4:	00001070 	.word	0x00001070
     ca8:	000019f5 	.word	0x000019f5
     cac:	00001084 	.word	0x00001084
     cb0:	00009dd8 	.word	0x00009dd8
			}
		}
	}

	return ret;
}
     cb4:	2000      	movs	r0, #0
     cb6:	b007      	add	sp, #28
     cb8:	bc0c      	pop	{r2, r3}
     cba:	4690      	mov	r8, r2
     cbc:	4699      	mov	r9, r3
     cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000cc0 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     cc0:	b570      	push	{r4, r5, r6, lr}
     cc2:	0014      	movs	r4, r2
     cc4:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     cc6:	2800      	cmp	r0, #0
     cc8:	d003      	beq.n	cd2 <hif_receive+0x12>
     cca:	2900      	cmp	r1, #0
     ccc:	d001      	beq.n	cd2 <hif_receive+0x12>
     cce:	2a00      	cmp	r2, #0
     cd0:	d112      	bne.n	cf8 <hif_receive+0x38>
	{
		if(isDone)
     cd2:	2d00      	cmp	r5, #0
     cd4:	d002      	beq.n	cdc <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     cd6:	4b27      	ldr	r3, [pc, #156]	; (d74 <hif_receive+0xb4>)
     cd8:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     cda:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     cdc:	4a26      	ldr	r2, [pc, #152]	; (d78 <hif_receive+0xb8>)
     cde:	4927      	ldr	r1, [pc, #156]	; (d7c <hif_receive+0xbc>)
     ce0:	4827      	ldr	r0, [pc, #156]	; (d80 <hif_receive+0xc0>)
     ce2:	4b28      	ldr	r3, [pc, #160]	; (d84 <hif_receive+0xc4>)
     ce4:	4798      	blx	r3
     ce6:	4828      	ldr	r0, [pc, #160]	; (d88 <hif_receive+0xc8>)
     ce8:	4b28      	ldr	r3, [pc, #160]	; (d8c <hif_receive+0xcc>)
     cea:	4798      	blx	r3
     cec:	200d      	movs	r0, #13
     cee:	4b28      	ldr	r3, [pc, #160]	; (d90 <hif_receive+0xd0>)
     cf0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     cf2:	200c      	movs	r0, #12
     cf4:	4240      	negs	r0, r0
     cf6:	e7f0      	b.n	cda <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     cf8:	4b26      	ldr	r3, [pc, #152]	; (d94 <hif_receive+0xd4>)
     cfa:	689b      	ldr	r3, [r3, #8]
     cfc:	429a      	cmp	r2, r3
     cfe:	d81a      	bhi.n	d36 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     d00:	4b24      	ldr	r3, [pc, #144]	; (d94 <hif_receive+0xd4>)
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	4298      	cmp	r0, r3
     d06:	d326      	bcc.n	d56 <hif_receive+0x96>
     d08:	1886      	adds	r6, r0, r2
     d0a:	4a22      	ldr	r2, [pc, #136]	; (d94 <hif_receive+0xd4>)
     d0c:	6853      	ldr	r3, [r2, #4]
     d0e:	6892      	ldr	r2, [r2, #8]
     d10:	189b      	adds	r3, r3, r2
     d12:	429e      	cmp	r6, r3
     d14:	d81f      	bhi.n	d56 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     d16:	0022      	movs	r2, r4
     d18:	4b1f      	ldr	r3, [pc, #124]	; (d98 <hif_receive+0xd8>)
     d1a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     d1c:	2800      	cmp	r0, #0
     d1e:	d1dc      	bne.n	cda <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     d20:	4a1c      	ldr	r2, [pc, #112]	; (d94 <hif_receive+0xd4>)
     d22:	6853      	ldr	r3, [r2, #4]
     d24:	6892      	ldr	r2, [r2, #8]
     d26:	189b      	adds	r3, r3, r2
     d28:	429e      	cmp	r6, r3
     d2a:	d001      	beq.n	d30 <hif_receive+0x70>
     d2c:	2d00      	cmp	r5, #0
     d2e:	d0d4      	beq.n	cda <hif_receive+0x1a>
		ret = hif_set_rx_done();
     d30:	4b10      	ldr	r3, [pc, #64]	; (d74 <hif_receive+0xb4>)
     d32:	4798      	blx	r3
     d34:	e7d1      	b.n	cda <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     d36:	4a19      	ldr	r2, [pc, #100]	; (d9c <hif_receive+0xdc>)
     d38:	4910      	ldr	r1, [pc, #64]	; (d7c <hif_receive+0xbc>)
     d3a:	4811      	ldr	r0, [pc, #68]	; (d80 <hif_receive+0xc0>)
     d3c:	4d11      	ldr	r5, [pc, #68]	; (d84 <hif_receive+0xc4>)
     d3e:	47a8      	blx	r5
     d40:	4b14      	ldr	r3, [pc, #80]	; (d94 <hif_receive+0xd4>)
     d42:	689a      	ldr	r2, [r3, #8]
     d44:	0021      	movs	r1, r4
     d46:	4816      	ldr	r0, [pc, #88]	; (da0 <hif_receive+0xe0>)
     d48:	47a8      	blx	r5
     d4a:	200d      	movs	r0, #13
     d4c:	4b10      	ldr	r3, [pc, #64]	; (d90 <hif_receive+0xd0>)
     d4e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d50:	200c      	movs	r0, #12
     d52:	4240      	negs	r0, r0
		goto ERR1;
     d54:	e7c1      	b.n	cda <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     d56:	4a13      	ldr	r2, [pc, #76]	; (da4 <hif_receive+0xe4>)
     d58:	4908      	ldr	r1, [pc, #32]	; (d7c <hif_receive+0xbc>)
     d5a:	4809      	ldr	r0, [pc, #36]	; (d80 <hif_receive+0xc0>)
     d5c:	4b09      	ldr	r3, [pc, #36]	; (d84 <hif_receive+0xc4>)
     d5e:	4798      	blx	r3
     d60:	4811      	ldr	r0, [pc, #68]	; (da8 <hif_receive+0xe8>)
     d62:	4b0a      	ldr	r3, [pc, #40]	; (d8c <hif_receive+0xcc>)
     d64:	4798      	blx	r3
     d66:	200d      	movs	r0, #13
     d68:	4b09      	ldr	r3, [pc, #36]	; (d90 <hif_receive+0xd0>)
     d6a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d6c:	200c      	movs	r0, #12
     d6e:	4240      	negs	r0, r0
		goto ERR1;
     d70:	e7b3      	b.n	cda <hif_receive+0x1a>
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	000005e1 	.word	0x000005e1
     d78:	0000026b 	.word	0x0000026b
     d7c:	00009dbc 	.word	0x00009dbc
     d80:	00009d50 	.word	0x00009d50
     d84:	000089a5 	.word	0x000089a5
     d88:	00009fc8 	.word	0x00009fc8
     d8c:	00008ac1 	.word	0x00008ac1
     d90:	000089d9 	.word	0x000089d9
     d94:	200002cc 	.word	0x200002cc
     d98:	00001a01 	.word	0x00001a01
     d9c:	00000273 	.word	0x00000273
     da0:	00009fe8 	.word	0x00009fe8
     da4:	00000279 	.word	0x00000279
     da8:	0000a030 	.word	0x0000a030

00000dac <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     dac:	b570      	push	{r4, r5, r6, lr}
     dae:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     db0:	2807      	cmp	r0, #7
     db2:	d81f      	bhi.n	df4 <hif_register_cb+0x48>
     db4:	0083      	lsls	r3, r0, #2
     db6:	4a16      	ldr	r2, [pc, #88]	; (e10 <hif_register_cb+0x64>)
     db8:	58d3      	ldr	r3, [r2, r3]
     dba:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     dbc:	4b15      	ldr	r3, [pc, #84]	; (e14 <hif_register_cb+0x68>)
     dbe:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     dc0:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     dc2:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     dc4:	4b13      	ldr	r3, [pc, #76]	; (e14 <hif_register_cb+0x68>)
     dc6:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
     dc8:	2000      	movs	r0, #0
			break;
     dca:	e7fa      	b.n	dc2 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     dcc:	4b11      	ldr	r3, [pc, #68]	; (e14 <hif_register_cb+0x68>)
     dce:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     dd0:	2000      	movs	r0, #0
			break;
     dd2:	e7f6      	b.n	dc2 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     dd4:	4b0f      	ldr	r3, [pc, #60]	; (e14 <hif_register_cb+0x68>)
     dd6:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     dd8:	2000      	movs	r0, #0
			break;
     dda:	e7f2      	b.n	dc2 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     ddc:	4b0d      	ldr	r3, [pc, #52]	; (e14 <hif_register_cb+0x68>)
     dde:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     de0:	2000      	movs	r0, #0
			break;
     de2:	e7ee      	b.n	dc2 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     de4:	4b0b      	ldr	r3, [pc, #44]	; (e14 <hif_register_cb+0x68>)
     de6:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     de8:	2000      	movs	r0, #0
			break;
     dea:	e7ea      	b.n	dc2 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     dec:	4b09      	ldr	r3, [pc, #36]	; (e14 <hif_register_cb+0x68>)
     dee:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     df0:	2000      	movs	r0, #0
			break;
     df2:	e7e6      	b.n	dc2 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     df4:	4a08      	ldr	r2, [pc, #32]	; (e18 <hif_register_cb+0x6c>)
     df6:	4909      	ldr	r1, [pc, #36]	; (e1c <hif_register_cb+0x70>)
     df8:	4809      	ldr	r0, [pc, #36]	; (e20 <hif_register_cb+0x74>)
     dfa:	4d0a      	ldr	r5, [pc, #40]	; (e24 <hif_register_cb+0x78>)
     dfc:	47a8      	blx	r5
     dfe:	0021      	movs	r1, r4
     e00:	4809      	ldr	r0, [pc, #36]	; (e28 <hif_register_cb+0x7c>)
     e02:	47a8      	blx	r5
     e04:	200d      	movs	r0, #13
     e06:	4b09      	ldr	r3, [pc, #36]	; (e2c <hif_register_cb+0x80>)
     e08:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     e0a:	200c      	movs	r0, #12
     e0c:	4240      	negs	r0, r0
			break;
     e0e:	e7d8      	b.n	dc2 <hif_register_cb+0x16>
     e10:	00009d78 	.word	0x00009d78
     e14:	200002cc 	.word	0x200002cc
     e18:	000002b1 	.word	0x000002b1
     e1c:	00009dc8 	.word	0x00009dc8
     e20:	00009d50 	.word	0x00009d50
     e24:	000089a5 	.word	0x000089a5
     e28:	0000a074 	.word	0x0000a074
     e2c:	000089d9 	.word	0x000089d9

00000e30 <hif_init>:
{
     e30:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     e32:	2228      	movs	r2, #40	; 0x28
     e34:	2100      	movs	r1, #0
     e36:	4806      	ldr	r0, [pc, #24]	; (e50 <hif_init+0x20>)
     e38:	4b06      	ldr	r3, [pc, #24]	; (e54 <hif_init+0x24>)
     e3a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     e3c:	4806      	ldr	r0, [pc, #24]	; (e58 <hif_init+0x28>)
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <hif_init+0x2c>)
     e40:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     e42:	4907      	ldr	r1, [pc, #28]	; (e60 <hif_init+0x30>)
     e44:	2003      	movs	r0, #3
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <hif_init+0x34>)
     e48:	4798      	blx	r3
}
     e4a:	2000      	movs	r0, #0
     e4c:	bd10      	pop	{r4, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	200002cc 	.word	0x200002cc
     e54:	000005a1 	.word	0x000005a1
     e58:	000005cd 	.word	0x000005cd
     e5c:	00000255 	.word	0x00000255
     e60:	000005dd 	.word	0x000005dd
     e64:	00000dad 	.word	0x00000dad

00000e68 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     e68:	b530      	push	{r4, r5, lr}
     e6a:	b09f      	sub	sp, #124	; 0x7c
     e6c:	0004      	movs	r4, r0
     e6e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e70:	282c      	cmp	r0, #44	; 0x2c
     e72:	d02f      	beq.n	ed4 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e74:	281b      	cmp	r0, #27
     e76:	d03d      	beq.n	ef4 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e78:	2806      	cmp	r0, #6
     e7a:	d04b      	beq.n	f14 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e7c:	280e      	cmp	r0, #14
     e7e:	d027      	beq.n	ed0 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e80:	2832      	cmp	r0, #50	; 0x32
     e82:	d057      	beq.n	f34 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e84:	282f      	cmp	r0, #47	; 0x2f
     e86:	d065      	beq.n	f54 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e88:	2834      	cmp	r0, #52	; 0x34
     e8a:	d100      	bne.n	e8e <m2m_wifi_cb+0x26>
     e8c:	e077      	b.n	f7e <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e8e:	2811      	cmp	r0, #17
     e90:	d100      	bne.n	e94 <m2m_wifi_cb+0x2c>
     e92:	e096      	b.n	fc2 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e94:	2813      	cmp	r0, #19
     e96:	d100      	bne.n	e9a <m2m_wifi_cb+0x32>
     e98:	e0ac      	b.n	ff4 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e9a:	2804      	cmp	r0, #4
     e9c:	d100      	bne.n	ea0 <m2m_wifi_cb+0x38>
     e9e:	e0bb      	b.n	1018 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     ea0:	2865      	cmp	r0, #101	; 0x65
     ea2:	d100      	bne.n	ea6 <m2m_wifi_cb+0x3e>
     ea4:	e0ca      	b.n	103c <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     ea6:	2809      	cmp	r0, #9
     ea8:	d100      	bne.n	eac <m2m_wifi_cb+0x44>
     eaa:	e0d9      	b.n	1060 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     eac:	282a      	cmp	r0, #42	; 0x2a
     eae:	d100      	bne.n	eb2 <m2m_wifi_cb+0x4a>
     eb0:	e0e8      	b.n	1084 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     eb2:	2820      	cmp	r0, #32
     eb4:	d100      	bne.n	eb8 <m2m_wifi_cb+0x50>
     eb6:	e0f7      	b.n	10a8 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     eb8:	2292      	movs	r2, #146	; 0x92
     eba:	0052      	lsls	r2, r2, #1
     ebc:	4989      	ldr	r1, [pc, #548]	; (10e4 <m2m_wifi_cb+0x27c>)
     ebe:	488a      	ldr	r0, [pc, #552]	; (10e8 <m2m_wifi_cb+0x280>)
     ec0:	4d8a      	ldr	r5, [pc, #552]	; (10ec <m2m_wifi_cb+0x284>)
     ec2:	47a8      	blx	r5
     ec4:	0021      	movs	r1, r4
     ec6:	488a      	ldr	r0, [pc, #552]	; (10f0 <m2m_wifi_cb+0x288>)
     ec8:	47a8      	blx	r5
     eca:	200d      	movs	r0, #13
     ecc:	4b89      	ldr	r3, [pc, #548]	; (10f4 <m2m_wifi_cb+0x28c>)
     ece:	4798      	blx	r3
	}
}
     ed0:	b01f      	add	sp, #124	; 0x7c
     ed2:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     ed4:	2300      	movs	r3, #0
     ed6:	2204      	movs	r2, #4
     ed8:	a903      	add	r1, sp, #12
     eda:	0028      	movs	r0, r5
     edc:	4c86      	ldr	r4, [pc, #536]	; (10f8 <m2m_wifi_cb+0x290>)
     ede:	47a0      	blx	r4
     ee0:	2800      	cmp	r0, #0
     ee2:	d1f5      	bne.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     ee4:	4b85      	ldr	r3, [pc, #532]	; (10fc <m2m_wifi_cb+0x294>)
     ee6:	681b      	ldr	r3, [r3, #0]
     ee8:	2b00      	cmp	r3, #0
     eea:	d0f1      	beq.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     eec:	a903      	add	r1, sp, #12
     eee:	302c      	adds	r0, #44	; 0x2c
     ef0:	4798      	blx	r3
     ef2:	e7ed      	b.n	ed0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     ef4:	2300      	movs	r3, #0
     ef6:	2208      	movs	r2, #8
     ef8:	a903      	add	r1, sp, #12
     efa:	0028      	movs	r0, r5
     efc:	4c7e      	ldr	r4, [pc, #504]	; (10f8 <m2m_wifi_cb+0x290>)
     efe:	47a0      	blx	r4
     f00:	2800      	cmp	r0, #0
     f02:	d1e5      	bne.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f04:	4b7d      	ldr	r3, [pc, #500]	; (10fc <m2m_wifi_cb+0x294>)
     f06:	681b      	ldr	r3, [r3, #0]
     f08:	2b00      	cmp	r3, #0
     f0a:	d0e1      	beq.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     f0c:	a903      	add	r1, sp, #12
     f0e:	301b      	adds	r0, #27
     f10:	4798      	blx	r3
     f12:	e7dd      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     f14:	2301      	movs	r3, #1
     f16:	2230      	movs	r2, #48	; 0x30
     f18:	a903      	add	r1, sp, #12
     f1a:	0028      	movs	r0, r5
     f1c:	4c76      	ldr	r4, [pc, #472]	; (10f8 <m2m_wifi_cb+0x290>)
     f1e:	47a0      	blx	r4
     f20:	2800      	cmp	r0, #0
     f22:	d1d5      	bne.n	ed0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
     f24:	4b75      	ldr	r3, [pc, #468]	; (10fc <m2m_wifi_cb+0x294>)
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	2b00      	cmp	r3, #0
     f2a:	d0d1      	beq.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     f2c:	a903      	add	r1, sp, #12
     f2e:	3006      	adds	r0, #6
     f30:	4798      	blx	r3
     f32:	e7cd      	b.n	ed0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     f34:	2300      	movs	r3, #0
     f36:	2214      	movs	r2, #20
     f38:	a903      	add	r1, sp, #12
     f3a:	0028      	movs	r0, r5
     f3c:	4c6e      	ldr	r4, [pc, #440]	; (10f8 <m2m_wifi_cb+0x290>)
     f3e:	47a0      	blx	r4
     f40:	2800      	cmp	r0, #0
     f42:	d1c5      	bne.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f44:	4b6d      	ldr	r3, [pc, #436]	; (10fc <m2m_wifi_cb+0x294>)
     f46:	681b      	ldr	r3, [r3, #0]
     f48:	2b00      	cmp	r3, #0
     f4a:	d0c1      	beq.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     f4c:	a903      	add	r1, sp, #12
     f4e:	3032      	adds	r0, #50	; 0x32
     f50:	4798      	blx	r3
     f52:	e7bd      	b.n	ed0 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     f54:	2264      	movs	r2, #100	; 0x64
     f56:	2100      	movs	r1, #0
     f58:	a803      	add	r0, sp, #12
     f5a:	4b69      	ldr	r3, [pc, #420]	; (1100 <m2m_wifi_cb+0x298>)
     f5c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     f5e:	2300      	movs	r3, #0
     f60:	2264      	movs	r2, #100	; 0x64
     f62:	a903      	add	r1, sp, #12
     f64:	0028      	movs	r0, r5
     f66:	4c64      	ldr	r4, [pc, #400]	; (10f8 <m2m_wifi_cb+0x290>)
     f68:	47a0      	blx	r4
     f6a:	2800      	cmp	r0, #0
     f6c:	d1b0      	bne.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
     f6e:	4b63      	ldr	r3, [pc, #396]	; (10fc <m2m_wifi_cb+0x294>)
     f70:	681b      	ldr	r3, [r3, #0]
     f72:	2b00      	cmp	r3, #0
     f74:	d0ac      	beq.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f76:	a903      	add	r1, sp, #12
     f78:	302f      	adds	r0, #47	; 0x2f
     f7a:	4798      	blx	r3
     f7c:	e7a8      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f7e:	2300      	movs	r3, #0
     f80:	2204      	movs	r2, #4
     f82:	a903      	add	r1, sp, #12
     f84:	0028      	movs	r0, r5
     f86:	4c5c      	ldr	r4, [pc, #368]	; (10f8 <m2m_wifi_cb+0x290>)
     f88:	47a0      	blx	r4
     f8a:	2800      	cmp	r0, #0
     f8c:	d1a0      	bne.n	ed0 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f8e:	485d      	ldr	r0, [pc, #372]	; (1104 <m2m_wifi_cb+0x29c>)
     f90:	4d56      	ldr	r5, [pc, #344]	; (10ec <m2m_wifi_cb+0x284>)
     f92:	47a8      	blx	r5
     f94:	9c03      	ldr	r4, [sp, #12]
     f96:	0a23      	lsrs	r3, r4, #8
     f98:	20ff      	movs	r0, #255	; 0xff
     f9a:	4003      	ands	r3, r0
     f9c:	0c22      	lsrs	r2, r4, #16
     f9e:	4002      	ands	r2, r0
     fa0:	0e21      	lsrs	r1, r4, #24
     fa2:	4020      	ands	r0, r4
     fa4:	9000      	str	r0, [sp, #0]
     fa6:	4858      	ldr	r0, [pc, #352]	; (1108 <m2m_wifi_cb+0x2a0>)
     fa8:	47a8      	blx	r5
     faa:	200d      	movs	r0, #13
     fac:	4b51      	ldr	r3, [pc, #324]	; (10f4 <m2m_wifi_cb+0x28c>)
     fae:	4798      	blx	r3
			if (gpfAppWifiCb)
     fb0:	4b52      	ldr	r3, [pc, #328]	; (10fc <m2m_wifi_cb+0x294>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	2b00      	cmp	r3, #0
     fb6:	d100      	bne.n	fba <m2m_wifi_cb+0x152>
     fb8:	e78a      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     fba:	2100      	movs	r1, #0
     fbc:	2034      	movs	r0, #52	; 0x34
     fbe:	4798      	blx	r3
     fc0:	e786      	b.n	ed0 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
     fc2:	2200      	movs	r2, #0
     fc4:	4b51      	ldr	r3, [pc, #324]	; (110c <m2m_wifi_cb+0x2a4>)
     fc6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     fc8:	2300      	movs	r3, #0
     fca:	3204      	adds	r2, #4
     fcc:	a903      	add	r1, sp, #12
     fce:	0028      	movs	r0, r5
     fd0:	4c49      	ldr	r4, [pc, #292]	; (10f8 <m2m_wifi_cb+0x290>)
     fd2:	47a0      	blx	r4
     fd4:	2800      	cmp	r0, #0
     fd6:	d000      	beq.n	fda <m2m_wifi_cb+0x172>
     fd8:	e77a      	b.n	ed0 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
     fda:	ab03      	add	r3, sp, #12
     fdc:	781a      	ldrb	r2, [r3, #0]
     fde:	4b4c      	ldr	r3, [pc, #304]	; (1110 <m2m_wifi_cb+0x2a8>)
     fe0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     fe2:	4b46      	ldr	r3, [pc, #280]	; (10fc <m2m_wifi_cb+0x294>)
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	2b00      	cmp	r3, #0
     fe8:	d100      	bne.n	fec <m2m_wifi_cb+0x184>
     fea:	e771      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     fec:	a903      	add	r1, sp, #12
     fee:	3011      	adds	r0, #17
     ff0:	4798      	blx	r3
     ff2:	e76d      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     ff4:	2300      	movs	r3, #0
     ff6:	222c      	movs	r2, #44	; 0x2c
     ff8:	a903      	add	r1, sp, #12
     ffa:	0028      	movs	r0, r5
     ffc:	4c3e      	ldr	r4, [pc, #248]	; (10f8 <m2m_wifi_cb+0x290>)
     ffe:	47a0      	blx	r4
    1000:	2800      	cmp	r0, #0
    1002:	d000      	beq.n	1006 <m2m_wifi_cb+0x19e>
    1004:	e764      	b.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    1006:	4b3d      	ldr	r3, [pc, #244]	; (10fc <m2m_wifi_cb+0x294>)
    1008:	681b      	ldr	r3, [r3, #0]
    100a:	2b00      	cmp	r3, #0
    100c:	d100      	bne.n	1010 <m2m_wifi_cb+0x1a8>
    100e:	e75f      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    1010:	a903      	add	r1, sp, #12
    1012:	3013      	adds	r0, #19
    1014:	4798      	blx	r3
    1016:	e75b      	b.n	ed0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    1018:	2300      	movs	r3, #0
    101a:	2204      	movs	r2, #4
    101c:	a91c      	add	r1, sp, #112	; 0x70
    101e:	0028      	movs	r0, r5
    1020:	4c35      	ldr	r4, [pc, #212]	; (10f8 <m2m_wifi_cb+0x290>)
    1022:	47a0      	blx	r4
    1024:	2800      	cmp	r0, #0
    1026:	d000      	beq.n	102a <m2m_wifi_cb+0x1c2>
    1028:	e752      	b.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    102a:	4b34      	ldr	r3, [pc, #208]	; (10fc <m2m_wifi_cb+0x294>)
    102c:	681b      	ldr	r3, [r3, #0]
    102e:	2b00      	cmp	r3, #0
    1030:	d100      	bne.n	1034 <m2m_wifi_cb+0x1cc>
    1032:	e74d      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1034:	a91c      	add	r1, sp, #112	; 0x70
    1036:	3004      	adds	r0, #4
    1038:	4798      	blx	r3
    103a:	e749      	b.n	ed0 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    103c:	2300      	movs	r3, #0
    103e:	2204      	movs	r2, #4
    1040:	a91c      	add	r1, sp, #112	; 0x70
    1042:	0028      	movs	r0, r5
    1044:	4c2c      	ldr	r4, [pc, #176]	; (10f8 <m2m_wifi_cb+0x290>)
    1046:	47a0      	blx	r4
    1048:	2800      	cmp	r0, #0
    104a:	d000      	beq.n	104e <m2m_wifi_cb+0x1e6>
    104c:	e740      	b.n	ed0 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    104e:	4b2b      	ldr	r3, [pc, #172]	; (10fc <m2m_wifi_cb+0x294>)
    1050:	681b      	ldr	r3, [r3, #0]
    1052:	2b00      	cmp	r3, #0
    1054:	d100      	bne.n	1058 <m2m_wifi_cb+0x1f0>
    1056:	e73b      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1058:	a91c      	add	r1, sp, #112	; 0x70
    105a:	3065      	adds	r0, #101	; 0x65
    105c:	4798      	blx	r3
    105e:	e737      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1060:	2301      	movs	r3, #1
    1062:	2264      	movs	r2, #100	; 0x64
    1064:	a903      	add	r1, sp, #12
    1066:	0028      	movs	r0, r5
    1068:	4c23      	ldr	r4, [pc, #140]	; (10f8 <m2m_wifi_cb+0x290>)
    106a:	47a0      	blx	r4
    106c:	2800      	cmp	r0, #0
    106e:	d000      	beq.n	1072 <m2m_wifi_cb+0x20a>
    1070:	e72e      	b.n	ed0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1072:	4b22      	ldr	r3, [pc, #136]	; (10fc <m2m_wifi_cb+0x294>)
    1074:	681b      	ldr	r3, [r3, #0]
    1076:	2b00      	cmp	r3, #0
    1078:	d100      	bne.n	107c <m2m_wifi_cb+0x214>
    107a:	e729      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    107c:	a903      	add	r1, sp, #12
    107e:	3009      	adds	r0, #9
    1080:	4798      	blx	r3
    1082:	e725      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1084:	2301      	movs	r3, #1
    1086:	2204      	movs	r2, #4
    1088:	a903      	add	r1, sp, #12
    108a:	0028      	movs	r0, r5
    108c:	4c1a      	ldr	r4, [pc, #104]	; (10f8 <m2m_wifi_cb+0x290>)
    108e:	47a0      	blx	r4
    1090:	2800      	cmp	r0, #0
    1092:	d000      	beq.n	1096 <m2m_wifi_cb+0x22e>
    1094:	e71c      	b.n	ed0 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    1096:	4b19      	ldr	r3, [pc, #100]	; (10fc <m2m_wifi_cb+0x294>)
    1098:	681b      	ldr	r3, [r3, #0]
    109a:	2b00      	cmp	r3, #0
    109c:	d100      	bne.n	10a0 <m2m_wifi_cb+0x238>
    109e:	e717      	b.n	ed0 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    10a0:	a903      	add	r1, sp, #12
    10a2:	302a      	adds	r0, #42	; 0x2a
    10a4:	4798      	blx	r3
    10a6:	e713      	b.n	ed0 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    10a8:	2300      	movs	r3, #0
    10aa:	2208      	movs	r2, #8
    10ac:	a903      	add	r1, sp, #12
    10ae:	0028      	movs	r0, r5
    10b0:	4c11      	ldr	r4, [pc, #68]	; (10f8 <m2m_wifi_cb+0x290>)
    10b2:	47a0      	blx	r4
    10b4:	2800      	cmp	r0, #0
    10b6:	d000      	beq.n	10ba <m2m_wifi_cb+0x252>
    10b8:	e70a      	b.n	ed0 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    10ba:	ab03      	add	r3, sp, #12
    10bc:	889a      	ldrh	r2, [r3, #4]
    10be:	0028      	movs	r0, r5
    10c0:	3008      	adds	r0, #8
    10c2:	2301      	movs	r3, #1
    10c4:	9903      	ldr	r1, [sp, #12]
    10c6:	4c0c      	ldr	r4, [pc, #48]	; (10f8 <m2m_wifi_cb+0x290>)
    10c8:	47a0      	blx	r4
    10ca:	2800      	cmp	r0, #0
    10cc:	d000      	beq.n	10d0 <m2m_wifi_cb+0x268>
    10ce:	e6ff      	b.n	ed0 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    10d0:	4b0a      	ldr	r3, [pc, #40]	; (10fc <m2m_wifi_cb+0x294>)
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	2b00      	cmp	r3, #0
    10d6:	d100      	bne.n	10da <m2m_wifi_cb+0x272>
    10d8:	e6fa      	b.n	ed0 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    10da:	a903      	add	r1, sp, #12
    10dc:	3020      	adds	r0, #32
    10de:	4798      	blx	r3
    10e0:	e6f6      	b.n	ed0 <m2m_wifi_cb+0x68>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	0000a0b8 	.word	0x0000a0b8
    10e8:	00009d50 	.word	0x00009d50
    10ec:	000089a5 	.word	0x000089a5
    10f0:	0000a108 	.word	0x0000a108
    10f4:	000089d9 	.word	0x000089d9
    10f8:	00000cc1 	.word	0x00000cc1
    10fc:	200000a0 	.word	0x200000a0
    1100:	000005a1 	.word	0x000005a1
    1104:	0000a080 	.word	0x0000a080
    1108:	0000a0e8 	.word	0x0000a0e8
    110c:	200000a5 	.word	0x200000a5
    1110:	200000a4 	.word	0x200000a4

00001114 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    1114:	b5f0      	push	{r4, r5, r6, r7, lr}
    1116:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1118:	2201      	movs	r2, #1
    111a:	230f      	movs	r3, #15
    111c:	446b      	add	r3, sp
    111e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    1120:	2800      	cmp	r0, #0
    1122:	d061      	beq.n	11e8 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    1124:	6802      	ldr	r2, [r0, #0]
    1126:	4b32      	ldr	r3, [pc, #200]	; (11f0 <m2m_wifi_init+0xdc>)
    1128:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    112a:	2200      	movs	r2, #0
    112c:	4b31      	ldr	r3, [pc, #196]	; (11f4 <m2m_wifi_init+0xe0>)
    112e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    1130:	200f      	movs	r0, #15
    1132:	4468      	add	r0, sp
    1134:	4b30      	ldr	r3, [pc, #192]	; (11f8 <m2m_wifi_init+0xe4>)
    1136:	4798      	blx	r3
    1138:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    113a:	d002      	beq.n	1142 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    113c:	0020      	movs	r0, r4
    113e:	b00f      	add	sp, #60	; 0x3c
    1140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    1142:	2000      	movs	r0, #0
    1144:	4b2d      	ldr	r3, [pc, #180]	; (11fc <m2m_wifi_init+0xe8>)
    1146:	4798      	blx	r3
    1148:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    114a:	d149      	bne.n	11e0 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    114c:	492c      	ldr	r1, [pc, #176]	; (1200 <m2m_wifi_init+0xec>)
    114e:	2001      	movs	r0, #1
    1150:	4b2c      	ldr	r3, [pc, #176]	; (1204 <m2m_wifi_init+0xf0>)
    1152:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    1154:	ae04      	add	r6, sp, #16
    1156:	0030      	movs	r0, r6
    1158:	4b2b      	ldr	r3, [pc, #172]	; (1208 <m2m_wifi_init+0xf4>)
    115a:	4798      	blx	r3
    115c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    115e:	482b      	ldr	r0, [pc, #172]	; (120c <m2m_wifi_init+0xf8>)
    1160:	4d2b      	ldr	r5, [pc, #172]	; (1210 <m2m_wifi_init+0xfc>)
    1162:	47a8      	blx	r5
    1164:	79b3      	ldrb	r3, [r6, #6]
    1166:	7972      	ldrb	r2, [r6, #5]
    1168:	7931      	ldrb	r1, [r6, #4]
    116a:	8c30      	ldrh	r0, [r6, #32]
    116c:	9000      	str	r0, [sp, #0]
    116e:	4829      	ldr	r0, [pc, #164]	; (1214 <m2m_wifi_init+0x100>)
    1170:	47a8      	blx	r5
    1172:	200d      	movs	r0, #13
    1174:	4f28      	ldr	r7, [pc, #160]	; (1218 <m2m_wifi_init+0x104>)
    1176:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    1178:	4824      	ldr	r0, [pc, #144]	; (120c <m2m_wifi_init+0xf8>)
    117a:	47a8      	blx	r5
    117c:	2226      	movs	r2, #38	; 0x26
    117e:	446a      	add	r2, sp
    1180:	211a      	movs	r1, #26
    1182:	4469      	add	r1, sp
    1184:	4825      	ldr	r0, [pc, #148]	; (121c <m2m_wifi_init+0x108>)
    1186:	47a8      	blx	r5
    1188:	200d      	movs	r0, #13
    118a:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    118c:	481f      	ldr	r0, [pc, #124]	; (120c <m2m_wifi_init+0xf8>)
    118e:	47a8      	blx	r5
    1190:	7a73      	ldrb	r3, [r6, #9]
    1192:	7a32      	ldrb	r2, [r6, #8]
    1194:	79f1      	ldrb	r1, [r6, #7]
    1196:	4822      	ldr	r0, [pc, #136]	; (1220 <m2m_wifi_init+0x10c>)
    1198:	47a8      	blx	r5
    119a:	200d      	movs	r0, #13
    119c:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    119e:	481b      	ldr	r0, [pc, #108]	; (120c <m2m_wifi_init+0xf8>)
    11a0:	47a8      	blx	r5
    11a2:	2302      	movs	r3, #2
    11a4:	2205      	movs	r2, #5
    11a6:	2113      	movs	r1, #19
    11a8:	481e      	ldr	r0, [pc, #120]	; (1224 <m2m_wifi_init+0x110>)
    11aa:	47a8      	blx	r5
    11ac:	200d      	movs	r0, #13
    11ae:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    11b0:	4816      	ldr	r0, [pc, #88]	; (120c <m2m_wifi_init+0xf8>)
    11b2:	47a8      	blx	r5
    11b4:	4a1c      	ldr	r2, [pc, #112]	; (1228 <m2m_wifi_init+0x114>)
    11b6:	491d      	ldr	r1, [pc, #116]	; (122c <m2m_wifi_init+0x118>)
    11b8:	481d      	ldr	r0, [pc, #116]	; (1230 <m2m_wifi_init+0x11c>)
    11ba:	47a8      	blx	r5
    11bc:	200d      	movs	r0, #13
    11be:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    11c0:	0023      	movs	r3, r4
    11c2:	330d      	adds	r3, #13
    11c4:	d1ba      	bne.n	113c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    11c6:	22e8      	movs	r2, #232	; 0xe8
    11c8:	32ff      	adds	r2, #255	; 0xff
    11ca:	491a      	ldr	r1, [pc, #104]	; (1234 <m2m_wifi_init+0x120>)
    11cc:	481a      	ldr	r0, [pc, #104]	; (1238 <m2m_wifi_init+0x124>)
    11ce:	4b10      	ldr	r3, [pc, #64]	; (1210 <m2m_wifi_init+0xfc>)
    11d0:	4798      	blx	r3
    11d2:	481a      	ldr	r0, [pc, #104]	; (123c <m2m_wifi_init+0x128>)
    11d4:	4b1a      	ldr	r3, [pc, #104]	; (1240 <m2m_wifi_init+0x12c>)
    11d6:	4798      	blx	r3
    11d8:	200d      	movs	r0, #13
    11da:	4b0f      	ldr	r3, [pc, #60]	; (1218 <m2m_wifi_init+0x104>)
    11dc:	4798      	blx	r3
    11de:	e7ad      	b.n	113c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    11e0:	2000      	movs	r0, #0
    11e2:	4b18      	ldr	r3, [pc, #96]	; (1244 <m2m_wifi_init+0x130>)
    11e4:	4798      	blx	r3
    11e6:	e7a9      	b.n	113c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    11e8:	240c      	movs	r4, #12
    11ea:	4264      	negs	r4, r4
    11ec:	e7a6      	b.n	113c <m2m_wifi_init+0x28>
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	200000a0 	.word	0x200000a0
    11f4:	200000a5 	.word	0x200000a5
    11f8:	00001bb5 	.word	0x00001bb5
    11fc:	00000e31 	.word	0x00000e31
    1200:	00000e69 	.word	0x00000e69
    1204:	00000dad 	.word	0x00000dad
    1208:	00001ad1 	.word	0x00001ad1
    120c:	0000a080 	.word	0x0000a080
    1210:	000089a5 	.word	0x000089a5
    1214:	0000a1c4 	.word	0x0000a1c4
    1218:	000089d9 	.word	0x000089d9
    121c:	0000a1ec 	.word	0x0000a1ec
    1220:	0000a208 	.word	0x0000a208
    1224:	0000a22c 	.word	0x0000a22c
    1228:	0000a244 	.word	0x0000a244
    122c:	0000a250 	.word	0x0000a250
    1230:	0000a25c 	.word	0x0000a25c
    1234:	0000a0c4 	.word	0x0000a0c4
    1238:	00009d50 	.word	0x00009d50
    123c:	0000a274 	.word	0x0000a274
    1240:	00008ac1 	.word	0x00008ac1
    1244:	00001c89 	.word	0x00001c89

00001248 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1248:	b510      	push	{r4, lr}
	return hif_handle_isr();
    124a:	4b01      	ldr	r3, [pc, #4]	; (1250 <m2m_wifi_handle_events+0x8>)
    124c:	4798      	blx	r3
}
    124e:	bd10      	pop	{r4, pc}
    1250:	000008e5 	.word	0x000008e5

00001254 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    1254:	b5f0      	push	{r4, r5, r6, r7, lr}
    1256:	46ce      	mov	lr, r9
    1258:	4647      	mov	r7, r8
    125a:	b580      	push	{r7, lr}
    125c:	b0a3      	sub	sp, #140	; 0x8c
    125e:	9005      	str	r0, [sp, #20]
    1260:	000c      	movs	r4, r1
    1262:	0015      	movs	r5, r2
    1264:	001f      	movs	r7, r3
    1266:	ab2a      	add	r3, sp, #168	; 0xa8
    1268:	881b      	ldrh	r3, [r3, #0]
    126a:	4699      	mov	r9, r3
    126c:	ab2b      	add	r3, sp, #172	; 0xac
    126e:	781b      	ldrb	r3, [r3, #0]
    1270:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    1272:	2a01      	cmp	r2, #1
    1274:	d003      	beq.n	127e <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    1276:	2f00      	cmp	r7, #0
    1278:	d040      	beq.n	12fc <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    127a:	2a02      	cmp	r2, #2
    127c:	d04c      	beq.n	1318 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    127e:	1e63      	subs	r3, r4, #1
    1280:	2b1f      	cmp	r3, #31
    1282:	d900      	bls.n	1286 <m2m_wifi_connect_sc+0x32>
    1284:	e078      	b.n	1378 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    1286:	464b      	mov	r3, r9
    1288:	3b01      	subs	r3, #1
    128a:	b29b      	uxth	r3, r3
    128c:	2b0d      	cmp	r3, #13
    128e:	d903      	bls.n	1298 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1290:	464b      	mov	r3, r9
    1292:	2bff      	cmp	r3, #255	; 0xff
    1294:	d000      	beq.n	1298 <m2m_wifi_connect_sc+0x44>
    1296:	e07d      	b.n	1394 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1298:	ae07      	add	r6, sp, #28
    129a:	0022      	movs	r2, r4
    129c:	9905      	ldr	r1, [sp, #20]
    129e:	205a      	movs	r0, #90	; 0x5a
    12a0:	ab02      	add	r3, sp, #8
    12a2:	469c      	mov	ip, r3
    12a4:	4460      	add	r0, ip
    12a6:	4b78      	ldr	r3, [pc, #480]	; (1488 <m2m_wifi_connect_sc+0x234>)
    12a8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    12aa:	1934      	adds	r4, r6, r4
    12ac:	3446      	adds	r4, #70	; 0x46
    12ae:	2300      	movs	r3, #0
    12b0:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    12b2:	3344      	adds	r3, #68	; 0x44
    12b4:	464a      	mov	r2, r9
    12b6:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    12b8:	4643      	mov	r3, r8
    12ba:	1e5a      	subs	r2, r3, #1
    12bc:	4193      	sbcs	r3, r2
    12be:	2267      	movs	r2, #103	; 0x67
    12c0:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    12c2:	2341      	movs	r3, #65	; 0x41
    12c4:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    12c6:	2d03      	cmp	r5, #3
    12c8:	d100      	bne.n	12cc <m2m_wifi_connect_sc+0x78>
    12ca:	e072      	b.n	13b2 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    12cc:	2d02      	cmp	r5, #2
    12ce:	d100      	bne.n	12d2 <m2m_wifi_connect_sc+0x7e>
    12d0:	e0ab      	b.n	142a <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    12d2:	2d04      	cmp	r5, #4
    12d4:	d100      	bne.n	12d8 <m2m_wifi_connect_sc+0x84>
    12d6:	e0c3      	b.n	1460 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    12d8:	2d01      	cmp	r5, #1
    12da:	d000      	beq.n	12de <m2m_wifi_connect_sc+0x8a>
    12dc:	e0c6      	b.n	146c <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    12de:	2300      	movs	r3, #0
    12e0:	9302      	str	r3, [sp, #8]
    12e2:	9301      	str	r3, [sp, #4]
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	336c      	adds	r3, #108	; 0x6c
    12e8:	aa07      	add	r2, sp, #28
    12ea:	2128      	movs	r1, #40	; 0x28
    12ec:	2001      	movs	r0, #1
    12ee:	4c67      	ldr	r4, [pc, #412]	; (148c <m2m_wifi_connect_sc+0x238>)
    12f0:	47a0      	blx	r4

ERR1:
	return ret;
}
    12f2:	b023      	add	sp, #140	; 0x8c
    12f4:	bc0c      	pop	{r2, r3}
    12f6:	4690      	mov	r8, r2
    12f8:	4699      	mov	r9, r3
    12fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    12fc:	4a64      	ldr	r2, [pc, #400]	; (1490 <m2m_wifi_connect_sc+0x23c>)
    12fe:	4965      	ldr	r1, [pc, #404]	; (1494 <m2m_wifi_connect_sc+0x240>)
    1300:	4865      	ldr	r0, [pc, #404]	; (1498 <m2m_wifi_connect_sc+0x244>)
    1302:	4b66      	ldr	r3, [pc, #408]	; (149c <m2m_wifi_connect_sc+0x248>)
    1304:	4798      	blx	r3
    1306:	4866      	ldr	r0, [pc, #408]	; (14a0 <m2m_wifi_connect_sc+0x24c>)
    1308:	4b66      	ldr	r3, [pc, #408]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    130a:	4798      	blx	r3
    130c:	200d      	movs	r0, #13
    130e:	4b66      	ldr	r3, [pc, #408]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    1310:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1312:	200c      	movs	r0, #12
    1314:	4240      	negs	r0, r0
			goto ERR1;
    1316:	e7ec      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1318:	0038      	movs	r0, r7
    131a:	4b64      	ldr	r3, [pc, #400]	; (14ac <m2m_wifi_connect_sc+0x258>)
    131c:	4798      	blx	r3
    131e:	2840      	cmp	r0, #64	; 0x40
    1320:	d1ad      	bne.n	127e <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1322:	783b      	ldrb	r3, [r7, #0]
    1324:	001a      	movs	r2, r3
    1326:	3a30      	subs	r2, #48	; 0x30
    1328:	2a36      	cmp	r2, #54	; 0x36
    132a:	d817      	bhi.n	135c <m2m_wifi_connect_sc+0x108>
    132c:	3a0a      	subs	r2, #10
    132e:	2a06      	cmp	r2, #6
    1330:	d914      	bls.n	135c <m2m_wifi_connect_sc+0x108>
    1332:	3b47      	subs	r3, #71	; 0x47
    1334:	2b19      	cmp	r3, #25
    1336:	d911      	bls.n	135c <m2m_wifi_connect_sc+0x108>
    1338:	1c7a      	adds	r2, r7, #1
    133a:	0038      	movs	r0, r7
    133c:	3040      	adds	r0, #64	; 0x40
    133e:	7813      	ldrb	r3, [r2, #0]
    1340:	0019      	movs	r1, r3
    1342:	3930      	subs	r1, #48	; 0x30
    1344:	2936      	cmp	r1, #54	; 0x36
    1346:	d809      	bhi.n	135c <m2m_wifi_connect_sc+0x108>
    1348:	390a      	subs	r1, #10
    134a:	2906      	cmp	r1, #6
    134c:	d906      	bls.n	135c <m2m_wifi_connect_sc+0x108>
    134e:	3b47      	subs	r3, #71	; 0x47
    1350:	2b19      	cmp	r3, #25
    1352:	d903      	bls.n	135c <m2m_wifi_connect_sc+0x108>
    1354:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    1356:	4282      	cmp	r2, r0
    1358:	d1f1      	bne.n	133e <m2m_wifi_connect_sc+0xea>
    135a:	e790      	b.n	127e <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    135c:	4a54      	ldr	r2, [pc, #336]	; (14b0 <m2m_wifi_connect_sc+0x25c>)
    135e:	494d      	ldr	r1, [pc, #308]	; (1494 <m2m_wifi_connect_sc+0x240>)
    1360:	484d      	ldr	r0, [pc, #308]	; (1498 <m2m_wifi_connect_sc+0x244>)
    1362:	4b4e      	ldr	r3, [pc, #312]	; (149c <m2m_wifi_connect_sc+0x248>)
    1364:	4798      	blx	r3
    1366:	4853      	ldr	r0, [pc, #332]	; (14b4 <m2m_wifi_connect_sc+0x260>)
    1368:	4b4e      	ldr	r3, [pc, #312]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    136a:	4798      	blx	r3
    136c:	200d      	movs	r0, #13
    136e:	4b4e      	ldr	r3, [pc, #312]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    1370:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    1372:	200c      	movs	r0, #12
    1374:	4240      	negs	r0, r0
					goto ERR1;
    1376:	e7bc      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    1378:	4a4f      	ldr	r2, [pc, #316]	; (14b8 <m2m_wifi_connect_sc+0x264>)
    137a:	4946      	ldr	r1, [pc, #280]	; (1494 <m2m_wifi_connect_sc+0x240>)
    137c:	4846      	ldr	r0, [pc, #280]	; (1498 <m2m_wifi_connect_sc+0x244>)
    137e:	4b47      	ldr	r3, [pc, #284]	; (149c <m2m_wifi_connect_sc+0x248>)
    1380:	4798      	blx	r3
    1382:	484e      	ldr	r0, [pc, #312]	; (14bc <m2m_wifi_connect_sc+0x268>)
    1384:	4b47      	ldr	r3, [pc, #284]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    1386:	4798      	blx	r3
    1388:	200d      	movs	r0, #13
    138a:	4b47      	ldr	r3, [pc, #284]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    138c:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    138e:	200c      	movs	r0, #12
    1390:	4240      	negs	r0, r0
		goto ERR1;
    1392:	e7ae      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    1394:	228d      	movs	r2, #141	; 0x8d
    1396:	0092      	lsls	r2, r2, #2
    1398:	493e      	ldr	r1, [pc, #248]	; (1494 <m2m_wifi_connect_sc+0x240>)
    139a:	483f      	ldr	r0, [pc, #252]	; (1498 <m2m_wifi_connect_sc+0x244>)
    139c:	4b3f      	ldr	r3, [pc, #252]	; (149c <m2m_wifi_connect_sc+0x248>)
    139e:	4798      	blx	r3
    13a0:	4847      	ldr	r0, [pc, #284]	; (14c0 <m2m_wifi_connect_sc+0x26c>)
    13a2:	4b40      	ldr	r3, [pc, #256]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    13a4:	4798      	blx	r3
    13a6:	200d      	movs	r0, #13
    13a8:	4b3f      	ldr	r3, [pc, #252]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    13aa:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13ac:	200c      	movs	r0, #12
    13ae:	4240      	negs	r0, r0
			goto ERR1;
    13b0:	e79f      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    13b2:	783b      	ldrb	r3, [r7, #0]
    13b4:	3b01      	subs	r3, #1
    13b6:	b2db      	uxtb	r3, r3
    13b8:	aa07      	add	r2, sp, #28
    13ba:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    13bc:	2b03      	cmp	r3, #3
    13be:	d817      	bhi.n	13f0 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    13c0:	787a      	ldrb	r2, [r7, #1]
    13c2:	1e51      	subs	r1, r2, #1
    13c4:	ab07      	add	r3, sp, #28
    13c6:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    13c8:	2310      	movs	r3, #16
    13ca:	0011      	movs	r1, r2
    13cc:	4399      	bics	r1, r3
    13ce:	290b      	cmp	r1, #11
    13d0:	d01d      	beq.n	140e <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    13d2:	4a3c      	ldr	r2, [pc, #240]	; (14c4 <m2m_wifi_connect_sc+0x270>)
    13d4:	492f      	ldr	r1, [pc, #188]	; (1494 <m2m_wifi_connect_sc+0x240>)
    13d6:	4830      	ldr	r0, [pc, #192]	; (1498 <m2m_wifi_connect_sc+0x244>)
    13d8:	4c30      	ldr	r4, [pc, #192]	; (149c <m2m_wifi_connect_sc+0x248>)
    13da:	47a0      	blx	r4
    13dc:	ab07      	add	r3, sp, #28
    13de:	7859      	ldrb	r1, [r3, #1]
    13e0:	4839      	ldr	r0, [pc, #228]	; (14c8 <m2m_wifi_connect_sc+0x274>)
    13e2:	47a0      	blx	r4
    13e4:	200d      	movs	r0, #13
    13e6:	4b30      	ldr	r3, [pc, #192]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    13e8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    13ea:	200c      	movs	r0, #12
    13ec:	4240      	negs	r0, r0
			goto ERR1;
    13ee:	e780      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    13f0:	4a36      	ldr	r2, [pc, #216]	; (14cc <m2m_wifi_connect_sc+0x278>)
    13f2:	4928      	ldr	r1, [pc, #160]	; (1494 <m2m_wifi_connect_sc+0x240>)
    13f4:	4828      	ldr	r0, [pc, #160]	; (1498 <m2m_wifi_connect_sc+0x244>)
    13f6:	4c29      	ldr	r4, [pc, #164]	; (149c <m2m_wifi_connect_sc+0x248>)
    13f8:	47a0      	blx	r4
    13fa:	ab07      	add	r3, sp, #28
    13fc:	7819      	ldrb	r1, [r3, #0]
    13fe:	4834      	ldr	r0, [pc, #208]	; (14d0 <m2m_wifi_connect_sc+0x27c>)
    1400:	47a0      	blx	r4
    1402:	200d      	movs	r0, #13
    1404:	4b28      	ldr	r3, [pc, #160]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    1406:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1408:	200c      	movs	r0, #12
    140a:	4240      	negs	r0, r0
			goto ERR1;
    140c:	e771      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    140e:	1cb9      	adds	r1, r7, #2
    1410:	2016      	movs	r0, #22
    1412:	ab02      	add	r3, sp, #8
    1414:	469c      	mov	ip, r3
    1416:	4460      	add	r0, ip
    1418:	4b1b      	ldr	r3, [pc, #108]	; (1488 <m2m_wifi_connect_sc+0x234>)
    141a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    141c:	787b      	ldrb	r3, [r7, #1]
    141e:	aa07      	add	r2, sp, #28
    1420:	4694      	mov	ip, r2
    1422:	4463      	add	r3, ip
    1424:	2200      	movs	r2, #0
    1426:	709a      	strb	r2, [r3, #2]
    1428:	e759      	b.n	12de <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    142a:	0038      	movs	r0, r7
    142c:	4b1f      	ldr	r3, [pc, #124]	; (14ac <m2m_wifi_connect_sc+0x258>)
    142e:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    1430:	1e43      	subs	r3, r0, #1
    1432:	b29b      	uxth	r3, r3
    1434:	2b3f      	cmp	r3, #63	; 0x3f
    1436:	d805      	bhi.n	1444 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1438:	1c42      	adds	r2, r0, #1
    143a:	0039      	movs	r1, r7
    143c:	a807      	add	r0, sp, #28
    143e:	4b12      	ldr	r3, [pc, #72]	; (1488 <m2m_wifi_connect_sc+0x234>)
    1440:	4798      	blx	r3
    1442:	e74c      	b.n	12de <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    1444:	4a23      	ldr	r2, [pc, #140]	; (14d4 <m2m_wifi_connect_sc+0x280>)
    1446:	4913      	ldr	r1, [pc, #76]	; (1494 <m2m_wifi_connect_sc+0x240>)
    1448:	4813      	ldr	r0, [pc, #76]	; (1498 <m2m_wifi_connect_sc+0x244>)
    144a:	4b14      	ldr	r3, [pc, #80]	; (149c <m2m_wifi_connect_sc+0x248>)
    144c:	4798      	blx	r3
    144e:	4822      	ldr	r0, [pc, #136]	; (14d8 <m2m_wifi_connect_sc+0x284>)
    1450:	4b14      	ldr	r3, [pc, #80]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    1452:	4798      	blx	r3
    1454:	200d      	movs	r0, #13
    1456:	4b14      	ldr	r3, [pc, #80]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    1458:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    145a:	200c      	movs	r0, #12
    145c:	4240      	negs	r0, r0
			goto ERR1;
    145e:	e748      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1460:	223e      	movs	r2, #62	; 0x3e
    1462:	0039      	movs	r1, r7
    1464:	a807      	add	r0, sp, #28
    1466:	4b08      	ldr	r3, [pc, #32]	; (1488 <m2m_wifi_connect_sc+0x234>)
    1468:	4798      	blx	r3
    146a:	e738      	b.n	12de <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    146c:	4a1b      	ldr	r2, [pc, #108]	; (14dc <m2m_wifi_connect_sc+0x288>)
    146e:	4909      	ldr	r1, [pc, #36]	; (1494 <m2m_wifi_connect_sc+0x240>)
    1470:	4809      	ldr	r0, [pc, #36]	; (1498 <m2m_wifi_connect_sc+0x244>)
    1472:	4b0a      	ldr	r3, [pc, #40]	; (149c <m2m_wifi_connect_sc+0x248>)
    1474:	4798      	blx	r3
    1476:	481a      	ldr	r0, [pc, #104]	; (14e0 <m2m_wifi_connect_sc+0x28c>)
    1478:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <m2m_wifi_connect_sc+0x250>)
    147a:	4798      	blx	r3
    147c:	200d      	movs	r0, #13
    147e:	4b0a      	ldr	r3, [pc, #40]	; (14a8 <m2m_wifi_connect_sc+0x254>)
    1480:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1482:	200c      	movs	r0, #12
    1484:	4240      	negs	r0, r0
		goto ERR1;
    1486:	e734      	b.n	12f2 <m2m_wifi_connect_sc+0x9e>
    1488:	0000058d 	.word	0x0000058d
    148c:	000006b5 	.word	0x000006b5
    1490:	00000215 	.word	0x00000215
    1494:	0000a0d4 	.word	0x0000a0d4
    1498:	00009d50 	.word	0x00009d50
    149c:	000089a5 	.word	0x000089a5
    14a0:	0000a11c 	.word	0x0000a11c
    14a4:	00008ac1 	.word	0x00008ac1
    14a8:	000089d9 	.word	0x000089d9
    14ac:	000005b1 	.word	0x000005b1
    14b0:	00000221 	.word	0x00000221
    14b4:	0000a130 	.word	0x0000a130
    14b8:	0000022b 	.word	0x0000022b
    14bc:	0000a13c 	.word	0x0000a13c
    14c0:	0000a150 	.word	0x0000a150
    14c4:	00000252 	.word	0x00000252
    14c8:	0000a178 	.word	0x0000a178
    14cc:	0000024b 	.word	0x0000024b
    14d0:	0000a15c 	.word	0x0000a15c
    14d4:	00000261 	.word	0x00000261
    14d8:	0000a194 	.word	0x0000a194
    14dc:	00000271 	.word	0x00000271
    14e0:	0000a1b0 	.word	0x0000a1b0

000014e4 <m2m_wifi_connect>:
{
    14e4:	b530      	push	{r4, r5, lr}
    14e6:	b083      	sub	sp, #12
    14e8:	ac06      	add	r4, sp, #24
    14ea:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    14ec:	2500      	movs	r5, #0
    14ee:	9501      	str	r5, [sp, #4]
    14f0:	9400      	str	r4, [sp, #0]
    14f2:	4c02      	ldr	r4, [pc, #8]	; (14fc <m2m_wifi_connect+0x18>)
    14f4:	47a0      	blx	r4
}
    14f6:	b003      	add	sp, #12
    14f8:	bd30      	pop	{r4, r5, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	00001255 	.word	0x00001255

00001500 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    1500:	2000      	movs	r0, #0
    1502:	4770      	bx	lr

00001504 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    1504:	b5f0      	push	{r4, r5, r6, r7, lr}
    1506:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    1508:	2580      	movs	r5, #128	; 0x80
    150a:	006d      	lsls	r5, r5, #1
    150c:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    150e:	24a5      	movs	r4, #165	; 0xa5
    1510:	0164      	lsls	r4, r4, #5
    1512:	4f08      	ldr	r7, [pc, #32]	; (1534 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1514:	4e08      	ldr	r6, [pc, #32]	; (1538 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    1516:	0029      	movs	r1, r5
    1518:	0020      	movs	r0, r4
    151a:	47b8      	blx	r7
			uint32 reg = 0;
    151c:	2300      	movs	r3, #0
    151e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1520:	a901      	add	r1, sp, #4
    1522:	0020      	movs	r0, r4
    1524:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    1526:	2800      	cmp	r0, #0
    1528:	d1f5      	bne.n	1516 <chip_apply_conf+0x12>
				if(reg == val32)
    152a:	9b01      	ldr	r3, [sp, #4]
    152c:	429d      	cmp	r5, r3
    152e:	d1f2      	bne.n	1516 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    1530:	b003      	add	sp, #12
    1532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1534:	000019f5 	.word	0x000019f5
    1538:	000019e9 	.word	0x000019e9

0000153c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    153c:	b500      	push	{lr}
    153e:	b083      	sub	sp, #12
	uint32 reg = 0;
    1540:	2300      	movs	r3, #0
    1542:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    1544:	a901      	add	r1, sp, #4
    1546:	4811      	ldr	r0, [pc, #68]	; (158c <enable_interrupts+0x50>)
    1548:	4b11      	ldr	r3, [pc, #68]	; (1590 <enable_interrupts+0x54>)
    154a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    154c:	2800      	cmp	r0, #0
    154e:	d001      	beq.n	1554 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    1550:	b003      	add	sp, #12
    1552:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    1554:	2180      	movs	r1, #128	; 0x80
    1556:	0049      	lsls	r1, r1, #1
    1558:	9b01      	ldr	r3, [sp, #4]
    155a:	4319      	orrs	r1, r3
    155c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    155e:	480b      	ldr	r0, [pc, #44]	; (158c <enable_interrupts+0x50>)
    1560:	4b0c      	ldr	r3, [pc, #48]	; (1594 <enable_interrupts+0x58>)
    1562:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1564:	2800      	cmp	r0, #0
    1566:	d1f3      	bne.n	1550 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1568:	a901      	add	r1, sp, #4
    156a:	20d0      	movs	r0, #208	; 0xd0
    156c:	0140      	lsls	r0, r0, #5
    156e:	4b08      	ldr	r3, [pc, #32]	; (1590 <enable_interrupts+0x54>)
    1570:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1572:	2800      	cmp	r0, #0
    1574:	d1ec      	bne.n	1550 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    1576:	2180      	movs	r1, #128	; 0x80
    1578:	0249      	lsls	r1, r1, #9
    157a:	9b01      	ldr	r3, [sp, #4]
    157c:	4319      	orrs	r1, r3
    157e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1580:	20d0      	movs	r0, #208	; 0xd0
    1582:	0140      	lsls	r0, r0, #5
    1584:	4b03      	ldr	r3, [pc, #12]	; (1594 <enable_interrupts+0x58>)
    1586:	4798      	blx	r3
    1588:	e7e2      	b.n	1550 <enable_interrupts+0x14>
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	00001408 	.word	0x00001408
    1590:	000019e9 	.word	0x000019e9
    1594:	000019f5 	.word	0x000019f5

00001598 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1598:	b510      	push	{r4, lr}
    159a:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    159c:	4b28      	ldr	r3, [pc, #160]	; (1640 <nmi_get_chipid+0xa8>)
    159e:	681c      	ldr	r4, [r3, #0]
    15a0:	2c00      	cmp	r4, #0
    15a2:	d004      	beq.n	15ae <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    15a4:	4b26      	ldr	r3, [pc, #152]	; (1640 <nmi_get_chipid+0xa8>)
    15a6:	681c      	ldr	r4, [r3, #0]
}
    15a8:	0020      	movs	r0, r4
    15aa:	b002      	add	sp, #8
    15ac:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    15ae:	0019      	movs	r1, r3
    15b0:	2080      	movs	r0, #128	; 0x80
    15b2:	0140      	lsls	r0, r0, #5
    15b4:	4b23      	ldr	r3, [pc, #140]	; (1644 <nmi_get_chipid+0xac>)
    15b6:	4798      	blx	r3
    15b8:	2800      	cmp	r0, #0
    15ba:	d003      	beq.n	15c4 <nmi_get_chipid+0x2c>
			chipid = 0;
    15bc:	2200      	movs	r2, #0
    15be:	4b20      	ldr	r3, [pc, #128]	; (1640 <nmi_get_chipid+0xa8>)
    15c0:	601a      	str	r2, [r3, #0]
			return 0;
    15c2:	e7f1      	b.n	15a8 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    15c4:	a901      	add	r1, sp, #4
    15c6:	4820      	ldr	r0, [pc, #128]	; (1648 <nmi_get_chipid+0xb0>)
    15c8:	4b1e      	ldr	r3, [pc, #120]	; (1644 <nmi_get_chipid+0xac>)
    15ca:	4798      	blx	r3
    15cc:	2800      	cmp	r0, #0
    15ce:	d003      	beq.n	15d8 <nmi_get_chipid+0x40>
			chipid = 0;
    15d0:	2200      	movs	r2, #0
    15d2:	4b1b      	ldr	r3, [pc, #108]	; (1640 <nmi_get_chipid+0xa8>)
    15d4:	601a      	str	r2, [r3, #0]
			return 0;
    15d6:	e7e7      	b.n	15a8 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    15d8:	4b19      	ldr	r3, [pc, #100]	; (1640 <nmi_get_chipid+0xa8>)
    15da:	681b      	ldr	r3, [r3, #0]
    15dc:	4a1b      	ldr	r2, [pc, #108]	; (164c <nmi_get_chipid+0xb4>)
    15de:	4293      	cmp	r3, r2
    15e0:	d00e      	beq.n	1600 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    15e2:	4a1b      	ldr	r2, [pc, #108]	; (1650 <nmi_get_chipid+0xb8>)
    15e4:	4293      	cmp	r3, r2
    15e6:	d012      	beq.n	160e <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    15e8:	4a1a      	ldr	r2, [pc, #104]	; (1654 <nmi_get_chipid+0xbc>)
    15ea:	4293      	cmp	r3, r2
    15ec:	d01c      	beq.n	1628 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    15ee:	4914      	ldr	r1, [pc, #80]	; (1640 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    15f0:	4a19      	ldr	r2, [pc, #100]	; (1658 <nmi_get_chipid+0xc0>)
    15f2:	680b      	ldr	r3, [r1, #0]
    15f4:	401a      	ands	r2, r3
		chipid |= 0x050000;
    15f6:	23a0      	movs	r3, #160	; 0xa0
    15f8:	02db      	lsls	r3, r3, #11
    15fa:	4313      	orrs	r3, r2
    15fc:	600b      	str	r3, [r1, #0]
    15fe:	e7d1      	b.n	15a4 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1600:	9b01      	ldr	r3, [sp, #4]
    1602:	2b01      	cmp	r3, #1
    1604:	d0f3      	beq.n	15ee <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    1606:	4a15      	ldr	r2, [pc, #84]	; (165c <nmi_get_chipid+0xc4>)
    1608:	4b0d      	ldr	r3, [pc, #52]	; (1640 <nmi_get_chipid+0xa8>)
    160a:	601a      	str	r2, [r3, #0]
    160c:	e7ef      	b.n	15ee <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    160e:	9b01      	ldr	r3, [sp, #4]
    1610:	2b03      	cmp	r3, #3
    1612:	d0ec      	beq.n	15ee <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    1614:	2b04      	cmp	r3, #4
    1616:	d003      	beq.n	1620 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    1618:	4a11      	ldr	r2, [pc, #68]	; (1660 <nmi_get_chipid+0xc8>)
    161a:	4b09      	ldr	r3, [pc, #36]	; (1640 <nmi_get_chipid+0xa8>)
    161c:	601a      	str	r2, [r3, #0]
    161e:	e7e6      	b.n	15ee <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    1620:	4a10      	ldr	r2, [pc, #64]	; (1664 <nmi_get_chipid+0xcc>)
    1622:	4b07      	ldr	r3, [pc, #28]	; (1640 <nmi_get_chipid+0xa8>)
    1624:	601a      	str	r2, [r3, #0]
    1626:	e7e2      	b.n	15ee <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    1628:	4905      	ldr	r1, [pc, #20]	; (1640 <nmi_get_chipid+0xa8>)
    162a:	20ec      	movs	r0, #236	; 0xec
    162c:	0380      	lsls	r0, r0, #14
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <nmi_get_chipid+0xac>)
    1630:	4798      	blx	r3
    1632:	2800      	cmp	r0, #0
    1634:	d0db      	beq.n	15ee <nmi_get_chipid+0x56>
			chipid = 0;
    1636:	2200      	movs	r2, #0
    1638:	4b01      	ldr	r3, [pc, #4]	; (1640 <nmi_get_chipid+0xa8>)
    163a:	601a      	str	r2, [r3, #0]
			return 0;
    163c:	e7b4      	b.n	15a8 <nmi_get_chipid+0x10>
    163e:	46c0      	nop			; (mov r8, r8)
    1640:	200000a8 	.word	0x200000a8
    1644:	000019e9 	.word	0x000019e9
    1648:	000013f4 	.word	0x000013f4
    164c:	001002a0 	.word	0x001002a0
    1650:	001002b0 	.word	0x001002b0
    1654:	001000f0 	.word	0x001000f0
    1658:	fff0ffff 	.word	0xfff0ffff
    165c:	001002a1 	.word	0x001002a1
    1660:	001002b2 	.word	0x001002b2
    1664:	001002b1 	.word	0x001002b1

00001668 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    1668:	b530      	push	{r4, r5, lr}
    166a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    166c:	4c16      	ldr	r4, [pc, #88]	; (16c8 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    166e:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1670:	a901      	add	r1, sp, #4
    1672:	2010      	movs	r0, #16
    1674:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    1676:	2800      	cmp	r0, #0
    1678:	d11c      	bne.n	16b4 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    167a:	9b01      	ldr	r3, [sp, #4]
    167c:	422b      	tst	r3, r5
    167e:	d1f7      	bne.n	1670 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1680:	a901      	add	r1, sp, #4
    1682:	3001      	adds	r0, #1
    1684:	4b10      	ldr	r3, [pc, #64]	; (16c8 <chip_sleep+0x60>)
    1686:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    1688:	2800      	cmp	r0, #0
    168a:	d113      	bne.n	16b4 <chip_sleep+0x4c>
	if(reg & NBIT1)
    168c:	9901      	ldr	r1, [sp, #4]
    168e:	078b      	lsls	r3, r1, #30
    1690:	d507      	bpl.n	16a2 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    1692:	2302      	movs	r3, #2
    1694:	4399      	bics	r1, r3
    1696:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    1698:	3001      	adds	r0, #1
    169a:	4b0c      	ldr	r3, [pc, #48]	; (16cc <chip_sleep+0x64>)
    169c:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    169e:	2800      	cmp	r0, #0
    16a0:	d108      	bne.n	16b4 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    16a2:	a901      	add	r1, sp, #4
    16a4:	200b      	movs	r0, #11
    16a6:	4b08      	ldr	r3, [pc, #32]	; (16c8 <chip_sleep+0x60>)
    16a8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    16aa:	2800      	cmp	r0, #0
    16ac:	d102      	bne.n	16b4 <chip_sleep+0x4c>
	if(reg & NBIT0)
    16ae:	9901      	ldr	r1, [sp, #4]
    16b0:	07cb      	lsls	r3, r1, #31
    16b2:	d401      	bmi.n	16b8 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    16b4:	b003      	add	sp, #12
    16b6:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    16b8:	2301      	movs	r3, #1
    16ba:	4399      	bics	r1, r3
    16bc:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    16be:	300b      	adds	r0, #11
    16c0:	4b02      	ldr	r3, [pc, #8]	; (16cc <chip_sleep+0x64>)
    16c2:	4798      	blx	r3
    16c4:	e7f6      	b.n	16b4 <chip_sleep+0x4c>
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	000019e9 	.word	0x000019e9
    16cc:	000019f5 	.word	0x000019f5

000016d0 <chip_wake>:
sint8 chip_wake(void)
{
    16d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d2:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    16d4:	2300      	movs	r3, #0
    16d6:	9301      	str	r3, [sp, #4]
    16d8:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    16da:	a901      	add	r1, sp, #4
    16dc:	200b      	movs	r0, #11
    16de:	4b28      	ldr	r3, [pc, #160]	; (1780 <chip_wake+0xb0>)
    16e0:	4798      	blx	r3
    16e2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    16e4:	d130      	bne.n	1748 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    16e6:	9901      	ldr	r1, [sp, #4]
    16e8:	07cb      	lsls	r3, r1, #31
    16ea:	d406      	bmi.n	16fa <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    16ec:	2301      	movs	r3, #1
    16ee:	4319      	orrs	r1, r3
    16f0:	200b      	movs	r0, #11
    16f2:	4b24      	ldr	r3, [pc, #144]	; (1784 <chip_wake+0xb4>)
    16f4:	4798      	blx	r3
    16f6:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    16f8:	d126      	bne.n	1748 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    16fa:	a901      	add	r1, sp, #4
    16fc:	2001      	movs	r0, #1
    16fe:	4b20      	ldr	r3, [pc, #128]	; (1780 <chip_wake+0xb0>)
    1700:	4798      	blx	r3
    1702:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1704:	d120      	bne.n	1748 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    1706:	9901      	ldr	r1, [sp, #4]
    1708:	078b      	lsls	r3, r1, #30
    170a:	d520      	bpl.n	174e <chip_wake+0x7e>
{
    170c:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    170e:	4f1c      	ldr	r7, [pc, #112]	; (1780 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    1710:	4e1d      	ldr	r6, [pc, #116]	; (1788 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    1712:	4669      	mov	r1, sp
    1714:	200f      	movs	r0, #15
    1716:	47b8      	blx	r7
    1718:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    171a:	d120      	bne.n	175e <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    171c:	9b00      	ldr	r3, [sp, #0]
    171e:	075b      	lsls	r3, r3, #29
    1720:	d42b      	bmi.n	177a <chip_wake+0xaa>
		nm_bsp_sleep(2);
    1722:	2002      	movs	r0, #2
    1724:	47b0      	blx	r6
    1726:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    1728:	2d00      	cmp	r5, #0
    172a:	d1f2      	bne.n	1712 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    172c:	22af      	movs	r2, #175	; 0xaf
    172e:	0052      	lsls	r2, r2, #1
    1730:	4916      	ldr	r1, [pc, #88]	; (178c <chip_wake+0xbc>)
    1732:	4817      	ldr	r0, [pc, #92]	; (1790 <chip_wake+0xc0>)
    1734:	4b17      	ldr	r3, [pc, #92]	; (1794 <chip_wake+0xc4>)
    1736:	4798      	blx	r3
    1738:	4817      	ldr	r0, [pc, #92]	; (1798 <chip_wake+0xc8>)
    173a:	4b18      	ldr	r3, [pc, #96]	; (179c <chip_wake+0xcc>)
    173c:	4798      	blx	r3
    173e:	200d      	movs	r0, #13
    1740:	4b17      	ldr	r3, [pc, #92]	; (17a0 <chip_wake+0xd0>)
    1742:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    1744:	2404      	movs	r4, #4
    1746:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    1748:	0020      	movs	r0, r4
    174a:	b003      	add	sp, #12
    174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    174e:	2302      	movs	r3, #2
    1750:	4319      	orrs	r1, r3
    1752:	2001      	movs	r0, #1
    1754:	4b0b      	ldr	r3, [pc, #44]	; (1784 <chip_wake+0xb4>)
    1756:	4798      	blx	r3
    1758:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    175a:	d0d7      	beq.n	170c <chip_wake+0x3c>
    175c:	e7f4      	b.n	1748 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    175e:	22aa      	movs	r2, #170	; 0xaa
    1760:	0052      	lsls	r2, r2, #1
    1762:	490a      	ldr	r1, [pc, #40]	; (178c <chip_wake+0xbc>)
    1764:	480a      	ldr	r0, [pc, #40]	; (1790 <chip_wake+0xc0>)
    1766:	4d0b      	ldr	r5, [pc, #44]	; (1794 <chip_wake+0xc4>)
    1768:	47a8      	blx	r5
    176a:	9a00      	ldr	r2, [sp, #0]
    176c:	0021      	movs	r1, r4
    176e:	480d      	ldr	r0, [pc, #52]	; (17a4 <chip_wake+0xd4>)
    1770:	47a8      	blx	r5
    1772:	200d      	movs	r0, #13
    1774:	4b0a      	ldr	r3, [pc, #40]	; (17a0 <chip_wake+0xd0>)
    1776:	4798      	blx	r3
			goto _WAKE_EXIT;
    1778:	e7e6      	b.n	1748 <chip_wake+0x78>
	nm_bus_reset();
    177a:	4b0b      	ldr	r3, [pc, #44]	; (17a8 <chip_wake+0xd8>)
    177c:	4798      	blx	r3
    177e:	e7e3      	b.n	1748 <chip_wake+0x78>
    1780:	000019e9 	.word	0x000019e9
    1784:	000019f5 	.word	0x000019f5
    1788:	00000195 	.word	0x00000195
    178c:	0000a290 	.word	0x0000a290
    1790:	00009d50 	.word	0x00009d50
    1794:	000089a5 	.word	0x000089a5
    1798:	0000a2d8 	.word	0x0000a2d8
    179c:	00008ac1 	.word	0x00008ac1
    17a0:	000089d9 	.word	0x000089d9
    17a4:	0000a2c0 	.word	0x0000a2c0
    17a8:	000019d1 	.word	0x000019d1

000017ac <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    17ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ae:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17b0:	4d2d      	ldr	r5, [pc, #180]	; (1868 <wait_for_bootrom+0xbc>)
    17b2:	4c2e      	ldr	r4, [pc, #184]	; (186c <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    17b4:	4e2e      	ldr	r6, [pc, #184]	; (1870 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17b6:	0028      	movs	r0, r5
    17b8:	47a0      	blx	r4
		if (reg & 0x80000000) {
    17ba:	2800      	cmp	r0, #0
    17bc:	db02      	blt.n	17c4 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    17be:	2001      	movs	r0, #1
    17c0:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    17c2:	e7f8      	b.n	17b6 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    17c4:	482b      	ldr	r0, [pc, #172]	; (1874 <wait_for_bootrom+0xc8>)
    17c6:	4b29      	ldr	r3, [pc, #164]	; (186c <wait_for_bootrom+0xc0>)
    17c8:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    17ca:	07c3      	lsls	r3, r0, #31
    17cc:	d409      	bmi.n	17e2 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    17ce:	4e28      	ldr	r6, [pc, #160]	; (1870 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    17d0:	4c29      	ldr	r4, [pc, #164]	; (1878 <wait_for_bootrom+0xcc>)
    17d2:	4d26      	ldr	r5, [pc, #152]	; (186c <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    17d4:	2001      	movs	r0, #1
    17d6:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    17d8:	0020      	movs	r0, r4
    17da:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    17dc:	4b27      	ldr	r3, [pc, #156]	; (187c <wait_for_bootrom+0xd0>)
    17de:	4298      	cmp	r0, r3
    17e0:	d1f8      	bne.n	17d4 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    17e2:	2f02      	cmp	r7, #2
    17e4:	d021      	beq.n	182a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    17e6:	2f03      	cmp	r7, #3
    17e8:	d029      	beq.n	183e <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    17ea:	2f04      	cmp	r7, #4
    17ec:	d030      	beq.n	1850 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    17ee:	4924      	ldr	r1, [pc, #144]	; (1880 <wait_for_bootrom+0xd4>)
    17f0:	4824      	ldr	r0, [pc, #144]	; (1884 <wait_for_bootrom+0xd8>)
    17f2:	4b25      	ldr	r3, [pc, #148]	; (1888 <wait_for_bootrom+0xdc>)
    17f4:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    17f6:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    17f8:	4b24      	ldr	r3, [pc, #144]	; (188c <wait_for_bootrom+0xe0>)
    17fa:	4798      	blx	r3
    17fc:	0500      	lsls	r0, r0, #20
    17fe:	0d00      	lsrs	r0, r0, #20
    1800:	4b23      	ldr	r3, [pc, #140]	; (1890 <wait_for_bootrom+0xe4>)
    1802:	4298      	cmp	r0, r3
    1804:	d82a      	bhi.n	185c <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    1806:	0020      	movs	r0, r4
    1808:	4b22      	ldr	r3, [pc, #136]	; (1894 <wait_for_bootrom+0xe8>)
    180a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    180c:	4822      	ldr	r0, [pc, #136]	; (1898 <wait_for_bootrom+0xec>)
    180e:	4c23      	ldr	r4, [pc, #140]	; (189c <wait_for_bootrom+0xf0>)
    1810:	47a0      	blx	r4
    1812:	491b      	ldr	r1, [pc, #108]	; (1880 <wait_for_bootrom+0xd4>)
    1814:	4822      	ldr	r0, [pc, #136]	; (18a0 <wait_for_bootrom+0xf4>)
    1816:	47a0      	blx	r4
    1818:	200d      	movs	r0, #13
    181a:	4b22      	ldr	r3, [pc, #136]	; (18a4 <wait_for_bootrom+0xf8>)
    181c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    181e:	4922      	ldr	r1, [pc, #136]	; (18a8 <wait_for_bootrom+0xfc>)
    1820:	4815      	ldr	r0, [pc, #84]	; (1878 <wait_for_bootrom+0xcc>)
    1822:	4b19      	ldr	r3, [pc, #100]	; (1888 <wait_for_bootrom+0xdc>)
    1824:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    1826:	2000      	movs	r0, #0
    1828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    182a:	4920      	ldr	r1, [pc, #128]	; (18ac <wait_for_bootrom+0x100>)
    182c:	4820      	ldr	r0, [pc, #128]	; (18b0 <wait_for_bootrom+0x104>)
    182e:	4c16      	ldr	r4, [pc, #88]	; (1888 <wait_for_bootrom+0xdc>)
    1830:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    1832:	2180      	movs	r1, #128	; 0x80
    1834:	0349      	lsls	r1, r1, #13
    1836:	4813      	ldr	r0, [pc, #76]	; (1884 <wait_for_bootrom+0xd8>)
    1838:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    183a:	2400      	movs	r4, #0
    183c:	e7dc      	b.n	17f8 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    183e:	491b      	ldr	r1, [pc, #108]	; (18ac <wait_for_bootrom+0x100>)
    1840:	481b      	ldr	r0, [pc, #108]	; (18b0 <wait_for_bootrom+0x104>)
    1842:	4c11      	ldr	r4, [pc, #68]	; (1888 <wait_for_bootrom+0xdc>)
    1844:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    1846:	2100      	movs	r1, #0
    1848:	480e      	ldr	r0, [pc, #56]	; (1884 <wait_for_bootrom+0xd8>)
    184a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    184c:	2400      	movs	r4, #0
    184e:	e7d3      	b.n	17f8 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1850:	490b      	ldr	r1, [pc, #44]	; (1880 <wait_for_bootrom+0xd4>)
    1852:	480c      	ldr	r0, [pc, #48]	; (1884 <wait_for_bootrom+0xd8>)
    1854:	4b0c      	ldr	r3, [pc, #48]	; (1888 <wait_for_bootrom+0xdc>)
    1856:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    1858:	2480      	movs	r4, #128	; 0x80
    185a:	e7cd      	b.n	17f8 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    185c:	2002      	movs	r0, #2
    185e:	4320      	orrs	r0, r4
    1860:	4b0c      	ldr	r3, [pc, #48]	; (1894 <wait_for_bootrom+0xe8>)
    1862:	4798      	blx	r3
    1864:	e7d2      	b.n	180c <wait_for_bootrom+0x60>
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	00001014 	.word	0x00001014
    186c:	000019dd 	.word	0x000019dd
    1870:	00000195 	.word	0x00000195
    1874:	000207bc 	.word	0x000207bc
    1878:	000c000c 	.word	0x000c000c
    187c:	10add09e 	.word	0x10add09e
    1880:	13521352 	.word	0x13521352
    1884:	0000108c 	.word	0x0000108c
    1888:	000019f5 	.word	0x000019f5
    188c:	00001599 	.word	0x00001599
    1890:	0000039f 	.word	0x0000039f
    1894:	00001505 	.word	0x00001505
    1898:	0000a080 	.word	0x0000a080
    189c:	000089a5 	.word	0x000089a5
    18a0:	0000a2f4 	.word	0x0000a2f4
    18a4:	000089d9 	.word	0x000089d9
    18a8:	ef522f61 	.word	0xef522f61
    18ac:	3c1cd57d 	.word	0x3c1cd57d
    18b0:	000207ac 	.word	0x000207ac

000018b4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    18b8:	4b15      	ldr	r3, [pc, #84]	; (1910 <wait_for_firmware_start+0x5c>)
    18ba:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    18bc:	4b15      	ldr	r3, [pc, #84]	; (1914 <wait_for_firmware_start+0x60>)
    18be:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    18c0:	3802      	subs	r0, #2
    18c2:	2801      	cmp	r0, #1
    18c4:	d911      	bls.n	18ea <wait_for_firmware_start+0x36>
{
    18c6:	2401      	movs	r4, #1
    18c8:	4264      	negs	r4, r4
    18ca:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    18cc:	4e12      	ldr	r6, [pc, #72]	; (1918 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    18ce:	4d13      	ldr	r5, [pc, #76]	; (191c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    18d0:	9b00      	ldr	r3, [sp, #0]
    18d2:	4298      	cmp	r0, r3
    18d4:	d00e      	beq.n	18f4 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    18d6:	2002      	movs	r0, #2
    18d8:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    18da:	9801      	ldr	r0, [sp, #4]
    18dc:	47a8      	blx	r5
    18de:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    18e0:	2c00      	cmp	r4, #0
    18e2:	d1f5      	bne.n	18d0 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    18e4:	2005      	movs	r0, #5
    18e6:	4240      	negs	r0, r0
    18e8:	e009      	b.n	18fe <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    18ea:	4b0d      	ldr	r3, [pc, #52]	; (1920 <wait_for_firmware_start+0x6c>)
    18ec:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    18ee:	4b0d      	ldr	r3, [pc, #52]	; (1924 <wait_for_firmware_start+0x70>)
    18f0:	9300      	str	r3, [sp, #0]
    18f2:	e7e8      	b.n	18c6 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    18f4:	9a00      	ldr	r2, [sp, #0]
    18f6:	4b07      	ldr	r3, [pc, #28]	; (1914 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    18f8:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    18fa:	429a      	cmp	r2, r3
    18fc:	d001      	beq.n	1902 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    18fe:	b002      	add	sp, #8
    1900:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1902:	2100      	movs	r1, #0
    1904:	4802      	ldr	r0, [pc, #8]	; (1910 <wait_for_firmware_start+0x5c>)
    1906:	4b08      	ldr	r3, [pc, #32]	; (1928 <wait_for_firmware_start+0x74>)
    1908:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    190a:	2000      	movs	r0, #0
    190c:	e7f7      	b.n	18fe <wait_for_firmware_start+0x4a>
    190e:	46c0      	nop			; (mov r8, r8)
    1910:	0000108c 	.word	0x0000108c
    1914:	02532636 	.word	0x02532636
    1918:	00000195 	.word	0x00000195
    191c:	000019dd 	.word	0x000019dd
    1920:	000207ac 	.word	0x000207ac
    1924:	d75dc1c3 	.word	0xd75dc1c3
    1928:	000019f5 	.word	0x000019f5

0000192c <chip_deinit>:

sint8 chip_deinit(void)
{
    192c:	b510      	push	{r4, lr}
    192e:	b082      	sub	sp, #8
	uint32 reg = 0;
    1930:	2300      	movs	r3, #0
    1932:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1934:	a901      	add	r1, sp, #4
    1936:	20a0      	movs	r0, #160	; 0xa0
    1938:	0140      	lsls	r0, r0, #5
    193a:	4b14      	ldr	r3, [pc, #80]	; (198c <chip_deinit+0x60>)
    193c:	4798      	blx	r3
    193e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1940:	d115      	bne.n	196e <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    1942:	4913      	ldr	r1, [pc, #76]	; (1990 <chip_deinit+0x64>)
    1944:	9b01      	ldr	r3, [sp, #4]
    1946:	4019      	ands	r1, r3
    1948:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    194a:	20a0      	movs	r0, #160	; 0xa0
    194c:	0140      	lsls	r0, r0, #5
    194e:	4b11      	ldr	r3, [pc, #68]	; (1994 <chip_deinit+0x68>)
    1950:	4798      	blx	r3
    1952:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1954:	d016      	beq.n	1984 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    1956:	4a10      	ldr	r2, [pc, #64]	; (1998 <chip_deinit+0x6c>)
    1958:	4910      	ldr	r1, [pc, #64]	; (199c <chip_deinit+0x70>)
    195a:	4811      	ldr	r0, [pc, #68]	; (19a0 <chip_deinit+0x74>)
    195c:	4b11      	ldr	r3, [pc, #68]	; (19a4 <chip_deinit+0x78>)
    195e:	4798      	blx	r3
    1960:	4811      	ldr	r0, [pc, #68]	; (19a8 <chip_deinit+0x7c>)
    1962:	4b12      	ldr	r3, [pc, #72]	; (19ac <chip_deinit+0x80>)
    1964:	4798      	blx	r3
    1966:	200d      	movs	r0, #13
    1968:	4b11      	ldr	r3, [pc, #68]	; (19b0 <chip_deinit+0x84>)
    196a:	4798      	blx	r3
		goto ERR1;
    196c:	e00a      	b.n	1984 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    196e:	4a11      	ldr	r2, [pc, #68]	; (19b4 <chip_deinit+0x88>)
    1970:	490a      	ldr	r1, [pc, #40]	; (199c <chip_deinit+0x70>)
    1972:	480b      	ldr	r0, [pc, #44]	; (19a0 <chip_deinit+0x74>)
    1974:	4b0b      	ldr	r3, [pc, #44]	; (19a4 <chip_deinit+0x78>)
    1976:	4798      	blx	r3
    1978:	480b      	ldr	r0, [pc, #44]	; (19a8 <chip_deinit+0x7c>)
    197a:	4b0c      	ldr	r3, [pc, #48]	; (19ac <chip_deinit+0x80>)
    197c:	4798      	blx	r3
    197e:	200d      	movs	r0, #13
    1980:	4b0b      	ldr	r3, [pc, #44]	; (19b0 <chip_deinit+0x84>)
    1982:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    1984:	0020      	movs	r0, r4
    1986:	b002      	add	sp, #8
    1988:	bd10      	pop	{r4, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	000019e9 	.word	0x000019e9
    1990:	fffffbff 	.word	0xfffffbff
    1994:	000019f5 	.word	0x000019f5
    1998:	0000020b 	.word	0x0000020b
    199c:	0000a29c 	.word	0x0000a29c
    19a0:	00009d50 	.word	0x00009d50
    19a4:	000089a5 	.word	0x000089a5
    19a8:	0000a2a8 	.word	0x0000a2a8
    19ac:	00008ac1 	.word	0x00008ac1
    19b0:	000089d9 	.word	0x000089d9
    19b4:	00000205 	.word	0x00000205

000019b8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    19b8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    19ba:	4b01      	ldr	r3, [pc, #4]	; (19c0 <nm_bus_iface_init+0x8>)
    19bc:	4798      	blx	r3
	return ret;
}
    19be:	bd10      	pop	{r4, pc}
    19c0:	000002d1 	.word	0x000002d1

000019c4 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    19c4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    19c6:	4b01      	ldr	r3, [pc, #4]	; (19cc <nm_bus_iface_deinit+0x8>)
    19c8:	4798      	blx	r3

	return ret;
}
    19ca:	bd10      	pop	{r4, pc}
    19cc:	00000521 	.word	0x00000521

000019d0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    19d0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    19d2:	4b01      	ldr	r3, [pc, #4]	; (19d8 <nm_bus_reset+0x8>)
    19d4:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    19d6:	bd10      	pop	{r4, pc}
    19d8:	00002381 	.word	0x00002381

000019dc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    19dc:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    19de:	4b01      	ldr	r3, [pc, #4]	; (19e4 <nm_read_reg+0x8>)
    19e0:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    19e2:	bd10      	pop	{r4, pc}
    19e4:	000023b9 	.word	0x000023b9

000019e8 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    19e8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    19ea:	4b01      	ldr	r3, [pc, #4]	; (19f0 <nm_read_reg_with_ret+0x8>)
    19ec:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    19ee:	bd10      	pop	{r4, pc}
    19f0:	000023cd 	.word	0x000023cd

000019f4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    19f4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    19f6:	4b01      	ldr	r3, [pc, #4]	; (19fc <nm_write_reg+0x8>)
    19f8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    19fa:	bd10      	pop	{r4, pc}
    19fc:	000023e5 	.word	0x000023e5

00001a00 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	46d6      	mov	lr, sl
    1a04:	464f      	mov	r7, r9
    1a06:	4646      	mov	r6, r8
    1a08:	b5c0      	push	{r6, r7, lr}
    1a0a:	b082      	sub	sp, #8
    1a0c:	4680      	mov	r8, r0
    1a0e:	4689      	mov	r9, r1
    1a10:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a12:	4b13      	ldr	r3, [pc, #76]	; (1a60 <nm_read_block+0x60>)
    1a14:	881f      	ldrh	r7, [r3, #0]
    1a16:	3f08      	subs	r7, #8
    1a18:	b2bb      	uxth	r3, r7
    1a1a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a1c:	001e      	movs	r6, r3
    1a1e:	0004      	movs	r4, r0
    1a20:	429a      	cmp	r2, r3
    1a22:	d91a      	bls.n	1a5a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a24:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <nm_read_block+0x64>)
    1a26:	469a      	mov	sl, r3
    1a28:	1a37      	subs	r7, r6, r0
    1a2a:	4643      	mov	r3, r8
    1a2c:	1ae1      	subs	r1, r4, r3
    1a2e:	4449      	add	r1, r9
    1a30:	9a01      	ldr	r2, [sp, #4]
    1a32:	0020      	movs	r0, r4
    1a34:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a36:	2800      	cmp	r0, #0
    1a38:	d109      	bne.n	1a4e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1a3a:	1bad      	subs	r5, r5, r6
    1a3c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1a3e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1a40:	42b5      	cmp	r5, r6
    1a42:	d8f2      	bhi.n	1a2a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a44:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1a46:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1a48:	0020      	movs	r0, r4
    1a4a:	4b06      	ldr	r3, [pc, #24]	; (1a64 <nm_read_block+0x64>)
    1a4c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a4e:	b002      	add	sp, #8
    1a50:	bc1c      	pop	{r2, r3, r4}
    1a52:	4690      	mov	r8, r2
    1a54:	4699      	mov	r9, r3
    1a56:	46a2      	mov	sl, r4
    1a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a5a:	2100      	movs	r1, #0
    1a5c:	e7f2      	b.n	1a44 <nm_read_block+0x44>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	20000008 	.word	0x20000008
    1a64:	00002529 	.word	0x00002529

00001a68 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a6a:	46d6      	mov	lr, sl
    1a6c:	464f      	mov	r7, r9
    1a6e:	4646      	mov	r6, r8
    1a70:	b5c0      	push	{r6, r7, lr}
    1a72:	b082      	sub	sp, #8
    1a74:	4680      	mov	r8, r0
    1a76:	4689      	mov	r9, r1
    1a78:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1a7a:	4b13      	ldr	r3, [pc, #76]	; (1ac8 <nm_write_block+0x60>)
    1a7c:	881f      	ldrh	r7, [r3, #0]
    1a7e:	3f08      	subs	r7, #8
    1a80:	b2bb      	uxth	r3, r7
    1a82:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a84:	001e      	movs	r6, r3
    1a86:	0004      	movs	r4, r0
    1a88:	429a      	cmp	r2, r3
    1a8a:	d91a      	bls.n	1ac2 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a8c:	4b0f      	ldr	r3, [pc, #60]	; (1acc <nm_write_block+0x64>)
    1a8e:	469a      	mov	sl, r3
    1a90:	1a37      	subs	r7, r6, r0
    1a92:	4643      	mov	r3, r8
    1a94:	1ae1      	subs	r1, r4, r3
    1a96:	4449      	add	r1, r9
    1a98:	9a01      	ldr	r2, [sp, #4]
    1a9a:	0020      	movs	r0, r4
    1a9c:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d109      	bne.n	1ab6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    1aa2:	1bad      	subs	r5, r5, r6
    1aa4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    1aa6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1aa8:	42b5      	cmp	r5, r6
    1aaa:	d8f2      	bhi.n	1a92 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1aac:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1aae:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1ab0:	0020      	movs	r0, r4
    1ab2:	4b06      	ldr	r3, [pc, #24]	; (1acc <nm_write_block+0x64>)
    1ab4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1ab6:	b002      	add	sp, #8
    1ab8:	bc1c      	pop	{r2, r3, r4}
    1aba:	4690      	mov	r8, r2
    1abc:	4699      	mov	r9, r3
    1abe:	46a2      	mov	sl, r4
    1ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1ac2:	2100      	movs	r1, #0
    1ac4:	e7f2      	b.n	1aac <nm_write_block+0x44>
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	20000008 	.word	0x20000008
    1acc:	00002685 	.word	0x00002685

00001ad0 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1ad0:	b570      	push	{r4, r5, r6, lr}
    1ad2:	b084      	sub	sp, #16
    1ad4:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1ad6:	2300      	movs	r3, #0
    1ad8:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1ada:	2208      	movs	r2, #8
    1adc:	2100      	movs	r1, #0
    1ade:	a801      	add	r0, sp, #4
    1ae0:	4b2d      	ldr	r3, [pc, #180]	; (1b98 <nm_get_firmware_full_info+0xc8>)
    1ae2:	4798      	blx	r3
	if (pstrRev != NULL)
    1ae4:	2c00      	cmp	r4, #0
    1ae6:	d044      	beq.n	1b72 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1ae8:	2228      	movs	r2, #40	; 0x28
    1aea:	2100      	movs	r1, #0
    1aec:	0020      	movs	r0, r4
    1aee:	4b2b      	ldr	r3, [pc, #172]	; (1b9c <nm_get_firmware_full_info+0xcc>)
    1af0:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1af2:	a903      	add	r1, sp, #12
    1af4:	482a      	ldr	r0, [pc, #168]	; (1ba0 <nm_get_firmware_full_info+0xd0>)
    1af6:	4b2b      	ldr	r3, [pc, #172]	; (1ba4 <nm_get_firmware_full_info+0xd4>)
    1af8:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1afa:	2800      	cmp	r0, #0
    1afc:	d13a      	bne.n	1b74 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    1afe:	9b03      	ldr	r3, [sp, #12]
    1b00:	2b00      	cmp	r3, #0
    1b02:	d039      	beq.n	1b78 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1b04:	20c0      	movs	r0, #192	; 0xc0
    1b06:	0280      	lsls	r0, r0, #10
    1b08:	4318      	orrs	r0, r3
    1b0a:	2208      	movs	r2, #8
    1b0c:	a901      	add	r1, sp, #4
    1b0e:	4b26      	ldr	r3, [pc, #152]	; (1ba8 <nm_get_firmware_full_info+0xd8>)
    1b10:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1b12:	2800      	cmp	r0, #0
    1b14:	d12e      	bne.n	1b74 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1b16:	9b02      	ldr	r3, [sp, #8]
    1b18:	0418      	lsls	r0, r3, #16
    1b1a:	0c00      	lsrs	r0, r0, #16
    1b1c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1b1e:	d02e      	beq.n	1b7e <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1b20:	23c0      	movs	r3, #192	; 0xc0
    1b22:	029b      	lsls	r3, r3, #10
    1b24:	4318      	orrs	r0, r3
    1b26:	2228      	movs	r2, #40	; 0x28
    1b28:	0021      	movs	r1, r4
    1b2a:	4b1f      	ldr	r3, [pc, #124]	; (1ba8 <nm_get_firmware_full_info+0xd8>)
    1b2c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1b2e:	2800      	cmp	r0, #0
    1b30:	d120      	bne.n	1b74 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1b32:	7921      	ldrb	r1, [r4, #4]
    1b34:	0209      	lsls	r1, r1, #8
    1b36:	79a2      	ldrb	r2, [r4, #6]
    1b38:	230f      	movs	r3, #15
    1b3a:	401a      	ands	r2, r3
    1b3c:	430a      	orrs	r2, r1
    1b3e:	7961      	ldrb	r1, [r4, #5]
    1b40:	0109      	lsls	r1, r1, #4
    1b42:	25ff      	movs	r5, #255	; 0xff
    1b44:	4029      	ands	r1, r5
    1b46:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1b48:	79e1      	ldrb	r1, [r4, #7]
    1b4a:	0209      	lsls	r1, r1, #8
    1b4c:	7a66      	ldrb	r6, [r4, #9]
    1b4e:	4033      	ands	r3, r6
    1b50:	430b      	orrs	r3, r1
    1b52:	7a21      	ldrb	r1, [r4, #8]
    1b54:	0109      	lsls	r1, r1, #4
    1b56:	400d      	ands	r5, r1
    1b58:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1b5a:	2a00      	cmp	r2, #0
    1b5c:	d012      	beq.n	1b84 <nm_get_firmware_full_info+0xb4>
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d013      	beq.n	1b8a <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1b62:	4912      	ldr	r1, [pc, #72]	; (1bac <nm_get_firmware_full_info+0xdc>)
    1b64:	428b      	cmp	r3, r1
    1b66:	d813      	bhi.n	1b90 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1b68:	4b11      	ldr	r3, [pc, #68]	; (1bb0 <nm_get_firmware_full_info+0xe0>)
    1b6a:	429a      	cmp	r2, r3
    1b6c:	d802      	bhi.n	1b74 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b6e:	380d      	subs	r0, #13
    1b70:	e000      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    1b72:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1b74:	b004      	add	sp, #16
    1b76:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1b78:	200c      	movs	r0, #12
    1b7a:	4240      	negs	r0, r0
    1b7c:	e7fa      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    1b7e:	200c      	movs	r0, #12
    1b80:	4240      	negs	r0, r0
    1b82:	e7f7      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    1b84:	200c      	movs	r0, #12
    1b86:	4240      	negs	r0, r0
    1b88:	e7f4      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
    1b8a:	200c      	movs	r0, #12
    1b8c:	4240      	negs	r0, r0
    1b8e:	e7f1      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1b90:	200d      	movs	r0, #13
    1b92:	4240      	negs	r0, r0
    1b94:	e7ee      	b.n	1b74 <nm_get_firmware_full_info+0xa4>
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00008843 	.word	0x00008843
    1b9c:	000005a1 	.word	0x000005a1
    1ba0:	000c0008 	.word	0x000c0008
    1ba4:	000019e9 	.word	0x000019e9
    1ba8:	00001a01 	.word	0x00001a01
    1bac:	00001352 	.word	0x00001352
    1bb0:	00001351 	.word	0x00001351

00001bb4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1bb4:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    1bb6:	2800      	cmp	r0, #0
    1bb8:	d037      	beq.n	1c2a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    1bba:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1bbc:	1e6b      	subs	r3, r5, #1
    1bbe:	2b03      	cmp	r3, #3
    1bc0:	d900      	bls.n	1bc4 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1bc2:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    1bc4:	2000      	movs	r0, #0
    1bc6:	4b20      	ldr	r3, [pc, #128]	; (1c48 <nm_drv_init+0x94>)
    1bc8:	4798      	blx	r3
    1bca:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bcc:	d12f      	bne.n	1c2e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1bce:	481f      	ldr	r0, [pc, #124]	; (1c4c <nm_drv_init+0x98>)
    1bd0:	4c1f      	ldr	r4, [pc, #124]	; (1c50 <nm_drv_init+0x9c>)
    1bd2:	47a0      	blx	r4
    1bd4:	4b1f      	ldr	r3, [pc, #124]	; (1c54 <nm_drv_init+0xa0>)
    1bd6:	4798      	blx	r3
    1bd8:	0001      	movs	r1, r0
    1bda:	481f      	ldr	r0, [pc, #124]	; (1c58 <nm_drv_init+0xa4>)
    1bdc:	47a0      	blx	r4
    1bde:	200d      	movs	r0, #13
    1be0:	4b1e      	ldr	r3, [pc, #120]	; (1c5c <nm_drv_init+0xa8>)
    1be2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1be4:	4b1e      	ldr	r3, [pc, #120]	; (1c60 <nm_drv_init+0xac>)
    1be6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    1be8:	0028      	movs	r0, r5
    1bea:	4b1e      	ldr	r3, [pc, #120]	; (1c64 <nm_drv_init+0xb0>)
    1bec:	4798      	blx	r3
    1bee:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bf0:	d117      	bne.n	1c22 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1bf2:	0028      	movs	r0, r5
    1bf4:	4b1c      	ldr	r3, [pc, #112]	; (1c68 <nm_drv_init+0xb4>)
    1bf6:	4798      	blx	r3
    1bf8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1bfa:	d112      	bne.n	1c22 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1bfc:	3d02      	subs	r5, #2
    1bfe:	2d01      	cmp	r5, #1
    1c00:	d911      	bls.n	1c26 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1c02:	4b1a      	ldr	r3, [pc, #104]	; (1c6c <nm_drv_init+0xb8>)
    1c04:	4798      	blx	r3
    1c06:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c08:	d00d      	beq.n	1c26 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    1c0a:	2256      	movs	r2, #86	; 0x56
    1c0c:	32ff      	adds	r2, #255	; 0xff
    1c0e:	4918      	ldr	r1, [pc, #96]	; (1c70 <nm_drv_init+0xbc>)
    1c10:	4818      	ldr	r0, [pc, #96]	; (1c74 <nm_drv_init+0xc0>)
    1c12:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <nm_drv_init+0x9c>)
    1c14:	4798      	blx	r3
    1c16:	4818      	ldr	r0, [pc, #96]	; (1c78 <nm_drv_init+0xc4>)
    1c18:	4b18      	ldr	r3, [pc, #96]	; (1c7c <nm_drv_init+0xc8>)
    1c1a:	4798      	blx	r3
    1c1c:	200d      	movs	r0, #13
    1c1e:	4b0f      	ldr	r3, [pc, #60]	; (1c5c <nm_drv_init+0xa8>)
    1c20:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1c22:	4b17      	ldr	r3, [pc, #92]	; (1c80 <nm_drv_init+0xcc>)
    1c24:	4798      	blx	r3
ERR1:
	return ret;
}
    1c26:	0020      	movs	r0, r4
    1c28:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    1c2a:	2501      	movs	r5, #1
    1c2c:	e7ca      	b.n	1bc4 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    1c2e:	2228      	movs	r2, #40	; 0x28
    1c30:	32ff      	adds	r2, #255	; 0xff
    1c32:	490f      	ldr	r1, [pc, #60]	; (1c70 <nm_drv_init+0xbc>)
    1c34:	480f      	ldr	r0, [pc, #60]	; (1c74 <nm_drv_init+0xc0>)
    1c36:	4b06      	ldr	r3, [pc, #24]	; (1c50 <nm_drv_init+0x9c>)
    1c38:	4798      	blx	r3
    1c3a:	4812      	ldr	r0, [pc, #72]	; (1c84 <nm_drv_init+0xd0>)
    1c3c:	4b0f      	ldr	r3, [pc, #60]	; (1c7c <nm_drv_init+0xc8>)
    1c3e:	4798      	blx	r3
    1c40:	200d      	movs	r0, #13
    1c42:	4b06      	ldr	r3, [pc, #24]	; (1c5c <nm_drv_init+0xa8>)
    1c44:	4798      	blx	r3
		goto ERR1;
    1c46:	e7ee      	b.n	1c26 <nm_drv_init+0x72>
    1c48:	000019b9 	.word	0x000019b9
    1c4c:	0000a080 	.word	0x0000a080
    1c50:	000089a5 	.word	0x000089a5
    1c54:	00001599 	.word	0x00001599
    1c58:	0000a3c4 	.word	0x0000a3c4
    1c5c:	000089d9 	.word	0x000089d9
    1c60:	000023fd 	.word	0x000023fd
    1c64:	000017ad 	.word	0x000017ad
    1c68:	000018b5 	.word	0x000018b5
    1c6c:	0000153d 	.word	0x0000153d
    1c70:	0000a30c 	.word	0x0000a30c
    1c74:	00009d50 	.word	0x00009d50
    1c78:	0000a388 	.word	0x0000a388
    1c7c:	00008ac1 	.word	0x00008ac1
    1c80:	000019c5 	.word	0x000019c5
    1c84:	0000a3a8 	.word	0x0000a3a8

00001c88 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c88:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c8a:	4b1c      	ldr	r3, [pc, #112]	; (1cfc <nm_drv_deinit+0x74>)
    1c8c:	4798      	blx	r3
    1c8e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c90:	d10b      	bne.n	1caa <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c92:	2000      	movs	r0, #0
    1c94:	4b1a      	ldr	r3, [pc, #104]	; (1d00 <nm_drv_deinit+0x78>)
    1c96:	4798      	blx	r3
    1c98:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c9a:	d114      	bne.n	1cc6 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c9c:	4b19      	ldr	r3, [pc, #100]	; (1d04 <nm_drv_deinit+0x7c>)
    1c9e:	4798      	blx	r3
    1ca0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ca2:	d11d      	bne.n	1ce0 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1ca4:	4b18      	ldr	r3, [pc, #96]	; (1d08 <nm_drv_deinit+0x80>)
    1ca6:	4798      	blx	r3
    1ca8:	e00b      	b.n	1cc2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1caa:	22b6      	movs	r2, #182	; 0xb6
    1cac:	0052      	lsls	r2, r2, #1
    1cae:	4917      	ldr	r1, [pc, #92]	; (1d0c <nm_drv_deinit+0x84>)
    1cb0:	4817      	ldr	r0, [pc, #92]	; (1d10 <nm_drv_deinit+0x88>)
    1cb2:	4b18      	ldr	r3, [pc, #96]	; (1d14 <nm_drv_deinit+0x8c>)
    1cb4:	4798      	blx	r3
    1cb6:	4818      	ldr	r0, [pc, #96]	; (1d18 <nm_drv_deinit+0x90>)
    1cb8:	4b18      	ldr	r3, [pc, #96]	; (1d1c <nm_drv_deinit+0x94>)
    1cba:	4798      	blx	r3
    1cbc:	200d      	movs	r0, #13
    1cbe:	4b18      	ldr	r3, [pc, #96]	; (1d20 <nm_drv_deinit+0x98>)
    1cc0:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1cc2:	0020      	movs	r0, r4
    1cc4:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1cc6:	2274      	movs	r2, #116	; 0x74
    1cc8:	32ff      	adds	r2, #255	; 0xff
    1cca:	4910      	ldr	r1, [pc, #64]	; (1d0c <nm_drv_deinit+0x84>)
    1ccc:	4810      	ldr	r0, [pc, #64]	; (1d10 <nm_drv_deinit+0x88>)
    1cce:	4b11      	ldr	r3, [pc, #68]	; (1d14 <nm_drv_deinit+0x8c>)
    1cd0:	4798      	blx	r3
    1cd2:	4814      	ldr	r0, [pc, #80]	; (1d24 <nm_drv_deinit+0x9c>)
    1cd4:	4b11      	ldr	r3, [pc, #68]	; (1d1c <nm_drv_deinit+0x94>)
    1cd6:	4798      	blx	r3
    1cd8:	200d      	movs	r0, #13
    1cda:	4b11      	ldr	r3, [pc, #68]	; (1d20 <nm_drv_deinit+0x98>)
    1cdc:	4798      	blx	r3
		goto ERR1;
    1cde:	e7f0      	b.n	1cc2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1ce0:	227a      	movs	r2, #122	; 0x7a
    1ce2:	32ff      	adds	r2, #255	; 0xff
    1ce4:	4909      	ldr	r1, [pc, #36]	; (1d0c <nm_drv_deinit+0x84>)
    1ce6:	480a      	ldr	r0, [pc, #40]	; (1d10 <nm_drv_deinit+0x88>)
    1ce8:	4b0a      	ldr	r3, [pc, #40]	; (1d14 <nm_drv_deinit+0x8c>)
    1cea:	4798      	blx	r3
    1cec:	480e      	ldr	r0, [pc, #56]	; (1d28 <nm_drv_deinit+0xa0>)
    1cee:	4b0b      	ldr	r3, [pc, #44]	; (1d1c <nm_drv_deinit+0x94>)
    1cf0:	4798      	blx	r3
    1cf2:	200d      	movs	r0, #13
    1cf4:	4b0a      	ldr	r3, [pc, #40]	; (1d20 <nm_drv_deinit+0x98>)
    1cf6:	4798      	blx	r3
		goto ERR1;
    1cf8:	e7e3      	b.n	1cc2 <nm_drv_deinit+0x3a>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	0000192d 	.word	0x0000192d
    1d00:	0000321d 	.word	0x0000321d
    1d04:	000019c5 	.word	0x000019c5
    1d08:	000023a9 	.word	0x000023a9
    1d0c:	0000a318 	.word	0x0000a318
    1d10:	00009d50 	.word	0x00009d50
    1d14:	000089a5 	.word	0x000089a5
    1d18:	0000a328 	.word	0x0000a328
    1d1c:	00008ac1 	.word	0x00008ac1
    1d20:	000089d9 	.word	0x000089d9
    1d24:	0000a348 	.word	0x0000a348
    1d28:	0000a36c 	.word	0x0000a36c

00001d2c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1d2c:	b500      	push	{lr}
    1d2e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1d30:	ab01      	add	r3, sp, #4
    1d32:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1d34:	2200      	movs	r2, #0
    1d36:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1d38:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1d3a:	0019      	movs	r1, r3
    1d3c:	2003      	movs	r0, #3
    1d3e:	4b02      	ldr	r3, [pc, #8]	; (1d48 <nmi_spi_write+0x1c>)
    1d40:	4798      	blx	r3
}
    1d42:	b005      	add	sp, #20
    1d44:	bd00      	pop	{pc}
    1d46:	46c0      	nop			; (mov r8, r8)
    1d48:	000003d5 	.word	0x000003d5

00001d4c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1d4c:	b570      	push	{r4, r5, r6, lr}
    1d4e:	b084      	sub	sp, #16
    1d50:	ac08      	add	r4, sp, #32
    1d52:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1d54:	ac01      	add	r4, sp, #4
    1d56:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1d58:	303f      	adds	r0, #63	; 0x3f
    1d5a:	b2c4      	uxtb	r4, r0
    1d5c:	2c0e      	cmp	r4, #14
    1d5e:	d900      	bls.n	1d62 <spi_cmd+0x16>
    1d60:	e084      	b.n	1e6c <spi_cmd+0x120>
    1d62:	00a0      	lsls	r0, r4, #2
    1d64:	4c4f      	ldr	r4, [pc, #316]	; (1ea4 <spi_cmd+0x158>)
    1d66:	5820      	ldr	r0, [r4, r0]
    1d68:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1d6a:	ab01      	add	r3, sp, #4
    1d6c:	0c0a      	lsrs	r2, r1, #16
    1d6e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1d70:	0a0a      	lsrs	r2, r1, #8
    1d72:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1d74:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1d76:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    1d78:	4b4b      	ldr	r3, [pc, #300]	; (1ea8 <spi_cmd+0x15c>)
    1d7a:	781b      	ldrb	r3, [r3, #0]
    1d7c:	2b00      	cmp	r3, #0
    1d7e:	d077      	beq.n	1e70 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1d80:	3901      	subs	r1, #1
    1d82:	b2c9      	uxtb	r1, r1
    1d84:	e083      	b.n	1e8e <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    1d86:	0a0b      	lsrs	r3, r1, #8
    1d88:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1d8a:	2d00      	cmp	r5, #0
    1d8c:	d107      	bne.n	1d9e <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1d8e:	aa01      	add	r2, sp, #4
    1d90:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1d92:	ab01      	add	r3, sp, #4
    1d94:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1d96:	2200      	movs	r2, #0
    1d98:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d9a:	2105      	movs	r1, #5
		break;
    1d9c:	e7ec      	b.n	1d78 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1d9e:	2280      	movs	r2, #128	; 0x80
    1da0:	4252      	negs	r2, r2
    1da2:	4313      	orrs	r3, r2
    1da4:	aa01      	add	r2, sp, #4
    1da6:	7053      	strb	r3, [r2, #1]
    1da8:	e7f3      	b.n	1d92 <spi_cmd+0x46>
		bc[1] = 0x00;
    1daa:	ab01      	add	r3, sp, #4
    1dac:	2200      	movs	r2, #0
    1dae:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1db0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1db2:	70da      	strb	r2, [r3, #3]
		len = 5;
    1db4:	2105      	movs	r1, #5
		break;
    1db6:	e7df      	b.n	1d78 <spi_cmd+0x2c>
		bc[1] = 0x00;
    1db8:	ab01      	add	r3, sp, #4
    1dba:	2200      	movs	r2, #0
    1dbc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1dbe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1dc0:	70da      	strb	r2, [r3, #3]
		len = 5;
    1dc2:	2105      	movs	r1, #5
		break;
    1dc4:	e7d8      	b.n	1d78 <spi_cmd+0x2c>
		bc[1] = 0xff;
    1dc6:	ab01      	add	r3, sp, #4
    1dc8:	22ff      	movs	r2, #255	; 0xff
    1dca:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1dcc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1dce:	70da      	strb	r2, [r3, #3]
		len = 5;
    1dd0:	2105      	movs	r1, #5
		break;
    1dd2:	e7d1      	b.n	1d78 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1dd4:	aa01      	add	r2, sp, #4
    1dd6:	0c08      	lsrs	r0, r1, #16
    1dd8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1dda:	0a08      	lsrs	r0, r1, #8
    1ddc:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1dde:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1de0:	0a19      	lsrs	r1, r3, #8
    1de2:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1de4:	7153      	strb	r3, [r2, #5]
		len = 7;
    1de6:	2107      	movs	r1, #7
		break;
    1de8:	e7c6      	b.n	1d78 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1dea:	aa01      	add	r2, sp, #4
    1dec:	0c08      	lsrs	r0, r1, #16
    1dee:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1df0:	0a08      	lsrs	r0, r1, #8
    1df2:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1df4:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1df6:	0c19      	lsrs	r1, r3, #16
    1df8:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1dfa:	0a19      	lsrs	r1, r3, #8
    1dfc:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1dfe:	7193      	strb	r3, [r2, #6]
		len = 8;
    1e00:	2108      	movs	r1, #8
		break;
    1e02:	e7b9      	b.n	1d78 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1e04:	0a0b      	lsrs	r3, r1, #8
    1e06:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1e08:	2d00      	cmp	r5, #0
    1e0a:	d10c      	bne.n	1e26 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1e0c:	a801      	add	r0, sp, #4
    1e0e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1e10:	ab01      	add	r3, sp, #4
    1e12:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1e14:	0e11      	lsrs	r1, r2, #24
    1e16:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1e18:	0c11      	lsrs	r1, r2, #16
    1e1a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1e1c:	0a11      	lsrs	r1, r2, #8
    1e1e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1e20:	719a      	strb	r2, [r3, #6]
		len = 8;
    1e22:	2108      	movs	r1, #8
		break;
    1e24:	e7a8      	b.n	1d78 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1e26:	2080      	movs	r0, #128	; 0x80
    1e28:	4240      	negs	r0, r0
    1e2a:	4303      	orrs	r3, r0
    1e2c:	a801      	add	r0, sp, #4
    1e2e:	7043      	strb	r3, [r0, #1]
    1e30:	e7ee      	b.n	1e10 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1e32:	ab01      	add	r3, sp, #4
    1e34:	0c08      	lsrs	r0, r1, #16
    1e36:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1e38:	0a08      	lsrs	r0, r1, #8
    1e3a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1e3c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1e3e:	0e11      	lsrs	r1, r2, #24
    1e40:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1e42:	0c11      	lsrs	r1, r2, #16
    1e44:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    1e46:	0a11      	lsrs	r1, r2, #8
    1e48:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    1e4a:	71da      	strb	r2, [r3, #7]
		len = 9;
    1e4c:	2109      	movs	r1, #9
		break;
    1e4e:	e793      	b.n	1d78 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1e50:	2228      	movs	r2, #40	; 0x28
    1e52:	32ff      	adds	r2, #255	; 0xff
    1e54:	4915      	ldr	r1, [pc, #84]	; (1eac <spi_cmd+0x160>)
    1e56:	4816      	ldr	r0, [pc, #88]	; (1eb0 <spi_cmd+0x164>)
    1e58:	4b16      	ldr	r3, [pc, #88]	; (1eb4 <spi_cmd+0x168>)
    1e5a:	4798      	blx	r3
    1e5c:	4816      	ldr	r0, [pc, #88]	; (1eb8 <spi_cmd+0x16c>)
    1e5e:	4b17      	ldr	r3, [pc, #92]	; (1ebc <spi_cmd+0x170>)
    1e60:	4798      	blx	r3
    1e62:	200d      	movs	r0, #13
    1e64:	4b16      	ldr	r3, [pc, #88]	; (1ec0 <spi_cmd+0x174>)
    1e66:	4798      	blx	r3
			result = N_FAIL;
    1e68:	2300      	movs	r3, #0
    1e6a:	e017      	b.n	1e9c <spi_cmd+0x150>
	switch (cmd) {
    1e6c:	2300      	movs	r3, #0
    1e6e:	e015      	b.n	1e9c <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e70:	1e4e      	subs	r6, r1, #1
    1e72:	aa01      	add	r2, sp, #4
    1e74:	1995      	adds	r5, r2, r6
    1e76:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1e78:	4c12      	ldr	r4, [pc, #72]	; (1ec4 <spi_cmd+0x178>)
    1e7a:	005b      	lsls	r3, r3, #1
    1e7c:	7810      	ldrb	r0, [r2, #0]
    1e7e:	4043      	eors	r3, r0
    1e80:	5ce3      	ldrb	r3, [r4, r3]
    1e82:	3201      	adds	r2, #1
	while (len--)
    1e84:	42aa      	cmp	r2, r5
    1e86:	d1f8      	bne.n	1e7a <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1e88:	005b      	lsls	r3, r3, #1
    1e8a:	aa01      	add	r2, sp, #4
    1e8c:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1e8e:	b289      	uxth	r1, r1
    1e90:	a801      	add	r0, sp, #4
    1e92:	4b0d      	ldr	r3, [pc, #52]	; (1ec8 <spi_cmd+0x17c>)
    1e94:	4798      	blx	r3
    1e96:	2301      	movs	r3, #1
    1e98:	2800      	cmp	r0, #0
    1e9a:	d1d9      	bne.n	1e50 <spi_cmd+0x104>
		}
	}

	return result;
}
    1e9c:	0018      	movs	r0, r3
    1e9e:	b004      	add	sp, #16
    1ea0:	bd70      	pop	{r4, r5, r6, pc}
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	0000a3d4 	.word	0x0000a3d4
    1ea8:	200000ac 	.word	0x200000ac
    1eac:	0000a414 	.word	0x0000a414
    1eb0:	00009d50 	.word	0x00009d50
    1eb4:	000089a5 	.word	0x000089a5
    1eb8:	0000a8a4 	.word	0x0000a8a4
    1ebc:	00008ac1 	.word	0x00008ac1
    1ec0:	000089d9 	.word	0x000089d9
    1ec4:	0000a4a0 	.word	0x0000a4a0
    1ec8:	00001d2d 	.word	0x00001d2d

00001ecc <nmi_spi_read>:
{
    1ecc:	b500      	push	{lr}
    1ece:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1ed0:	ab01      	add	r3, sp, #4
    1ed2:	2200      	movs	r2, #0
    1ed4:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1ed6:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1ed8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1eda:	0019      	movs	r1, r3
    1edc:	2003      	movs	r0, #3
    1ede:	4b02      	ldr	r3, [pc, #8]	; (1ee8 <nmi_spi_read+0x1c>)
    1ee0:	4798      	blx	r3
}
    1ee2:	b005      	add	sp, #20
    1ee4:	bd00      	pop	{pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	000003d5 	.word	0x000003d5

00001eec <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eee:	46c6      	mov	lr, r8
    1ef0:	b500      	push	{lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1ef6:	28cf      	cmp	r0, #207	; 0xcf
    1ef8:	d02b      	beq.n	1f52 <spi_cmd_rsp+0x66>
    1efa:	0003      	movs	r3, r0
    1efc:	333b      	adds	r3, #59	; 0x3b
    1efe:	b2db      	uxtb	r3, r3
    1f00:	2b01      	cmp	r3, #1
    1f02:	d926      	bls.n	1f52 <spi_cmd_rsp+0x66>
{
    1f04:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f06:	466b      	mov	r3, sp
    1f08:	1dde      	adds	r6, r3, #7
    1f0a:	4b26      	ldr	r3, [pc, #152]	; (1fa4 <spi_cmd_rsp+0xb8>)
    1f0c:	4698      	mov	r8, r3
    1f0e:	2101      	movs	r1, #1
    1f10:	0030      	movs	r0, r6
    1f12:	47c0      	blx	r8
    1f14:	1e05      	subs	r5, r0, #0
    1f16:	d125      	bne.n	1f64 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1f18:	7833      	ldrb	r3, [r6, #0]
    1f1a:	42bb      	cmp	r3, r7
    1f1c:	d030      	beq.n	1f80 <spi_cmd_rsp+0x94>
    1f1e:	3c01      	subs	r4, #1
    1f20:	b2e4      	uxtb	r4, r4
    1f22:	2c00      	cmp	r4, #0
    1f24:	d1f3      	bne.n	1f0e <spi_cmd_rsp+0x22>
    1f26:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f28:	466b      	mov	r3, sp
    1f2a:	1dde      	adds	r6, r3, #7
    1f2c:	4f1d      	ldr	r7, [pc, #116]	; (1fa4 <spi_cmd_rsp+0xb8>)
    1f2e:	2101      	movs	r1, #1
    1f30:	0030      	movs	r0, r6
    1f32:	47b8      	blx	r7
    1f34:	2800      	cmp	r0, #0
    1f36:	d125      	bne.n	1f84 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1f38:	7833      	ldrb	r3, [r6, #0]
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	d02f      	beq.n	1f9e <spi_cmd_rsp+0xb2>
    1f3e:	3c01      	subs	r4, #1
    1f40:	b2e4      	uxtb	r4, r4
    1f42:	2c00      	cmp	r4, #0
    1f44:	d1f3      	bne.n	1f2e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1f46:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1f48:	0028      	movs	r0, r5
    1f4a:	b002      	add	sp, #8
    1f4c:	bc04      	pop	{r2}
    1f4e:	4690      	mov	r8, r2
    1f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f52:	2101      	movs	r1, #1
    1f54:	466b      	mov	r3, sp
    1f56:	1dd8      	adds	r0, r3, #7
    1f58:	4b12      	ldr	r3, [pc, #72]	; (1fa4 <spi_cmd_rsp+0xb8>)
    1f5a:	4798      	blx	r3
			result = N_FAIL;
    1f5c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f5e:	2800      	cmp	r0, #0
    1f60:	d0d0      	beq.n	1f04 <spi_cmd_rsp+0x18>
    1f62:	e7f1      	b.n	1f48 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f64:	22b1      	movs	r2, #177	; 0xb1
    1f66:	0052      	lsls	r2, r2, #1
    1f68:	490f      	ldr	r1, [pc, #60]	; (1fa8 <spi_cmd_rsp+0xbc>)
    1f6a:	4810      	ldr	r0, [pc, #64]	; (1fac <spi_cmd_rsp+0xc0>)
    1f6c:	4b10      	ldr	r3, [pc, #64]	; (1fb0 <spi_cmd_rsp+0xc4>)
    1f6e:	4798      	blx	r3
    1f70:	4810      	ldr	r0, [pc, #64]	; (1fb4 <spi_cmd_rsp+0xc8>)
    1f72:	4b11      	ldr	r3, [pc, #68]	; (1fb8 <spi_cmd_rsp+0xcc>)
    1f74:	4798      	blx	r3
    1f76:	200d      	movs	r0, #13
    1f78:	4b10      	ldr	r3, [pc, #64]	; (1fbc <spi_cmd_rsp+0xd0>)
    1f7a:	4798      	blx	r3
			result = N_FAIL;
    1f7c:	2500      	movs	r5, #0
			goto _fail_;
    1f7e:	e7e3      	b.n	1f48 <spi_cmd_rsp+0x5c>
    1f80:	240b      	movs	r4, #11
    1f82:	e7d1      	b.n	1f28 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1f84:	22b8      	movs	r2, #184	; 0xb8
    1f86:	0052      	lsls	r2, r2, #1
    1f88:	4907      	ldr	r1, [pc, #28]	; (1fa8 <spi_cmd_rsp+0xbc>)
    1f8a:	4808      	ldr	r0, [pc, #32]	; (1fac <spi_cmd_rsp+0xc0>)
    1f8c:	4b08      	ldr	r3, [pc, #32]	; (1fb0 <spi_cmd_rsp+0xc4>)
    1f8e:	4798      	blx	r3
    1f90:	4808      	ldr	r0, [pc, #32]	; (1fb4 <spi_cmd_rsp+0xc8>)
    1f92:	4b09      	ldr	r3, [pc, #36]	; (1fb8 <spi_cmd_rsp+0xcc>)
    1f94:	4798      	blx	r3
    1f96:	200d      	movs	r0, #13
    1f98:	4b08      	ldr	r3, [pc, #32]	; (1fbc <spi_cmd_rsp+0xd0>)
    1f9a:	4798      	blx	r3
			goto _fail_;
    1f9c:	e7d4      	b.n	1f48 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f9e:	2501      	movs	r5, #1
    1fa0:	e7d2      	b.n	1f48 <spi_cmd_rsp+0x5c>
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	00001ecd 	.word	0x00001ecd
    1fa8:	0000a42c 	.word	0x0000a42c
    1fac:	00009d50 	.word	0x00009d50
    1fb0:	000089a5 	.word	0x000089a5
    1fb4:	0000a8d0 	.word	0x0000a8d0
    1fb8:	00008ac1 	.word	0x00008ac1
    1fbc:	000089d9 	.word	0x000089d9

00001fc0 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fc2:	46de      	mov	lr, fp
    1fc4:	4657      	mov	r7, sl
    1fc6:	464e      	mov	r6, r9
    1fc8:	4645      	mov	r5, r8
    1fca:	b5e0      	push	{r5, r6, r7, lr}
    1fcc:	b087      	sub	sp, #28
    1fce:	9001      	str	r0, [sp, #4]
    1fd0:	4689      	mov	r9, r1
    1fd2:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1fd4:	2300      	movs	r3, #0
    1fd6:	469a      	mov	sl, r3
    1fd8:	2380      	movs	r3, #128	; 0x80
    1fda:	019b      	lsls	r3, r3, #6
    1fdc:	469b      	mov	fp, r3
    1fde:	466a      	mov	r2, sp
    1fe0:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1fe2:	4b3b      	ldr	r3, [pc, #236]	; (20d0 <STACK_SIZE+0xd0>)
    1fe4:	4698      	mov	r8, r3
    1fe6:	e02e      	b.n	2046 <STACK_SIZE+0x46>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1fe8:	4a3a      	ldr	r2, [pc, #232]	; (20d4 <STACK_SIZE+0xd4>)
    1fea:	493b      	ldr	r1, [pc, #236]	; (20d8 <STACK_SIZE+0xd8>)
    1fec:	483b      	ldr	r0, [pc, #236]	; (20dc <STACK_SIZE+0xdc>)
    1fee:	4b3c      	ldr	r3, [pc, #240]	; (20e0 <STACK_SIZE+0xe0>)
    1ff0:	4798      	blx	r3
    1ff2:	483c      	ldr	r0, [pc, #240]	; (20e4 <STACK_SIZE+0xe4>)
    1ff4:	4b3c      	ldr	r3, [pc, #240]	; (20e8 <STACK_SIZE+0xe8>)
    1ff6:	4798      	blx	r3
    1ff8:	200d      	movs	r0, #13
    1ffa:	4b3c      	ldr	r3, [pc, #240]	; (20ec <STACK_SIZE+0xec>)
    1ffc:	4798      	blx	r3
    1ffe:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    2000:	0028      	movs	r0, r5
    2002:	b007      	add	sp, #28
    2004:	bc3c      	pop	{r2, r3, r4, r5}
    2006:	4690      	mov	r8, r2
    2008:	4699      	mov	r9, r3
    200a:	46a2      	mov	sl, r4
    200c:	46ab      	mov	fp, r5
    200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    2010:	2c00      	cmp	r4, #0
    2012:	dd2e      	ble.n	2072 <STACK_SIZE+0x72>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    2014:	9b01      	ldr	r3, [sp, #4]
    2016:	4453      	add	r3, sl
    2018:	0018      	movs	r0, r3
    201a:	0039      	movs	r1, r7
    201c:	4b2c      	ldr	r3, [pc, #176]	; (20d0 <STACK_SIZE+0xd0>)
    201e:	4798      	blx	r3
    2020:	1e04      	subs	r4, r0, #0
    2022:	d133      	bne.n	208c <STACK_SIZE+0x8c>
		if(!clockless)
    2024:	9b02      	ldr	r3, [sp, #8]
    2026:	2b00      	cmp	r3, #0
    2028:	d103      	bne.n	2032 <STACK_SIZE+0x32>
			if (!gu8Crc_off) {
    202a:	4b31      	ldr	r3, [pc, #196]	; (20f0 <STACK_SIZE+0xf0>)
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d039      	beq.n	20a6 <STACK_SIZE+0xa6>
		ix += nbytes;
    2032:	4653      	mov	r3, sl
    2034:	18fb      	adds	r3, r7, r3
    2036:	b21b      	sxth	r3, r3
    2038:	469a      	mov	sl, r3
		sz -= nbytes;
    203a:	464b      	mov	r3, r9
    203c:	1bdf      	subs	r7, r3, r7
    203e:	b2bb      	uxth	r3, r7
    2040:	4699      	mov	r9, r3
	} while (sz);
    2042:	2b00      	cmp	r3, #0
    2044:	d042      	beq.n	20cc <STACK_SIZE+0xcc>
    2046:	464f      	mov	r7, r9
    2048:	45d9      	cmp	r9, fp
    204a:	d901      	bls.n	2050 <STACK_SIZE+0x50>
    204c:	466b      	mov	r3, sp
    204e:	89df      	ldrh	r7, [r3, #14]
    2050:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    2052:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2054:	ab04      	add	r3, sp, #16
    2056:	1cde      	adds	r6, r3, #3
    2058:	2101      	movs	r1, #1
    205a:	0030      	movs	r0, r6
    205c:	47c0      	blx	r8
    205e:	1e05      	subs	r5, r0, #0
    2060:	d1c2      	bne.n	1fe8 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    2062:	7833      	ldrb	r3, [r6, #0]
    2064:	091b      	lsrs	r3, r3, #4
    2066:	2b0f      	cmp	r3, #15
    2068:	d0d2      	beq.n	2010 <STACK_SIZE+0x10>
    206a:	3c01      	subs	r4, #1
    206c:	b224      	sxth	r4, r4
		} while (retry--);
    206e:	1c63      	adds	r3, r4, #1
    2070:	d1f2      	bne.n	2058 <STACK_SIZE+0x58>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2072:	4a20      	ldr	r2, [pc, #128]	; (20f4 <STACK_SIZE+0xf4>)
    2074:	4918      	ldr	r1, [pc, #96]	; (20d8 <STACK_SIZE+0xd8>)
    2076:	4819      	ldr	r0, [pc, #100]	; (20dc <STACK_SIZE+0xdc>)
    2078:	4c19      	ldr	r4, [pc, #100]	; (20e0 <STACK_SIZE+0xe0>)
    207a:	47a0      	blx	r4
    207c:	ab04      	add	r3, sp, #16
    207e:	78d9      	ldrb	r1, [r3, #3]
    2080:	481d      	ldr	r0, [pc, #116]	; (20f8 <STACK_SIZE+0xf8>)
    2082:	47a0      	blx	r4
    2084:	200d      	movs	r0, #13
    2086:	4b19      	ldr	r3, [pc, #100]	; (20ec <STACK_SIZE+0xec>)
    2088:	4798      	blx	r3
			break;
    208a:	e7b9      	b.n	2000 <STACK_SIZE>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    208c:	22c5      	movs	r2, #197	; 0xc5
    208e:	0092      	lsls	r2, r2, #2
    2090:	4911      	ldr	r1, [pc, #68]	; (20d8 <STACK_SIZE+0xd8>)
    2092:	4812      	ldr	r0, [pc, #72]	; (20dc <STACK_SIZE+0xdc>)
    2094:	4b12      	ldr	r3, [pc, #72]	; (20e0 <STACK_SIZE+0xe0>)
    2096:	4798      	blx	r3
    2098:	4818      	ldr	r0, [pc, #96]	; (20fc <STACK_SIZE+0xfc>)
    209a:	4b13      	ldr	r3, [pc, #76]	; (20e8 <STACK_SIZE+0xe8>)
    209c:	4798      	blx	r3
    209e:	200d      	movs	r0, #13
    20a0:	4b12      	ldr	r3, [pc, #72]	; (20ec <STACK_SIZE+0xec>)
    20a2:	4798      	blx	r3
			break;
    20a4:	e7ac      	b.n	2000 <STACK_SIZE>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    20a6:	2102      	movs	r1, #2
    20a8:	a805      	add	r0, sp, #20
    20aa:	4b09      	ldr	r3, [pc, #36]	; (20d0 <STACK_SIZE+0xd0>)
    20ac:	4798      	blx	r3
    20ae:	2800      	cmp	r0, #0
    20b0:	d0bf      	beq.n	2032 <STACK_SIZE+0x32>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    20b2:	4a13      	ldr	r2, [pc, #76]	; (2100 <STACK_SIZE+0x100>)
    20b4:	4908      	ldr	r1, [pc, #32]	; (20d8 <STACK_SIZE+0xd8>)
    20b6:	4809      	ldr	r0, [pc, #36]	; (20dc <STACK_SIZE+0xdc>)
    20b8:	4b09      	ldr	r3, [pc, #36]	; (20e0 <STACK_SIZE+0xe0>)
    20ba:	4798      	blx	r3
    20bc:	4811      	ldr	r0, [pc, #68]	; (2104 <STACK_SIZE+0x104>)
    20be:	4b0a      	ldr	r3, [pc, #40]	; (20e8 <STACK_SIZE+0xe8>)
    20c0:	4798      	blx	r3
    20c2:	200d      	movs	r0, #13
    20c4:	4b09      	ldr	r3, [pc, #36]	; (20ec <STACK_SIZE+0xec>)
    20c6:	4798      	blx	r3
					result = N_FAIL;
    20c8:	0025      	movs	r5, r4
					break;
    20ca:	e799      	b.n	2000 <STACK_SIZE>
    20cc:	2501      	movs	r5, #1
    20ce:	e797      	b.n	2000 <STACK_SIZE>
    20d0:	00001ecd 	.word	0x00001ecd
    20d4:	000002ff 	.word	0x000002ff
    20d8:	0000a438 	.word	0x0000a438
    20dc:	00009d50 	.word	0x00009d50
    20e0:	000089a5 	.word	0x000089a5
    20e4:	0000a904 	.word	0x0000a904
    20e8:	00008ac1 	.word	0x00008ac1
    20ec:	000089d9 	.word	0x000089d9
    20f0:	200000ac 	.word	0x200000ac
    20f4:	0000030b 	.word	0x0000030b
    20f8:	0000a938 	.word	0x0000a938
    20fc:	0000a968 	.word	0x0000a968
    2100:	0000031f 	.word	0x0000031f
    2104:	0000a998 	.word	0x0000a998

00002108 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2108:	b5f0      	push	{r4, r5, r6, r7, lr}
    210a:	46d6      	mov	lr, sl
    210c:	464f      	mov	r7, r9
    210e:	4646      	mov	r6, r8
    2110:	b5c0      	push	{r6, r7, lr}
    2112:	b086      	sub	sp, #24
    2114:	9003      	str	r0, [sp, #12]
    2116:	9104      	str	r1, [sp, #16]
    2118:	2830      	cmp	r0, #48	; 0x30
    211a:	d80f      	bhi.n	213c <spi_write_reg+0x34>
    211c:	4b30      	ldr	r3, [pc, #192]	; (21e0 <spi_write_reg+0xd8>)
    211e:	781f      	ldrb	r7, [r3, #0]
    2120:	b2fb      	uxtb	r3, r7
    2122:	9305      	str	r3, [sp, #20]
    2124:	2300      	movs	r3, #0
    2126:	2230      	movs	r2, #48	; 0x30
    2128:	9903      	ldr	r1, [sp, #12]
    212a:	428a      	cmp	r2, r1
    212c:	415b      	adcs	r3, r3
    212e:	b2db      	uxtb	r3, r3
    2130:	469a      	mov	sl, r3
    2132:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2134:	4b2b      	ldr	r3, [pc, #172]	; (21e4 <spi_write_reg+0xdc>)
    2136:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2138:	46d1      	mov	r9, sl
    213a:	e033      	b.n	21a4 <spi_write_reg+0x9c>
    213c:	4b2a      	ldr	r3, [pc, #168]	; (21e8 <spi_write_reg+0xe0>)
    213e:	781f      	ldrb	r7, [r3, #0]
    2140:	e7ee      	b.n	2120 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    2142:	9805      	ldr	r0, [sp, #20]
    2144:	4b29      	ldr	r3, [pc, #164]	; (21ec <spi_write_reg+0xe4>)
    2146:	4798      	blx	r3
    2148:	0004      	movs	r4, r0
	if (result != N_OK) {
    214a:	2801      	cmp	r0, #1
    214c:	d041      	beq.n	21d2 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    214e:	22e7      	movs	r2, #231	; 0xe7
    2150:	0092      	lsls	r2, r2, #2
    2152:	4927      	ldr	r1, [pc, #156]	; (21f0 <spi_write_reg+0xe8>)
    2154:	4827      	ldr	r0, [pc, #156]	; (21f4 <spi_write_reg+0xec>)
    2156:	4e28      	ldr	r6, [pc, #160]	; (21f8 <spi_write_reg+0xf0>)
    2158:	47b0      	blx	r6
    215a:	9903      	ldr	r1, [sp, #12]
    215c:	4827      	ldr	r0, [pc, #156]	; (21fc <spi_write_reg+0xf4>)
    215e:	47b0      	blx	r6
    2160:	200d      	movs	r0, #13
    2162:	4b27      	ldr	r3, [pc, #156]	; (2200 <spi_write_reg+0xf8>)
    2164:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    2166:	2001      	movs	r0, #1
    2168:	4e26      	ldr	r6, [pc, #152]	; (2204 <spi_write_reg+0xfc>)
    216a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    216c:	2300      	movs	r3, #0
    216e:	9300      	str	r3, [sp, #0]
    2170:	2200      	movs	r2, #0
    2172:	2100      	movs	r1, #0
    2174:	20cf      	movs	r0, #207	; 0xcf
    2176:	4f1b      	ldr	r7, [pc, #108]	; (21e4 <spi_write_reg+0xdc>)
    2178:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    217a:	20cf      	movs	r0, #207	; 0xcf
    217c:	4b1b      	ldr	r3, [pc, #108]	; (21ec <spi_write_reg+0xe4>)
    217e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    2180:	4a21      	ldr	r2, [pc, #132]	; (2208 <spi_write_reg+0x100>)
    2182:	491b      	ldr	r1, [pc, #108]	; (21f0 <spi_write_reg+0xe8>)
    2184:	481b      	ldr	r0, [pc, #108]	; (21f4 <spi_write_reg+0xec>)
    2186:	4f1c      	ldr	r7, [pc, #112]	; (21f8 <spi_write_reg+0xf0>)
    2188:	47b8      	blx	r7
    218a:	9b04      	ldr	r3, [sp, #16]
    218c:	9a03      	ldr	r2, [sp, #12]
    218e:	0029      	movs	r1, r5
    2190:	481e      	ldr	r0, [pc, #120]	; (220c <spi_write_reg+0x104>)
    2192:	47b8      	blx	r7
    2194:	200d      	movs	r0, #13
    2196:	4b1a      	ldr	r3, [pc, #104]	; (2200 <spi_write_reg+0xf8>)
    2198:	4798      	blx	r3
		nm_bsp_sleep(1);
    219a:	2001      	movs	r0, #1
    219c:	47b0      	blx	r6
    219e:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    21a0:	2d00      	cmp	r5, #0
    21a2:	d016      	beq.n	21d2 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    21a4:	464b      	mov	r3, r9
    21a6:	9300      	str	r3, [sp, #0]
    21a8:	2304      	movs	r3, #4
    21aa:	9a04      	ldr	r2, [sp, #16]
    21ac:	9f03      	ldr	r7, [sp, #12]
    21ae:	0039      	movs	r1, r7
    21b0:	9805      	ldr	r0, [sp, #20]
    21b2:	47c0      	blx	r8
    21b4:	0004      	movs	r4, r0
	if (result != N_OK) {
    21b6:	2801      	cmp	r0, #1
    21b8:	d0c3      	beq.n	2142 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    21ba:	4a15      	ldr	r2, [pc, #84]	; (2210 <spi_write_reg+0x108>)
    21bc:	490c      	ldr	r1, [pc, #48]	; (21f0 <spi_write_reg+0xe8>)
    21be:	480d      	ldr	r0, [pc, #52]	; (21f4 <spi_write_reg+0xec>)
    21c0:	4e0d      	ldr	r6, [pc, #52]	; (21f8 <spi_write_reg+0xf0>)
    21c2:	47b0      	blx	r6
    21c4:	0039      	movs	r1, r7
    21c6:	4813      	ldr	r0, [pc, #76]	; (2214 <spi_write_reg+0x10c>)
    21c8:	47b0      	blx	r6
    21ca:	200d      	movs	r0, #13
    21cc:	4b0c      	ldr	r3, [pc, #48]	; (2200 <spi_write_reg+0xf8>)
    21ce:	4798      	blx	r3
		goto _FAIL_;
    21d0:	e7c9      	b.n	2166 <spi_write_reg+0x5e>
	}

	return result;
}
    21d2:	0020      	movs	r0, r4
    21d4:	b006      	add	sp, #24
    21d6:	bc1c      	pop	{r2, r3, r4}
    21d8:	4690      	mov	r8, r2
    21da:	4699      	mov	r9, r3
    21dc:	46a2      	mov	sl, r4
    21de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21e0:	0000a410 	.word	0x0000a410
    21e4:	00001d4d 	.word	0x00001d4d
    21e8:	0000a411 	.word	0x0000a411
    21ec:	00001eed 	.word	0x00001eed
    21f0:	0000a458 	.word	0x0000a458
    21f4:	00009d50 	.word	0x00009d50
    21f8:	000089a5 	.word	0x000089a5
    21fc:	0000aa90 	.word	0x0000aa90
    2200:	000089d9 	.word	0x000089d9
    2204:	00000195 	.word	0x00000195
    2208:	000003af 	.word	0x000003af
    220c:	0000aac8 	.word	0x0000aac8
    2210:	00000396 	.word	0x00000396
    2214:	0000aa64 	.word	0x0000aa64

00002218 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2218:	b5f0      	push	{r4, r5, r6, r7, lr}
    221a:	46de      	mov	lr, fp
    221c:	4657      	mov	r7, sl
    221e:	464e      	mov	r6, r9
    2220:	4645      	mov	r5, r8
    2222:	b5e0      	push	{r5, r6, r7, lr}
    2224:	b087      	sub	sp, #28
    2226:	9002      	str	r0, [sp, #8]
    2228:	468b      	mov	fp, r1
    222a:	28ff      	cmp	r0, #255	; 0xff
    222c:	d80f      	bhi.n	224e <spi_read_reg+0x36>
    222e:	4b41      	ldr	r3, [pc, #260]	; (2334 <spi_read_reg+0x11c>)
    2230:	781f      	ldrb	r7, [r3, #0]
    2232:	b2fb      	uxtb	r3, r7
    2234:	9303      	str	r3, [sp, #12]
    2236:	2300      	movs	r3, #0
    2238:	22ff      	movs	r2, #255	; 0xff
    223a:	9902      	ldr	r1, [sp, #8]
    223c:	428a      	cmp	r2, r1
    223e:	415b      	adcs	r3, r3
    2240:	b2db      	uxtb	r3, r3
    2242:	469a      	mov	sl, r3
    2244:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2246:	4b3c      	ldr	r3, [pc, #240]	; (2338 <spi_read_reg+0x120>)
    2248:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    224a:	46d1      	mov	r9, sl
    224c:	e031      	b.n	22b2 <spi_read_reg+0x9a>
    224e:	4b3b      	ldr	r3, [pc, #236]	; (233c <spi_read_reg+0x124>)
    2250:	781f      	ldrb	r7, [r3, #0]
    2252:	e7ee      	b.n	2232 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    2254:	9803      	ldr	r0, [sp, #12]
    2256:	4b3a      	ldr	r3, [pc, #232]	; (2340 <spi_read_reg+0x128>)
    2258:	4798      	blx	r3
    225a:	0004      	movs	r4, r0
	if (result != N_OK) {
    225c:	2801      	cmp	r0, #1
    225e:	d03f      	beq.n	22e0 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2260:	4a38      	ldr	r2, [pc, #224]	; (2344 <spi_read_reg+0x12c>)
    2262:	4939      	ldr	r1, [pc, #228]	; (2348 <spi_read_reg+0x130>)
    2264:	4839      	ldr	r0, [pc, #228]	; (234c <spi_read_reg+0x134>)
    2266:	4e3a      	ldr	r6, [pc, #232]	; (2350 <spi_read_reg+0x138>)
    2268:	47b0      	blx	r6
    226a:	9902      	ldr	r1, [sp, #8]
    226c:	4839      	ldr	r0, [pc, #228]	; (2354 <spi_read_reg+0x13c>)
    226e:	47b0      	blx	r6
    2270:	200d      	movs	r0, #13
    2272:	4b39      	ldr	r3, [pc, #228]	; (2358 <spi_read_reg+0x140>)
    2274:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    2276:	2001      	movs	r0, #1
    2278:	4e38      	ldr	r6, [pc, #224]	; (235c <spi_read_reg+0x144>)
    227a:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    227c:	2300      	movs	r3, #0
    227e:	9300      	str	r3, [sp, #0]
    2280:	2200      	movs	r2, #0
    2282:	2100      	movs	r1, #0
    2284:	20cf      	movs	r0, #207	; 0xcf
    2286:	4f2c      	ldr	r7, [pc, #176]	; (2338 <spi_read_reg+0x120>)
    2288:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    228a:	20cf      	movs	r0, #207	; 0xcf
    228c:	4b2c      	ldr	r3, [pc, #176]	; (2340 <spi_read_reg+0x128>)
    228e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    2290:	4a33      	ldr	r2, [pc, #204]	; (2360 <spi_read_reg+0x148>)
    2292:	492d      	ldr	r1, [pc, #180]	; (2348 <spi_read_reg+0x130>)
    2294:	482d      	ldr	r0, [pc, #180]	; (234c <spi_read_reg+0x134>)
    2296:	4f2e      	ldr	r7, [pc, #184]	; (2350 <spi_read_reg+0x138>)
    2298:	47b8      	blx	r7
    229a:	9a02      	ldr	r2, [sp, #8]
    229c:	0029      	movs	r1, r5
    229e:	4831      	ldr	r0, [pc, #196]	; (2364 <spi_read_reg+0x14c>)
    22a0:	47b8      	blx	r7
    22a2:	200d      	movs	r0, #13
    22a4:	4b2c      	ldr	r3, [pc, #176]	; (2358 <spi_read_reg+0x140>)
    22a6:	4798      	blx	r3
		nm_bsp_sleep(1);
    22a8:	2001      	movs	r0, #1
    22aa:	47b0      	blx	r6
    22ac:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    22ae:	2d00      	cmp	r5, #0
    22b0:	d037      	beq.n	2322 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    22b2:	464b      	mov	r3, r9
    22b4:	9300      	str	r3, [sp, #0]
    22b6:	2304      	movs	r3, #4
    22b8:	2200      	movs	r2, #0
    22ba:	9f02      	ldr	r7, [sp, #8]
    22bc:	0039      	movs	r1, r7
    22be:	9803      	ldr	r0, [sp, #12]
    22c0:	47c0      	blx	r8
    22c2:	0004      	movs	r4, r0
	if (result != N_OK) {
    22c4:	2801      	cmp	r0, #1
    22c6:	d0c5      	beq.n	2254 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    22c8:	4a27      	ldr	r2, [pc, #156]	; (2368 <spi_read_reg+0x150>)
    22ca:	491f      	ldr	r1, [pc, #124]	; (2348 <spi_read_reg+0x130>)
    22cc:	481f      	ldr	r0, [pc, #124]	; (234c <spi_read_reg+0x134>)
    22ce:	4e20      	ldr	r6, [pc, #128]	; (2350 <spi_read_reg+0x138>)
    22d0:	47b0      	blx	r6
    22d2:	0039      	movs	r1, r7
    22d4:	4825      	ldr	r0, [pc, #148]	; (236c <spi_read_reg+0x154>)
    22d6:	47b0      	blx	r6
    22d8:	200d      	movs	r0, #13
    22da:	4b1f      	ldr	r3, [pc, #124]	; (2358 <spi_read_reg+0x140>)
    22dc:	4798      	blx	r3
		goto _FAIL_;
    22de:	e7ca      	b.n	2276 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    22e0:	464a      	mov	r2, r9
    22e2:	2104      	movs	r1, #4
    22e4:	a805      	add	r0, sp, #20
    22e6:	4b22      	ldr	r3, [pc, #136]	; (2370 <spi_read_reg+0x158>)
    22e8:	4798      	blx	r3
    22ea:	0004      	movs	r4, r0
	if (result != N_OK) {
    22ec:	2801      	cmp	r0, #1
    22ee:	d00b      	beq.n	2308 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    22f0:	4a20      	ldr	r2, [pc, #128]	; (2374 <spi_read_reg+0x15c>)
    22f2:	4915      	ldr	r1, [pc, #84]	; (2348 <spi_read_reg+0x130>)
    22f4:	4815      	ldr	r0, [pc, #84]	; (234c <spi_read_reg+0x134>)
    22f6:	4b16      	ldr	r3, [pc, #88]	; (2350 <spi_read_reg+0x138>)
    22f8:	4798      	blx	r3
    22fa:	481f      	ldr	r0, [pc, #124]	; (2378 <spi_read_reg+0x160>)
    22fc:	4b1f      	ldr	r3, [pc, #124]	; (237c <spi_read_reg+0x164>)
    22fe:	4798      	blx	r3
    2300:	200d      	movs	r0, #13
    2302:	4b15      	ldr	r3, [pc, #84]	; (2358 <spi_read_reg+0x140>)
    2304:	4798      	blx	r3
		goto _FAIL_;
    2306:	e7b6      	b.n	2276 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2308:	aa05      	add	r2, sp, #20
    230a:	7853      	ldrb	r3, [r2, #1]
    230c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    230e:	7891      	ldrb	r1, [r2, #2]
    2310:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2312:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2314:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2316:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2318:	78d2      	ldrb	r2, [r2, #3]
    231a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    231c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    231e:	465a      	mov	r2, fp
    2320:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2322:	0020      	movs	r0, r4
    2324:	b007      	add	sp, #28
    2326:	bc3c      	pop	{r2, r3, r4, r5}
    2328:	4690      	mov	r8, r2
    232a:	4699      	mov	r9, r3
    232c:	46a2      	mov	sl, r4
    232e:	46ab      	mov	fp, r5
    2330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2332:	46c0      	nop			; (mov r8, r8)
    2334:	0000a412 	.word	0x0000a412
    2338:	00001d4d 	.word	0x00001d4d
    233c:	0000a413 	.word	0x0000a413
    2340:	00001eed 	.word	0x00001eed
    2344:	0000041d 	.word	0x0000041d
    2348:	0000a478 	.word	0x0000a478
    234c:	00009d50 	.word	0x00009d50
    2350:	000089a5 	.word	0x000089a5
    2354:	0000a9f8 	.word	0x0000a9f8
    2358:	000089d9 	.word	0x000089d9
    235c:	00000195 	.word	0x00000195
    2360:	0000043c 	.word	0x0000043c
    2364:	0000aa4c 	.word	0x0000aa4c
    2368:	00000417 	.word	0x00000417
    236c:	0000a9cc 	.word	0x0000a9cc
    2370:	00001fc1 	.word	0x00001fc1
    2374:	00000424 	.word	0x00000424
    2378:	0000aa2c 	.word	0x0000aa2c
    237c:	00008ac1 	.word	0x00008ac1

00002380 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    2380:	b510      	push	{r4, lr}
    2382:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2384:	2300      	movs	r3, #0
    2386:	9300      	str	r3, [sp, #0]
    2388:	2200      	movs	r2, #0
    238a:	2100      	movs	r1, #0
    238c:	20cf      	movs	r0, #207	; 0xcf
    238e:	4c04      	ldr	r4, [pc, #16]	; (23a0 <nm_spi_reset+0x20>)
    2390:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    2392:	20cf      	movs	r0, #207	; 0xcf
    2394:	4b03      	ldr	r3, [pc, #12]	; (23a4 <nm_spi_reset+0x24>)
    2396:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2398:	2000      	movs	r0, #0
    239a:	b002      	add	sp, #8
    239c:	bd10      	pop	{r4, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	00001d4d 	.word	0x00001d4d
    23a4:	00001eed 	.word	0x00001eed

000023a8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    23a8:	2200      	movs	r2, #0
    23aa:	4b02      	ldr	r3, [pc, #8]	; (23b4 <nm_spi_deinit+0xc>)
    23ac:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    23ae:	2000      	movs	r0, #0
    23b0:	4770      	bx	lr
    23b2:	46c0      	nop			; (mov r8, r8)
    23b4:	200000ac 	.word	0x200000ac

000023b8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    23b8:	b500      	push	{lr}
    23ba:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    23bc:	a901      	add	r1, sp, #4
    23be:	4b02      	ldr	r3, [pc, #8]	; (23c8 <nm_spi_read_reg+0x10>)
    23c0:	4798      	blx	r3

	return u32Val;
}
    23c2:	9801      	ldr	r0, [sp, #4]
    23c4:	b003      	add	sp, #12
    23c6:	bd00      	pop	{pc}
    23c8:	00002219 	.word	0x00002219

000023cc <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    23cc:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    23ce:	4b04      	ldr	r3, [pc, #16]	; (23e0 <nm_spi_read_reg_with_ret+0x14>)
    23d0:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    23d2:	2300      	movs	r3, #0
    23d4:	2801      	cmp	r0, #1
    23d6:	d101      	bne.n	23dc <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    23d8:	0018      	movs	r0, r3
    23da:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    23dc:	3b06      	subs	r3, #6
    23de:	e7fb      	b.n	23d8 <nm_spi_read_reg_with_ret+0xc>
    23e0:	00002219 	.word	0x00002219

000023e4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    23e4:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    23e6:	4b04      	ldr	r3, [pc, #16]	; (23f8 <nm_spi_write_reg+0x14>)
    23e8:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    23ea:	2300      	movs	r3, #0
    23ec:	2801      	cmp	r0, #1
    23ee:	d101      	bne.n	23f4 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    23f0:	0018      	movs	r0, r3
    23f2:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    23f4:	3b06      	subs	r3, #6
    23f6:	e7fb      	b.n	23f0 <nm_spi_write_reg+0xc>
    23f8:	00002109 	.word	0x00002109

000023fc <nm_spi_init>:
{
    23fc:	b510      	push	{r4, lr}
    23fe:	b082      	sub	sp, #8
	uint32 reg = 0;
    2400:	2300      	movs	r3, #0
    2402:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    2404:	4a35      	ldr	r2, [pc, #212]	; (24dc <nm_spi_init+0xe0>)
    2406:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2408:	4669      	mov	r1, sp
    240a:	4835      	ldr	r0, [pc, #212]	; (24e0 <nm_spi_init+0xe4>)
    240c:	4b35      	ldr	r3, [pc, #212]	; (24e4 <nm_spi_init+0xe8>)
    240e:	4798      	blx	r3
    2410:	2800      	cmp	r0, #0
    2412:	d028      	beq.n	2466 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    2414:	4b31      	ldr	r3, [pc, #196]	; (24dc <nm_spi_init+0xe0>)
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b00      	cmp	r3, #0
    241a:	d10d      	bne.n	2438 <nm_spi_init+0x3c>
		reg &= ~0x70;
    241c:	337c      	adds	r3, #124	; 0x7c
    241e:	9900      	ldr	r1, [sp, #0]
    2420:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    2422:	3b2c      	subs	r3, #44	; 0x2c
    2424:	4319      	orrs	r1, r3
    2426:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2428:	482d      	ldr	r0, [pc, #180]	; (24e0 <nm_spi_init+0xe4>)
    242a:	4b2f      	ldr	r3, [pc, #188]	; (24e8 <nm_spi_init+0xec>)
    242c:	4798      	blx	r3
    242e:	1e04      	subs	r4, r0, #0
    2430:	d039      	beq.n	24a6 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    2432:	2201      	movs	r2, #1
    2434:	4b29      	ldr	r3, [pc, #164]	; (24dc <nm_spi_init+0xe0>)
    2436:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    2438:	a901      	add	r1, sp, #4
    243a:	2080      	movs	r0, #128	; 0x80
    243c:	0140      	lsls	r0, r0, #5
    243e:	4b29      	ldr	r3, [pc, #164]	; (24e4 <nm_spi_init+0xe8>)
    2440:	4798      	blx	r3
    2442:	2800      	cmp	r0, #0
    2444:	d03b      	beq.n	24be <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2446:	4c26      	ldr	r4, [pc, #152]	; (24e0 <nm_spi_init+0xe4>)
    2448:	0020      	movs	r0, r4
    244a:	4b28      	ldr	r3, [pc, #160]	; (24ec <nm_spi_init+0xf0>)
    244c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    244e:	2370      	movs	r3, #112	; 0x70
    2450:	0001      	movs	r1, r0
    2452:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    2454:	2050      	movs	r0, #80	; 0x50
    2456:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2458:	0020      	movs	r0, r4
    245a:	4b25      	ldr	r3, [pc, #148]	; (24f0 <nm_spi_init+0xf4>)
    245c:	4798      	blx	r3
	return M2M_SUCCESS;
    245e:	2400      	movs	r4, #0
}
    2460:	0020      	movs	r0, r4
    2462:	b002      	add	sp, #8
    2464:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    2466:	2201      	movs	r2, #1
    2468:	4b1c      	ldr	r3, [pc, #112]	; (24dc <nm_spi_init+0xe0>)
    246a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    246c:	4a21      	ldr	r2, [pc, #132]	; (24f4 <nm_spi_init+0xf8>)
    246e:	4922      	ldr	r1, [pc, #136]	; (24f8 <nm_spi_init+0xfc>)
    2470:	4822      	ldr	r0, [pc, #136]	; (24fc <nm_spi_init+0x100>)
    2472:	4b23      	ldr	r3, [pc, #140]	; (2500 <nm_spi_init+0x104>)
    2474:	4798      	blx	r3
    2476:	4823      	ldr	r0, [pc, #140]	; (2504 <nm_spi_init+0x108>)
    2478:	4b23      	ldr	r3, [pc, #140]	; (2508 <nm_spi_init+0x10c>)
    247a:	4798      	blx	r3
    247c:	200d      	movs	r0, #13
    247e:	4b23      	ldr	r3, [pc, #140]	; (250c <nm_spi_init+0x110>)
    2480:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2482:	4669      	mov	r1, sp
    2484:	4816      	ldr	r0, [pc, #88]	; (24e0 <nm_spi_init+0xe4>)
    2486:	4b17      	ldr	r3, [pc, #92]	; (24e4 <nm_spi_init+0xe8>)
    2488:	4798      	blx	r3
    248a:	1e04      	subs	r4, r0, #0
    248c:	d1c2      	bne.n	2414 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    248e:	4a20      	ldr	r2, [pc, #128]	; (2510 <nm_spi_init+0x114>)
    2490:	4919      	ldr	r1, [pc, #100]	; (24f8 <nm_spi_init+0xfc>)
    2492:	481a      	ldr	r0, [pc, #104]	; (24fc <nm_spi_init+0x100>)
    2494:	4b1a      	ldr	r3, [pc, #104]	; (2500 <nm_spi_init+0x104>)
    2496:	4798      	blx	r3
    2498:	481e      	ldr	r0, [pc, #120]	; (2514 <nm_spi_init+0x118>)
    249a:	4b1b      	ldr	r3, [pc, #108]	; (2508 <nm_spi_init+0x10c>)
    249c:	4798      	blx	r3
    249e:	200d      	movs	r0, #13
    24a0:	4b1a      	ldr	r3, [pc, #104]	; (250c <nm_spi_init+0x110>)
    24a2:	4798      	blx	r3
			return 0;
    24a4:	e7dc      	b.n	2460 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    24a6:	4a1c      	ldr	r2, [pc, #112]	; (2518 <nm_spi_init+0x11c>)
    24a8:	4913      	ldr	r1, [pc, #76]	; (24f8 <nm_spi_init+0xfc>)
    24aa:	4814      	ldr	r0, [pc, #80]	; (24fc <nm_spi_init+0x100>)
    24ac:	4b14      	ldr	r3, [pc, #80]	; (2500 <nm_spi_init+0x104>)
    24ae:	4798      	blx	r3
    24b0:	481a      	ldr	r0, [pc, #104]	; (251c <nm_spi_init+0x120>)
    24b2:	4b15      	ldr	r3, [pc, #84]	; (2508 <nm_spi_init+0x10c>)
    24b4:	4798      	blx	r3
    24b6:	200d      	movs	r0, #13
    24b8:	4b14      	ldr	r3, [pc, #80]	; (250c <nm_spi_init+0x110>)
    24ba:	4798      	blx	r3
			return 0;
    24bc:	e7d0      	b.n	2460 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    24be:	4a18      	ldr	r2, [pc, #96]	; (2520 <nm_spi_init+0x124>)
    24c0:	490d      	ldr	r1, [pc, #52]	; (24f8 <nm_spi_init+0xfc>)
    24c2:	480e      	ldr	r0, [pc, #56]	; (24fc <nm_spi_init+0x100>)
    24c4:	4b0e      	ldr	r3, [pc, #56]	; (2500 <nm_spi_init+0x104>)
    24c6:	4798      	blx	r3
    24c8:	4816      	ldr	r0, [pc, #88]	; (2524 <nm_spi_init+0x128>)
    24ca:	4b0f      	ldr	r3, [pc, #60]	; (2508 <nm_spi_init+0x10c>)
    24cc:	4798      	blx	r3
    24ce:	200d      	movs	r0, #13
    24d0:	4b0e      	ldr	r3, [pc, #56]	; (250c <nm_spi_init+0x110>)
    24d2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    24d4:	2406      	movs	r4, #6
    24d6:	4264      	negs	r4, r4
    24d8:	e7c2      	b.n	2460 <nm_spi_init+0x64>
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	200000ac 	.word	0x200000ac
    24e0:	0000e824 	.word	0x0000e824
    24e4:	00002219 	.word	0x00002219
    24e8:	00002109 	.word	0x00002109
    24ec:	000023b9 	.word	0x000023b9
    24f0:	000023e5 	.word	0x000023e5
    24f4:	000004c7 	.word	0x000004c7
    24f8:	0000a494 	.word	0x0000a494
    24fc:	00009d50 	.word	0x00009d50
    2500:	000089a5 	.word	0x000089a5
    2504:	0000a5a0 	.word	0x0000a5a0
    2508:	00008ac1 	.word	0x00008ac1
    250c:	000089d9 	.word	0x000089d9
    2510:	000004ca 	.word	0x000004ca
    2514:	0000a5f0 	.word	0x0000a5f0
    2518:	000004d4 	.word	0x000004d4
    251c:	0000a61c 	.word	0x0000a61c
    2520:	000004de 	.word	0x000004de
    2524:	0000a650 	.word	0x0000a650

00002528 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2528:	b5f0      	push	{r4, r5, r6, r7, lr}
    252a:	46de      	mov	lr, fp
    252c:	4657      	mov	r7, sl
    252e:	464e      	mov	r6, r9
    2530:	4645      	mov	r5, r8
    2532:	b5e0      	push	{r5, r6, r7, lr}
    2534:	b087      	sub	sp, #28
    2536:	9002      	str	r0, [sp, #8]
    2538:	9103      	str	r1, [sp, #12]
    253a:	0016      	movs	r6, r2
    253c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    253e:	2300      	movs	r3, #0
    2540:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    2542:	2400      	movs	r4, #0
    2544:	4b3e      	ldr	r3, [pc, #248]	; (2640 <nm_spi_read_block+0x118>)
    2546:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    2548:	46a9      	mov	r9, r5
    254a:	e037      	b.n	25bc <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    254c:	2301      	movs	r3, #1
    254e:	469b      	mov	fp, r3
		size = 2;
    2550:	3601      	adds	r6, #1
    2552:	e035      	b.n	25c0 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    2554:	20c8      	movs	r0, #200	; 0xc8
    2556:	4b3b      	ldr	r3, [pc, #236]	; (2644 <nm_spi_read_block+0x11c>)
    2558:	4798      	blx	r3
	if (result != N_OK) {
    255a:	2801      	cmp	r0, #1
    255c:	d045      	beq.n	25ea <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    255e:	4a3a      	ldr	r2, [pc, #232]	; (2648 <nm_spi_read_block+0x120>)
    2560:	493a      	ldr	r1, [pc, #232]	; (264c <nm_spi_read_block+0x124>)
    2562:	483b      	ldr	r0, [pc, #236]	; (2650 <nm_spi_read_block+0x128>)
    2564:	4f3b      	ldr	r7, [pc, #236]	; (2654 <nm_spi_read_block+0x12c>)
    2566:	47b8      	blx	r7
    2568:	9902      	ldr	r1, [sp, #8]
    256a:	483b      	ldr	r0, [pc, #236]	; (2658 <nm_spi_read_block+0x130>)
    256c:	47b8      	blx	r7
    256e:	200d      	movs	r0, #13
    2570:	4b3a      	ldr	r3, [pc, #232]	; (265c <nm_spi_read_block+0x134>)
    2572:	4798      	blx	r3
		nm_bsp_sleep(1);
    2574:	2001      	movs	r0, #1
    2576:	4f3a      	ldr	r7, [pc, #232]	; (2660 <nm_spi_read_block+0x138>)
    2578:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    257a:	9400      	str	r4, [sp, #0]
    257c:	0023      	movs	r3, r4
    257e:	0022      	movs	r2, r4
    2580:	0021      	movs	r1, r4
    2582:	20cf      	movs	r0, #207	; 0xcf
    2584:	4d2e      	ldr	r5, [pc, #184]	; (2640 <nm_spi_read_block+0x118>)
    2586:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    2588:	20cf      	movs	r0, #207	; 0xcf
    258a:	4b2e      	ldr	r3, [pc, #184]	; (2644 <nm_spi_read_block+0x11c>)
    258c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    258e:	4a35      	ldr	r2, [pc, #212]	; (2664 <nm_spi_read_block+0x13c>)
    2590:	492e      	ldr	r1, [pc, #184]	; (264c <nm_spi_read_block+0x124>)
    2592:	482f      	ldr	r0, [pc, #188]	; (2650 <nm_spi_read_block+0x128>)
    2594:	4b2f      	ldr	r3, [pc, #188]	; (2654 <nm_spi_read_block+0x12c>)
    2596:	469a      	mov	sl, r3
    2598:	4798      	blx	r3
    259a:	0033      	movs	r3, r6
    259c:	9a02      	ldr	r2, [sp, #8]
    259e:	4649      	mov	r1, r9
    25a0:	4831      	ldr	r0, [pc, #196]	; (2668 <nm_spi_read_block+0x140>)
    25a2:	47d0      	blx	sl
    25a4:	200d      	movs	r0, #13
    25a6:	4b2d      	ldr	r3, [pc, #180]	; (265c <nm_spi_read_block+0x134>)
    25a8:	4798      	blx	r3
		nm_bsp_sleep(1);
    25aa:	2001      	movs	r0, #1
    25ac:	47b8      	blx	r7
    25ae:	2301      	movs	r3, #1
    25b0:	425b      	negs	r3, r3
    25b2:	469c      	mov	ip, r3
    25b4:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    25b6:	464b      	mov	r3, r9
    25b8:	2b00      	cmp	r3, #0
    25ba:	d038      	beq.n	262e <nm_spi_read_block+0x106>
	if (size == 1)
    25bc:	2e01      	cmp	r6, #1
    25be:	d0c5      	beq.n	254c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    25c0:	9400      	str	r4, [sp, #0]
    25c2:	0033      	movs	r3, r6
    25c4:	0022      	movs	r2, r4
    25c6:	9d02      	ldr	r5, [sp, #8]
    25c8:	0029      	movs	r1, r5
    25ca:	20c8      	movs	r0, #200	; 0xc8
    25cc:	47c0      	blx	r8
	if (result != N_OK) {
    25ce:	2801      	cmp	r0, #1
    25d0:	d0c0      	beq.n	2554 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    25d2:	4a26      	ldr	r2, [pc, #152]	; (266c <nm_spi_read_block+0x144>)
    25d4:	491d      	ldr	r1, [pc, #116]	; (264c <nm_spi_read_block+0x124>)
    25d6:	481e      	ldr	r0, [pc, #120]	; (2650 <nm_spi_read_block+0x128>)
    25d8:	4f1e      	ldr	r7, [pc, #120]	; (2654 <nm_spi_read_block+0x12c>)
    25da:	47b8      	blx	r7
    25dc:	0029      	movs	r1, r5
    25de:	4824      	ldr	r0, [pc, #144]	; (2670 <nm_spi_read_block+0x148>)
    25e0:	47b8      	blx	r7
    25e2:	200d      	movs	r0, #13
    25e4:	4b1d      	ldr	r3, [pc, #116]	; (265c <nm_spi_read_block+0x134>)
    25e6:	4798      	blx	r3
    25e8:	e7c4      	b.n	2574 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    25ea:	465b      	mov	r3, fp
    25ec:	2b00      	cmp	r3, #0
    25ee:	d016      	beq.n	261e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    25f0:	af05      	add	r7, sp, #20
    25f2:	0022      	movs	r2, r4
    25f4:	0031      	movs	r1, r6
    25f6:	0038      	movs	r0, r7
    25f8:	4b1e      	ldr	r3, [pc, #120]	; (2674 <nm_spi_read_block+0x14c>)
    25fa:	4798      	blx	r3
		buf[0] = tmp[0];
    25fc:	783b      	ldrb	r3, [r7, #0]
    25fe:	9a03      	ldr	r2, [sp, #12]
    2600:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2602:	2801      	cmp	r0, #1
    2604:	d011      	beq.n	262a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2606:	4a1c      	ldr	r2, [pc, #112]	; (2678 <nm_spi_read_block+0x150>)
    2608:	4910      	ldr	r1, [pc, #64]	; (264c <nm_spi_read_block+0x124>)
    260a:	4811      	ldr	r0, [pc, #68]	; (2650 <nm_spi_read_block+0x128>)
    260c:	4b11      	ldr	r3, [pc, #68]	; (2654 <nm_spi_read_block+0x12c>)
    260e:	4798      	blx	r3
    2610:	481a      	ldr	r0, [pc, #104]	; (267c <nm_spi_read_block+0x154>)
    2612:	4b1b      	ldr	r3, [pc, #108]	; (2680 <nm_spi_read_block+0x158>)
    2614:	4798      	blx	r3
    2616:	200d      	movs	r0, #13
    2618:	4b10      	ldr	r3, [pc, #64]	; (265c <nm_spi_read_block+0x134>)
    261a:	4798      	blx	r3
    261c:	e7aa      	b.n	2574 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    261e:	0022      	movs	r2, r4
    2620:	0031      	movs	r1, r6
    2622:	9803      	ldr	r0, [sp, #12]
    2624:	4b13      	ldr	r3, [pc, #76]	; (2674 <nm_spi_read_block+0x14c>)
    2626:	4798      	blx	r3
    2628:	e7eb      	b.n	2602 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    262a:	2000      	movs	r0, #0
    262c:	e001      	b.n	2632 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    262e:	2006      	movs	r0, #6
    2630:	4240      	negs	r0, r0

	return s8Ret;
}
    2632:	b007      	add	sp, #28
    2634:	bc3c      	pop	{r2, r3, r4, r5}
    2636:	4690      	mov	r8, r2
    2638:	4699      	mov	r9, r3
    263a:	46a2      	mov	sl, r4
    263c:	46ab      	mov	fp, r5
    263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2640:	00001d4d 	.word	0x00001d4d
    2644:	00001eed 	.word	0x00001eed
    2648:	00000463 	.word	0x00000463
    264c:	0000a488 	.word	0x0000a488
    2650:	00009d50 	.word	0x00009d50
    2654:	000089a5 	.word	0x000089a5
    2658:	0000a6a4 	.word	0x0000a6a4
    265c:	000089d9 	.word	0x000089d9
    2660:	00000195 	.word	0x00000195
    2664:	00000484 	.word	0x00000484
    2668:	0000a704 	.word	0x0000a704
    266c:	0000045d 	.word	0x0000045d
    2670:	0000a674 	.word	0x0000a674
    2674:	00001fc1 	.word	0x00001fc1
    2678:	00000473 	.word	0x00000473
    267c:	0000a6dc 	.word	0x0000a6dc
    2680:	00008ac1 	.word	0x00008ac1

00002684 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2684:	b5f0      	push	{r4, r5, r6, r7, lr}
    2686:	46de      	mov	lr, fp
    2688:	4647      	mov	r7, r8
    268a:	b580      	push	{r7, lr}
    268c:	b089      	sub	sp, #36	; 0x24
    268e:	9004      	str	r0, [sp, #16]
    2690:	468b      	mov	fp, r1
    2692:	9203      	str	r2, [sp, #12]
    2694:	260a      	movs	r6, #10
    2696:	2780      	movs	r7, #128	; 0x80
    2698:	01bf      	lsls	r7, r7, #6
    269a:	466b      	mov	r3, sp
    269c:	82df      	strh	r7, [r3, #22]
    269e:	0035      	movs	r5, r6
    26a0:	e02d      	b.n	26fe <nm_spi_write_block+0x7a>
		size = 2;
    26a2:	3301      	adds	r3, #1
    26a4:	9303      	str	r3, [sp, #12]
    26a6:	e02d      	b.n	2704 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    26a8:	4a83      	ldr	r2, [pc, #524]	; (28b8 <nm_spi_write_block+0x234>)
    26aa:	4984      	ldr	r1, [pc, #528]	; (28bc <nm_spi_write_block+0x238>)
    26ac:	4884      	ldr	r0, [pc, #528]	; (28c0 <nm_spi_write_block+0x23c>)
    26ae:	4c85      	ldr	r4, [pc, #532]	; (28c4 <nm_spi_write_block+0x240>)
    26b0:	47a0      	blx	r4
    26b2:	0031      	movs	r1, r6
    26b4:	4884      	ldr	r0, [pc, #528]	; (28c8 <nm_spi_write_block+0x244>)
    26b6:	47a0      	blx	r4
    26b8:	200d      	movs	r0, #13
    26ba:	4b84      	ldr	r3, [pc, #528]	; (28cc <nm_spi_write_block+0x248>)
    26bc:	4798      	blx	r3
		nm_bsp_sleep(1);
    26be:	2001      	movs	r0, #1
    26c0:	4c83      	ldr	r4, [pc, #524]	; (28d0 <nm_spi_write_block+0x24c>)
    26c2:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    26c4:	2300      	movs	r3, #0
    26c6:	9300      	str	r3, [sp, #0]
    26c8:	2200      	movs	r2, #0
    26ca:	2100      	movs	r1, #0
    26cc:	20cf      	movs	r0, #207	; 0xcf
    26ce:	4e81      	ldr	r6, [pc, #516]	; (28d4 <nm_spi_write_block+0x250>)
    26d0:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    26d2:	20cf      	movs	r0, #207	; 0xcf
    26d4:	4b80      	ldr	r3, [pc, #512]	; (28d8 <nm_spi_write_block+0x254>)
    26d6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    26d8:	4a80      	ldr	r2, [pc, #512]	; (28dc <nm_spi_write_block+0x258>)
    26da:	4978      	ldr	r1, [pc, #480]	; (28bc <nm_spi_write_block+0x238>)
    26dc:	4878      	ldr	r0, [pc, #480]	; (28c0 <nm_spi_write_block+0x23c>)
    26de:	4e79      	ldr	r6, [pc, #484]	; (28c4 <nm_spi_write_block+0x240>)
    26e0:	47b0      	blx	r6
    26e2:	9b03      	ldr	r3, [sp, #12]
    26e4:	9a04      	ldr	r2, [sp, #16]
    26e6:	0029      	movs	r1, r5
    26e8:	487d      	ldr	r0, [pc, #500]	; (28e0 <nm_spi_write_block+0x25c>)
    26ea:	47b0      	blx	r6
    26ec:	200d      	movs	r0, #13
    26ee:	4b77      	ldr	r3, [pc, #476]	; (28cc <nm_spi_write_block+0x248>)
    26f0:	4798      	blx	r3
		nm_bsp_sleep(1);
    26f2:	2001      	movs	r0, #1
    26f4:	47a0      	blx	r4
    26f6:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    26f8:	2d00      	cmp	r5, #0
    26fa:	d100      	bne.n	26fe <nm_spi_write_block+0x7a>
    26fc:	e0d5      	b.n	28aa <nm_spi_write_block+0x226>
	if (size == 1)
    26fe:	9b03      	ldr	r3, [sp, #12]
    2700:	2b01      	cmp	r3, #1
    2702:	d0ce      	beq.n	26a2 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2704:	2300      	movs	r3, #0
    2706:	9300      	str	r3, [sp, #0]
    2708:	9b03      	ldr	r3, [sp, #12]
    270a:	2200      	movs	r2, #0
    270c:	9e04      	ldr	r6, [sp, #16]
    270e:	0031      	movs	r1, r6
    2710:	20c7      	movs	r0, #199	; 0xc7
    2712:	4c70      	ldr	r4, [pc, #448]	; (28d4 <nm_spi_write_block+0x250>)
    2714:	47a0      	blx	r4
	if (result != N_OK) {
    2716:	2801      	cmp	r0, #1
    2718:	d1c6      	bne.n	26a8 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    271a:	20c7      	movs	r0, #199	; 0xc7
    271c:	4b6e      	ldr	r3, [pc, #440]	; (28d8 <nm_spi_write_block+0x254>)
    271e:	4798      	blx	r3
	if (result != N_OK) {
    2720:	2801      	cmp	r0, #1
    2722:	d00c      	beq.n	273e <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2724:	22f4      	movs	r2, #244	; 0xf4
    2726:	0092      	lsls	r2, r2, #2
    2728:	4964      	ldr	r1, [pc, #400]	; (28bc <nm_spi_write_block+0x238>)
    272a:	4865      	ldr	r0, [pc, #404]	; (28c0 <nm_spi_write_block+0x23c>)
    272c:	4c65      	ldr	r4, [pc, #404]	; (28c4 <nm_spi_write_block+0x240>)
    272e:	47a0      	blx	r4
    2730:	9904      	ldr	r1, [sp, #16]
    2732:	486c      	ldr	r0, [pc, #432]	; (28e4 <nm_spi_write_block+0x260>)
    2734:	47a0      	blx	r4
    2736:	200d      	movs	r0, #13
    2738:	4b64      	ldr	r3, [pc, #400]	; (28cc <nm_spi_write_block+0x248>)
    273a:	4798      	blx	r3
    273c:	e7bf      	b.n	26be <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    273e:	2200      	movs	r2, #0
    2740:	ab07      	add	r3, sp, #28
    2742:	801a      	strh	r2, [r3, #0]
    2744:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    2746:	2600      	movs	r6, #0
				order = 0x1;
    2748:	46a8      	mov	r8, r5
    274a:	0035      	movs	r5, r6
    274c:	0026      	movs	r6, r4
    274e:	e021      	b.n	2794 <nm_spi_write_block+0x110>
				order = 0x2;
    2750:	2300      	movs	r3, #0
    2752:	42b7      	cmp	r7, r6
    2754:	415b      	adcs	r3, r3
    2756:	3302      	adds	r3, #2
		cmd |= order;
    2758:	200b      	movs	r0, #11
    275a:	aa04      	add	r2, sp, #16
    275c:	4694      	mov	ip, r2
    275e:	4460      	add	r0, ip
    2760:	2210      	movs	r2, #16
    2762:	4252      	negs	r2, r2
    2764:	4313      	orrs	r3, r2
    2766:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2768:	2101      	movs	r1, #1
    276a:	4b5f      	ldr	r3, [pc, #380]	; (28e8 <nm_spi_write_block+0x264>)
    276c:	4798      	blx	r3
    276e:	2800      	cmp	r0, #0
    2770:	d11d      	bne.n	27ae <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2772:	465b      	mov	r3, fp
    2774:	1958      	adds	r0, r3, r5
    2776:	0021      	movs	r1, r4
    2778:	4b5b      	ldr	r3, [pc, #364]	; (28e8 <nm_spi_write_block+0x264>)
    277a:	4798      	blx	r3
    277c:	2800      	cmp	r0, #0
    277e:	d130      	bne.n	27e2 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    2780:	4b5a      	ldr	r3, [pc, #360]	; (28ec <nm_spi_write_block+0x268>)
    2782:	781b      	ldrb	r3, [r3, #0]
    2784:	2b00      	cmp	r3, #0
    2786:	d039      	beq.n	27fc <nm_spi_write_block+0x178>
		ix += nbytes;
    2788:	1965      	adds	r5, r4, r5
    278a:	b22d      	sxth	r5, r5
		sz -= nbytes;
    278c:	1b36      	subs	r6, r6, r4
    278e:	b2b6      	uxth	r6, r6
	} while (sz);
    2790:	2e00      	cmp	r6, #0
    2792:	d053      	beq.n	283c <nm_spi_write_block+0x1b8>
    2794:	1c34      	adds	r4, r6, #0
    2796:	42be      	cmp	r6, r7
    2798:	d901      	bls.n	279e <nm_spi_write_block+0x11a>
    279a:	466b      	mov	r3, sp
    279c:	8adc      	ldrh	r4, [r3, #22]
    279e:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    27a0:	2d00      	cmp	r5, #0
    27a2:	d1d5      	bne.n	2750 <nm_spi_write_block+0xcc>
				order = 0x3;
    27a4:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    27a6:	42be      	cmp	r6, r7
    27a8:	d9d6      	bls.n	2758 <nm_spi_write_block+0xd4>
				order = 0x1;
    27aa:	3b02      	subs	r3, #2
    27ac:	e7d4      	b.n	2758 <nm_spi_write_block+0xd4>
    27ae:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    27b0:	22d4      	movs	r2, #212	; 0xd4
    27b2:	0092      	lsls	r2, r2, #2
    27b4:	494e      	ldr	r1, [pc, #312]	; (28f0 <nm_spi_write_block+0x26c>)
    27b6:	4842      	ldr	r0, [pc, #264]	; (28c0 <nm_spi_write_block+0x23c>)
    27b8:	4b42      	ldr	r3, [pc, #264]	; (28c4 <nm_spi_write_block+0x240>)
    27ba:	4798      	blx	r3
    27bc:	484d      	ldr	r0, [pc, #308]	; (28f4 <nm_spi_write_block+0x270>)
    27be:	4b4e      	ldr	r3, [pc, #312]	; (28f8 <nm_spi_write_block+0x274>)
    27c0:	4798      	blx	r3
    27c2:	200d      	movs	r0, #13
    27c4:	4b41      	ldr	r3, [pc, #260]	; (28cc <nm_spi_write_block+0x248>)
    27c6:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    27c8:	22f8      	movs	r2, #248	; 0xf8
    27ca:	0092      	lsls	r2, r2, #2
    27cc:	493b      	ldr	r1, [pc, #236]	; (28bc <nm_spi_write_block+0x238>)
    27ce:	483c      	ldr	r0, [pc, #240]	; (28c0 <nm_spi_write_block+0x23c>)
    27d0:	4b3c      	ldr	r3, [pc, #240]	; (28c4 <nm_spi_write_block+0x240>)
    27d2:	4798      	blx	r3
    27d4:	4849      	ldr	r0, [pc, #292]	; (28fc <nm_spi_write_block+0x278>)
    27d6:	4b48      	ldr	r3, [pc, #288]	; (28f8 <nm_spi_write_block+0x274>)
    27d8:	4798      	blx	r3
    27da:	200d      	movs	r0, #13
    27dc:	4b3b      	ldr	r3, [pc, #236]	; (28cc <nm_spi_write_block+0x248>)
    27de:	4798      	blx	r3
    27e0:	e76d      	b.n	26be <nm_spi_write_block+0x3a>
    27e2:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    27e4:	4a46      	ldr	r2, [pc, #280]	; (2900 <nm_spi_write_block+0x27c>)
    27e6:	4942      	ldr	r1, [pc, #264]	; (28f0 <nm_spi_write_block+0x26c>)
    27e8:	4835      	ldr	r0, [pc, #212]	; (28c0 <nm_spi_write_block+0x23c>)
    27ea:	4b36      	ldr	r3, [pc, #216]	; (28c4 <nm_spi_write_block+0x240>)
    27ec:	4798      	blx	r3
    27ee:	4845      	ldr	r0, [pc, #276]	; (2904 <nm_spi_write_block+0x280>)
    27f0:	4b41      	ldr	r3, [pc, #260]	; (28f8 <nm_spi_write_block+0x274>)
    27f2:	4798      	blx	r3
    27f4:	200d      	movs	r0, #13
    27f6:	4b35      	ldr	r3, [pc, #212]	; (28cc <nm_spi_write_block+0x248>)
    27f8:	4798      	blx	r3
    27fa:	e7e5      	b.n	27c8 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    27fc:	2102      	movs	r1, #2
    27fe:	a807      	add	r0, sp, #28
    2800:	4b39      	ldr	r3, [pc, #228]	; (28e8 <nm_spi_write_block+0x264>)
    2802:	4798      	blx	r3
    2804:	2800      	cmp	r0, #0
    2806:	d0bf      	beq.n	2788 <nm_spi_write_block+0x104>
    2808:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    280a:	4a3f      	ldr	r2, [pc, #252]	; (2908 <nm_spi_write_block+0x284>)
    280c:	4938      	ldr	r1, [pc, #224]	; (28f0 <nm_spi_write_block+0x26c>)
    280e:	482c      	ldr	r0, [pc, #176]	; (28c0 <nm_spi_write_block+0x23c>)
    2810:	4b2c      	ldr	r3, [pc, #176]	; (28c4 <nm_spi_write_block+0x240>)
    2812:	4798      	blx	r3
    2814:	483d      	ldr	r0, [pc, #244]	; (290c <nm_spi_write_block+0x288>)
    2816:	4b38      	ldr	r3, [pc, #224]	; (28f8 <nm_spi_write_block+0x274>)
    2818:	4798      	blx	r3
    281a:	200d      	movs	r0, #13
    281c:	4b2b      	ldr	r3, [pc, #172]	; (28cc <nm_spi_write_block+0x248>)
    281e:	4798      	blx	r3
    2820:	e7d2      	b.n	27c8 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    2822:	223c      	movs	r2, #60	; 0x3c
    2824:	32ff      	adds	r2, #255	; 0xff
    2826:	493a      	ldr	r1, [pc, #232]	; (2910 <nm_spi_write_block+0x28c>)
    2828:	4825      	ldr	r0, [pc, #148]	; (28c0 <nm_spi_write_block+0x23c>)
    282a:	4b26      	ldr	r3, [pc, #152]	; (28c4 <nm_spi_write_block+0x240>)
    282c:	4798      	blx	r3
    282e:	4839      	ldr	r0, [pc, #228]	; (2914 <nm_spi_write_block+0x290>)
    2830:	4b31      	ldr	r3, [pc, #196]	; (28f8 <nm_spi_write_block+0x274>)
    2832:	4798      	blx	r3
    2834:	200d      	movs	r0, #13
    2836:	4b25      	ldr	r3, [pc, #148]	; (28cc <nm_spi_write_block+0x248>)
    2838:	4798      	blx	r3
    283a:	e027      	b.n	288c <nm_spi_write_block+0x208>
    283c:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    283e:	4b2b      	ldr	r3, [pc, #172]	; (28ec <nm_spi_write_block+0x268>)
    2840:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    2842:	1e63      	subs	r3, r4, #1
    2844:	419c      	sbcs	r4, r3
    2846:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    2848:	b2a1      	uxth	r1, r4
    284a:	a807      	add	r0, sp, #28
    284c:	4b32      	ldr	r3, [pc, #200]	; (2918 <nm_spi_write_block+0x294>)
    284e:	4798      	blx	r3
    2850:	2800      	cmp	r0, #0
    2852:	d1e6      	bne.n	2822 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    2854:	ab08      	add	r3, sp, #32
    2856:	191b      	adds	r3, r3, r4
    2858:	3b05      	subs	r3, #5
    285a:	781b      	ldrb	r3, [r3, #0]
    285c:	2b00      	cmp	r3, #0
    285e:	d106      	bne.n	286e <nm_spi_write_block+0x1ea>
    2860:	ab08      	add	r3, sp, #32
    2862:	469c      	mov	ip, r3
    2864:	4464      	add	r4, ip
    2866:	3c06      	subs	r4, #6
    2868:	7823      	ldrb	r3, [r4, #0]
    286a:	2bc3      	cmp	r3, #195	; 0xc3
    286c:	d01b      	beq.n	28a6 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    286e:	22a1      	movs	r2, #161	; 0xa1
    2870:	0052      	lsls	r2, r2, #1
    2872:	4927      	ldr	r1, [pc, #156]	; (2910 <nm_spi_write_block+0x28c>)
    2874:	4812      	ldr	r0, [pc, #72]	; (28c0 <nm_spi_write_block+0x23c>)
    2876:	4c13      	ldr	r4, [pc, #76]	; (28c4 <nm_spi_write_block+0x240>)
    2878:	47a0      	blx	r4
    287a:	a907      	add	r1, sp, #28
    287c:	788b      	ldrb	r3, [r1, #2]
    287e:	784a      	ldrb	r2, [r1, #1]
    2880:	7809      	ldrb	r1, [r1, #0]
    2882:	4826      	ldr	r0, [pc, #152]	; (291c <nm_spi_write_block+0x298>)
    2884:	47a0      	blx	r4
    2886:	200d      	movs	r0, #13
    2888:	4b10      	ldr	r3, [pc, #64]	; (28cc <nm_spi_write_block+0x248>)
    288a:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    288c:	22fa      	movs	r2, #250	; 0xfa
    288e:	0092      	lsls	r2, r2, #2
    2890:	490a      	ldr	r1, [pc, #40]	; (28bc <nm_spi_write_block+0x238>)
    2892:	480b      	ldr	r0, [pc, #44]	; (28c0 <nm_spi_write_block+0x23c>)
    2894:	4b0b      	ldr	r3, [pc, #44]	; (28c4 <nm_spi_write_block+0x240>)
    2896:	4798      	blx	r3
    2898:	4818      	ldr	r0, [pc, #96]	; (28fc <nm_spi_write_block+0x278>)
    289a:	4b17      	ldr	r3, [pc, #92]	; (28f8 <nm_spi_write_block+0x274>)
    289c:	4798      	blx	r3
    289e:	200d      	movs	r0, #13
    28a0:	4b0a      	ldr	r3, [pc, #40]	; (28cc <nm_spi_write_block+0x248>)
    28a2:	4798      	blx	r3
    28a4:	e70b      	b.n	26be <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    28a6:	2000      	movs	r0, #0
    28a8:	e001      	b.n	28ae <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    28aa:	2006      	movs	r0, #6
    28ac:	4240      	negs	r0, r0

	return s8Ret;
}
    28ae:	b009      	add	sp, #36	; 0x24
    28b0:	bc0c      	pop	{r2, r3}
    28b2:	4690      	mov	r8, r2
    28b4:	469b      	mov	fp, r3
    28b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28b8:	000003ca 	.word	0x000003ca
    28bc:	0000a468 	.word	0x0000a468
    28c0:	00009d50 	.word	0x00009d50
    28c4:	000089a5 	.word	0x000089a5
    28c8:	0000a720 	.word	0x0000a720
    28cc:	000089d9 	.word	0x000089d9
    28d0:	00000195 	.word	0x00000195
    28d4:	00001d4d 	.word	0x00001d4d
    28d8:	00001eed 	.word	0x00001eed
    28dc:	000003f2 	.word	0x000003f2
    28e0:	0000a704 	.word	0x0000a704
    28e4:	0000a750 	.word	0x0000a750
    28e8:	00001d2d 	.word	0x00001d2d
    28ec:	200000ac 	.word	0x200000ac
    28f0:	0000a448 	.word	0x0000a448
    28f4:	0000a788 	.word	0x0000a788
    28f8:	00008ac1 	.word	0x00008ac1
    28fc:	0000a87c 	.word	0x0000a87c
    2900:	00000359 	.word	0x00000359
    2904:	0000a7c0 	.word	0x0000a7c0
    2908:	00000363 	.word	0x00000363
    290c:	0000a7f4 	.word	0x0000a7f4
    2910:	0000a41c 	.word	0x0000a41c
    2914:	0000a82c 	.word	0x0000a82c
    2918:	00001ecd 	.word	0x00001ecd
    291c:	0000a84c 	.word	0x0000a84c

00002920 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2920:	b5f0      	push	{r4, r5, r6, r7, lr}
    2922:	46de      	mov	lr, fp
    2924:	4657      	mov	r7, sl
    2926:	464e      	mov	r6, r9
    2928:	4645      	mov	r5, r8
    292a:	b5e0      	push	{r5, r6, r7, lr}
    292c:	b085      	sub	sp, #20
    292e:	9001      	str	r0, [sp, #4]
    2930:	000e      	movs	r6, r1
    2932:	9202      	str	r2, [sp, #8]
    2934:	001d      	movs	r5, r3
    2936:	ab0e      	add	r3, sp, #56	; 0x38
    2938:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    293a:	2c00      	cmp	r4, #0
    293c:	d064      	beq.n	2a08 <Socket_ReadSocketData+0xe8>
    293e:	0103      	lsls	r3, r0, #4
    2940:	4935      	ldr	r1, [pc, #212]	; (2a18 <Socket_ReadSocketData+0xf8>)
    2942:	585b      	ldr	r3, [r3, r1]
    2944:	2b00      	cmp	r3, #0
    2946:	d05f      	beq.n	2a08 <Socket_ReadSocketData+0xe8>
    2948:	0101      	lsls	r1, r0, #4
    294a:	4b33      	ldr	r3, [pc, #204]	; (2a18 <Socket_ReadSocketData+0xf8>)
    294c:	185b      	adds	r3, r3, r1
    294e:	889b      	ldrh	r3, [r3, #4]
    2950:	b29b      	uxth	r3, r3
    2952:	2b00      	cmp	r3, #0
    2954:	d058      	beq.n	2a08 <Socket_ReadSocketData+0xe8>
    2956:	4b30      	ldr	r3, [pc, #192]	; (2a18 <Socket_ReadSocketData+0xf8>)
    2958:	185b      	adds	r3, r3, r1
    295a:	7a9b      	ldrb	r3, [r3, #10]
    295c:	2b01      	cmp	r3, #1
    295e:	d153      	bne.n	2a08 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    2960:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    2962:	4b2d      	ldr	r3, [pc, #180]	; (2a18 <Socket_ReadSocketData+0xf8>)
    2964:	469b      	mov	fp, r3
    2966:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    2968:	465b      	mov	r3, fp
    296a:	220a      	movs	r2, #10
    296c:	4690      	mov	r8, r2
    296e:	44d8      	add	r8, fp
    2970:	468a      	mov	sl, r1
    2972:	9500      	str	r5, [sp, #0]
    2974:	9303      	str	r3, [sp, #12]
    2976:	e015      	b.n	29a4 <Socket_ReadSocketData+0x84>
    2978:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    297a:	2301      	movs	r3, #1
    297c:	e01c      	b.n	29b8 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    297e:	3301      	adds	r3, #1
    2980:	2200      	movs	r2, #0
    2982:	2100      	movs	r1, #0
    2984:	2000      	movs	r0, #0
    2986:	4c25      	ldr	r4, [pc, #148]	; (2a1c <Socket_ReadSocketData+0xfc>)
    2988:	47a0      	blx	r4
    298a:	e03d      	b.n	2a08 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    298c:	4824      	ldr	r0, [pc, #144]	; (2a20 <Socket_ReadSocketData+0x100>)
    298e:	4d25      	ldr	r5, [pc, #148]	; (2a24 <Socket_ReadSocketData+0x104>)
    2990:	47a8      	blx	r5
    2992:	0021      	movs	r1, r4
    2994:	4824      	ldr	r0, [pc, #144]	; (2a28 <Socket_ReadSocketData+0x108>)
    2996:	47a8      	blx	r5
    2998:	200d      	movs	r0, #13
    299a:	4b24      	ldr	r3, [pc, #144]	; (2a2c <Socket_ReadSocketData+0x10c>)
    299c:	4798      	blx	r3
				break;
    299e:	e033      	b.n	2a08 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    29a0:	2c00      	cmp	r4, #0
    29a2:	d031      	beq.n	2a08 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    29a4:	465b      	mov	r3, fp
    29a6:	889b      	ldrh	r3, [r3, #4]
    29a8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    29aa:	b21b      	sxth	r3, r3
    29ac:	2b00      	cmp	r3, #0
    29ae:	dde3      	ble.n	2978 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    29b0:	9b03      	ldr	r3, [sp, #12]
    29b2:	889d      	ldrh	r5, [r3, #4]
    29b4:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    29b6:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    29b8:	4a17      	ldr	r2, [pc, #92]	; (2a18 <Socket_ReadSocketData+0xf8>)
    29ba:	4651      	mov	r1, sl
    29bc:	5889      	ldr	r1, [r1, r2]
    29be:	002a      	movs	r2, r5
    29c0:	9800      	ldr	r0, [sp, #0]
    29c2:	4f16      	ldr	r7, [pc, #88]	; (2a1c <Socket_ReadSocketData+0xfc>)
    29c4:	47b8      	blx	r7
    29c6:	2800      	cmp	r0, #0
    29c8:	d1e0      	bne.n	298c <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    29ca:	4b13      	ldr	r3, [pc, #76]	; (2a18 <Socket_ReadSocketData+0xf8>)
    29cc:	4652      	mov	r2, sl
    29ce:	58d3      	ldr	r3, [r2, r3]
    29d0:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    29d2:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    29d4:	88f3      	ldrh	r3, [r6, #6]
    29d6:	1b5b      	subs	r3, r3, r5
    29d8:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    29da:	4b15      	ldr	r3, [pc, #84]	; (2a30 <Socket_ReadSocketData+0x110>)
    29dc:	681b      	ldr	r3, [r3, #0]
    29de:	2b00      	cmp	r3, #0
    29e0:	d005      	beq.n	29ee <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    29e2:	4b13      	ldr	r3, [pc, #76]	; (2a30 <Socket_ReadSocketData+0x110>)
    29e4:	681b      	ldr	r3, [r3, #0]
    29e6:	0032      	movs	r2, r6
    29e8:	9902      	ldr	r1, [sp, #8]
    29ea:	9801      	ldr	r0, [sp, #4]
    29ec:	4798      	blx	r3
				u16ReadCount -= u16Read;
    29ee:	1b64      	subs	r4, r4, r5
    29f0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    29f2:	9b00      	ldr	r3, [sp, #0]
    29f4:	469c      	mov	ip, r3
    29f6:	44ac      	add	ip, r5
    29f8:	4663      	mov	r3, ip
    29fa:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    29fc:	4643      	mov	r3, r8
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	2b00      	cmp	r3, #0
    2a02:	d1cd      	bne.n	29a0 <Socket_ReadSocketData+0x80>
    2a04:	2c00      	cmp	r4, #0
    2a06:	d1ba      	bne.n	297e <Socket_ReadSocketData+0x5e>
	}
}
    2a08:	b005      	add	sp, #20
    2a0a:	bc3c      	pop	{r2, r3, r4, r5}
    2a0c:	4690      	mov	r8, r2
    2a0e:	4699      	mov	r9, r3
    2a10:	46a2      	mov	sl, r4
    2a12:	46ab      	mov	fp, r5
    2a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	200002f8 	.word	0x200002f8
    2a1c:	00000cc1 	.word	0x00000cc1
    2a20:	0000a080 	.word	0x0000a080
    2a24:	000089a5 	.word	0x000089a5
    2a28:	0000aae4 	.word	0x0000aae4
    2a2c:	000089d9 	.word	0x000089d9
    2a30:	200003a8 	.word	0x200003a8

00002a34 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	46d6      	mov	lr, sl
    2a38:	464f      	mov	r7, r9
    2a3a:	4646      	mov	r6, r8
    2a3c:	b5c0      	push	{r6, r7, lr}
    2a3e:	b09a      	sub	sp, #104	; 0x68
    2a40:	000d      	movs	r5, r1
    2a42:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    2a44:	2841      	cmp	r0, #65	; 0x41
    2a46:	d039      	beq.n	2abc <m2m_ip_cb+0x88>
    2a48:	2854      	cmp	r0, #84	; 0x54
    2a4a:	d037      	beq.n	2abc <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2a4c:	2842      	cmp	r0, #66	; 0x42
    2a4e:	d053      	beq.n	2af8 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    2a50:	2843      	cmp	r0, #67	; 0x43
    2a52:	d06a      	beq.n	2b2a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    2a54:	2844      	cmp	r0, #68	; 0x44
    2a56:	d100      	bne.n	2a5a <m2m_ip_cb+0x26>
    2a58:	e0af      	b.n	2bba <m2m_ip_cb+0x186>
    2a5a:	284b      	cmp	r0, #75	; 0x4b
    2a5c:	d100      	bne.n	2a60 <m2m_ip_cb+0x2c>
    2a5e:	e0ac      	b.n	2bba <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2a60:	284a      	cmp	r0, #74	; 0x4a
    2a62:	d100      	bne.n	2a66 <m2m_ip_cb+0x32>
    2a64:	e0cf      	b.n	2c06 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2a66:	2846      	cmp	r0, #70	; 0x46
    2a68:	d100      	bne.n	2a6c <m2m_ip_cb+0x38>
    2a6a:	e0e5      	b.n	2c38 <m2m_ip_cb+0x204>
    2a6c:	2848      	cmp	r0, #72	; 0x48
    2a6e:	d100      	bne.n	2a72 <m2m_ip_cb+0x3e>
    2a70:	e10e      	b.n	2c90 <m2m_ip_cb+0x25c>
    2a72:	284d      	cmp	r0, #77	; 0x4d
    2a74:	d100      	bne.n	2a78 <m2m_ip_cb+0x44>
    2a76:	e0dc      	b.n	2c32 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a78:	2845      	cmp	r0, #69	; 0x45
    2a7a:	d100      	bne.n	2a7e <m2m_ip_cb+0x4a>
    2a7c:	e12c      	b.n	2cd8 <m2m_ip_cb+0x2a4>
    2a7e:	2847      	cmp	r0, #71	; 0x47
    2a80:	d100      	bne.n	2a84 <m2m_ip_cb+0x50>
    2a82:	e14d      	b.n	2d20 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2a84:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2a86:	284c      	cmp	r0, #76	; 0x4c
    2a88:	d100      	bne.n	2a8c <m2m_ip_cb+0x58>
    2a8a:	e126      	b.n	2cda <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    2a8c:	2852      	cmp	r0, #82	; 0x52
    2a8e:	d12d      	bne.n	2aec <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    2a90:	2301      	movs	r3, #1
    2a92:	2214      	movs	r2, #20
    2a94:	a909      	add	r1, sp, #36	; 0x24
    2a96:	0020      	movs	r0, r4
    2a98:	4ca2      	ldr	r4, [pc, #648]	; (2d24 <m2m_ip_cb+0x2f0>)
    2a9a:	47a0      	blx	r4
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d125      	bne.n	2aec <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    2aa0:	4ba1      	ldr	r3, [pc, #644]	; (2d28 <m2m_ip_cb+0x2f4>)
    2aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2aa4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    2aa6:	681b      	ldr	r3, [r3, #0]
    2aa8:	2b00      	cmp	r3, #0
    2aaa:	d01f      	beq.n	2aec <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    2aac:	4b9e      	ldr	r3, [pc, #632]	; (2d28 <m2m_ip_cb+0x2f4>)
    2aae:	681c      	ldr	r4, [r3, #0]
    2ab0:	ab09      	add	r3, sp, #36	; 0x24
    2ab2:	7c1a      	ldrb	r2, [r3, #16]
    2ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2ab6:	9809      	ldr	r0, [sp, #36]	; 0x24
    2ab8:	47a0      	blx	r4
			}
		}
	}
}
    2aba:	e017      	b.n	2aec <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    2abc:	2300      	movs	r3, #0
    2abe:	2204      	movs	r2, #4
    2ac0:	a909      	add	r1, sp, #36	; 0x24
    2ac2:	0020      	movs	r0, r4
    2ac4:	4c97      	ldr	r4, [pc, #604]	; (2d24 <m2m_ip_cb+0x2f0>)
    2ac6:	47a0      	blx	r4
    2ac8:	2800      	cmp	r0, #0
    2aca:	d10f      	bne.n	2aec <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    2acc:	ab09      	add	r3, sp, #36	; 0x24
    2ace:	785a      	ldrb	r2, [r3, #1]
    2ad0:	ab05      	add	r3, sp, #20
    2ad2:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2ad4:	4b95      	ldr	r3, [pc, #596]	; (2d2c <m2m_ip_cb+0x2f8>)
    2ad6:	681b      	ldr	r3, [r3, #0]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d007      	beq.n	2aec <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2adc:	4b93      	ldr	r3, [pc, #588]	; (2d2c <m2m_ip_cb+0x2f8>)
    2ade:	681b      	ldr	r3, [r3, #0]
    2ae0:	aa09      	add	r2, sp, #36	; 0x24
    2ae2:	2000      	movs	r0, #0
    2ae4:	5610      	ldrsb	r0, [r2, r0]
    2ae6:	aa05      	add	r2, sp, #20
    2ae8:	2101      	movs	r1, #1
    2aea:	4798      	blx	r3
}
    2aec:	b01a      	add	sp, #104	; 0x68
    2aee:	bc1c      	pop	{r2, r3, r4}
    2af0:	4690      	mov	r8, r2
    2af2:	4699      	mov	r9, r3
    2af4:	46a2      	mov	sl, r4
    2af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2af8:	2300      	movs	r3, #0
    2afa:	2204      	movs	r2, #4
    2afc:	a909      	add	r1, sp, #36	; 0x24
    2afe:	0020      	movs	r0, r4
    2b00:	4c88      	ldr	r4, [pc, #544]	; (2d24 <m2m_ip_cb+0x2f0>)
    2b02:	47a0      	blx	r4
    2b04:	2800      	cmp	r0, #0
    2b06:	d1f1      	bne.n	2aec <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    2b08:	ab09      	add	r3, sp, #36	; 0x24
    2b0a:	785a      	ldrb	r2, [r3, #1]
    2b0c:	ab05      	add	r3, sp, #20
    2b0e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2b10:	4b86      	ldr	r3, [pc, #536]	; (2d2c <m2m_ip_cb+0x2f8>)
    2b12:	681b      	ldr	r3, [r3, #0]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d0e9      	beq.n	2aec <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    2b18:	4b84      	ldr	r3, [pc, #528]	; (2d2c <m2m_ip_cb+0x2f8>)
    2b1a:	681b      	ldr	r3, [r3, #0]
    2b1c:	aa09      	add	r2, sp, #36	; 0x24
    2b1e:	2000      	movs	r0, #0
    2b20:	5610      	ldrsb	r0, [r2, r0]
    2b22:	aa05      	add	r2, sp, #20
    2b24:	2102      	movs	r1, #2
    2b26:	4798      	blx	r3
    2b28:	e7e0      	b.n	2aec <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2b2a:	2300      	movs	r3, #0
    2b2c:	220c      	movs	r2, #12
    2b2e:	a905      	add	r1, sp, #20
    2b30:	0020      	movs	r0, r4
    2b32:	4c7c      	ldr	r4, [pc, #496]	; (2d24 <m2m_ip_cb+0x2f0>)
    2b34:	47a0      	blx	r4
    2b36:	2800      	cmp	r0, #0
    2b38:	d1d8      	bne.n	2aec <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    2b3a:	ab05      	add	r3, sp, #20
    2b3c:	2209      	movs	r2, #9
    2b3e:	569a      	ldrsb	r2, [r3, r2]
    2b40:	2a00      	cmp	r2, #0
    2b42:	db24      	blt.n	2b8e <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    2b44:	0018      	movs	r0, r3
    2b46:	2108      	movs	r1, #8
    2b48:	5659      	ldrsb	r1, [r3, r1]
    2b4a:	4b79      	ldr	r3, [pc, #484]	; (2d30 <m2m_ip_cb+0x2fc>)
    2b4c:	0109      	lsls	r1, r1, #4
    2b4e:	1859      	adds	r1, r3, r1
    2b50:	7ac9      	ldrb	r1, [r1, #11]
    2b52:	b2c9      	uxtb	r1, r1
    2b54:	0114      	lsls	r4, r2, #4
    2b56:	191b      	adds	r3, r3, r4
    2b58:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    2b5a:	2101      	movs	r1, #1
    2b5c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2b5e:	8941      	ldrh	r1, [r0, #10]
    2b60:	3908      	subs	r1, #8
    2b62:	b289      	uxth	r1, r1
    2b64:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    2b66:	4973      	ldr	r1, [pc, #460]	; (2d34 <m2m_ip_cb+0x300>)
    2b68:	880b      	ldrh	r3, [r1, #0]
    2b6a:	3301      	adds	r3, #1
    2b6c:	b29b      	uxth	r3, r3
    2b6e:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    2b70:	880b      	ldrh	r3, [r1, #0]
    2b72:	b29b      	uxth	r3, r3
    2b74:	2b00      	cmp	r3, #0
    2b76:	d103      	bne.n	2b80 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    2b78:	880b      	ldrh	r3, [r1, #0]
    2b7a:	3301      	adds	r3, #1
    2b7c:	b29b      	uxth	r3, r3
    2b7e:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    2b80:	4b6c      	ldr	r3, [pc, #432]	; (2d34 <m2m_ip_cb+0x300>)
    2b82:	8819      	ldrh	r1, [r3, #0]
    2b84:	b289      	uxth	r1, r1
    2b86:	0110      	lsls	r0, r2, #4
    2b88:	4b69      	ldr	r3, [pc, #420]	; (2d30 <m2m_ip_cb+0x2fc>)
    2b8a:	181b      	adds	r3, r3, r0
    2b8c:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    2b8e:	ab09      	add	r3, sp, #36	; 0x24
    2b90:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    2b92:	2202      	movs	r2, #2
    2b94:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    2b96:	aa05      	add	r2, sp, #20
    2b98:	8851      	ldrh	r1, [r2, #2]
    2b9a:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    2b9c:	9a06      	ldr	r2, [sp, #24]
    2b9e:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    2ba0:	4b62      	ldr	r3, [pc, #392]	; (2d2c <m2m_ip_cb+0x2f8>)
    2ba2:	681b      	ldr	r3, [r3, #0]
    2ba4:	2b00      	cmp	r3, #0
    2ba6:	d0a1      	beq.n	2aec <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2ba8:	4b60      	ldr	r3, [pc, #384]	; (2d2c <m2m_ip_cb+0x2f8>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	aa05      	add	r2, sp, #20
    2bae:	2008      	movs	r0, #8
    2bb0:	5610      	ldrsb	r0, [r2, r0]
    2bb2:	aa09      	add	r2, sp, #36	; 0x24
    2bb4:	2104      	movs	r1, #4
    2bb6:	4798      	blx	r3
    2bb8:	e798      	b.n	2aec <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2bba:	2300      	movs	r3, #0
    2bbc:	2204      	movs	r2, #4
    2bbe:	a909      	add	r1, sp, #36	; 0x24
    2bc0:	0020      	movs	r0, r4
    2bc2:	4c58      	ldr	r4, [pc, #352]	; (2d24 <m2m_ip_cb+0x2f0>)
    2bc4:	47a0      	blx	r4
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d000      	beq.n	2bcc <m2m_ip_cb+0x198>
    2bca:	e78f      	b.n	2aec <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    2bcc:	ab09      	add	r3, sp, #36	; 0x24
    2bce:	2000      	movs	r0, #0
    2bd0:	5618      	ldrsb	r0, [r3, r0]
    2bd2:	aa05      	add	r2, sp, #20
    2bd4:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    2bd6:	785b      	ldrb	r3, [r3, #1]
    2bd8:	b25b      	sxtb	r3, r3
    2bda:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d107      	bne.n	2bf0 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    2be0:	ab09      	add	r3, sp, #36	; 0x24
    2be2:	885b      	ldrh	r3, [r3, #2]
    2be4:	3b08      	subs	r3, #8
    2be6:	b29b      	uxth	r3, r3
    2be8:	0101      	lsls	r1, r0, #4
    2bea:	4a51      	ldr	r2, [pc, #324]	; (2d30 <m2m_ip_cb+0x2fc>)
    2bec:	1852      	adds	r2, r2, r1
    2bee:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    2bf0:	4b4e      	ldr	r3, [pc, #312]	; (2d2c <m2m_ip_cb+0x2f8>)
    2bf2:	681b      	ldr	r3, [r3, #0]
    2bf4:	2b00      	cmp	r3, #0
    2bf6:	d100      	bne.n	2bfa <m2m_ip_cb+0x1c6>
    2bf8:	e778      	b.n	2aec <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    2bfa:	4b4c      	ldr	r3, [pc, #304]	; (2d2c <m2m_ip_cb+0x2f8>)
    2bfc:	681b      	ldr	r3, [r3, #0]
    2bfe:	aa05      	add	r2, sp, #20
    2c00:	2105      	movs	r1, #5
    2c02:	4798      	blx	r3
	{
    2c04:	e772      	b.n	2aec <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    2c06:	2300      	movs	r3, #0
    2c08:	2244      	movs	r2, #68	; 0x44
    2c0a:	a909      	add	r1, sp, #36	; 0x24
    2c0c:	0020      	movs	r0, r4
    2c0e:	4c45      	ldr	r4, [pc, #276]	; (2d24 <m2m_ip_cb+0x2f0>)
    2c10:	47a0      	blx	r4
    2c12:	2800      	cmp	r0, #0
    2c14:	d000      	beq.n	2c18 <m2m_ip_cb+0x1e4>
    2c16:	e769      	b.n	2aec <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    2c18:	4b47      	ldr	r3, [pc, #284]	; (2d38 <m2m_ip_cb+0x304>)
    2c1a:	681b      	ldr	r3, [r3, #0]
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d100      	bne.n	2c22 <m2m_ip_cb+0x1ee>
    2c20:	e764      	b.n	2aec <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    2c22:	4b45      	ldr	r3, [pc, #276]	; (2d38 <m2m_ip_cb+0x304>)
    2c24:	681b      	ldr	r3, [r3, #0]
    2c26:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2c28:	9203      	str	r2, [sp, #12]
    2c2a:	0011      	movs	r1, r2
    2c2c:	a809      	add	r0, sp, #36	; 0x24
    2c2e:	4798      	blx	r3
    2c30:	e75c      	b.n	2aec <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2c32:	2306      	movs	r3, #6
    2c34:	469a      	mov	sl, r3
    2c36:	e001      	b.n	2c3c <m2m_ip_cb+0x208>
    2c38:	2306      	movs	r3, #6
    2c3a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    2c3c:	2300      	movs	r3, #0
    2c3e:	2210      	movs	r2, #16
    2c40:	a905      	add	r1, sp, #20
    2c42:	0020      	movs	r0, r4
    2c44:	4f37      	ldr	r7, [pc, #220]	; (2d24 <m2m_ip_cb+0x2f0>)
    2c46:	47b8      	blx	r7
    2c48:	2800      	cmp	r0, #0
    2c4a:	d000      	beq.n	2c4e <m2m_ip_cb+0x21a>
    2c4c:	e74e      	b.n	2aec <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    2c4e:	aa05      	add	r2, sp, #20
    2c50:	200c      	movs	r0, #12
    2c52:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    2c54:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    2c56:	0107      	lsls	r7, r0, #4
    2c58:	4935      	ldr	r1, [pc, #212]	; (2d30 <m2m_ip_cb+0x2fc>)
    2c5a:	19c9      	adds	r1, r1, r7
    2c5c:	2700      	movs	r7, #0
    2c5e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    2c60:	2608      	movs	r6, #8
    2c62:	5f97      	ldrsh	r7, [r2, r6]
    2c64:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    2c66:	8957      	ldrh	r7, [r2, #10]
    2c68:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    2c6a:	af09      	add	r7, sp, #36	; 0x24
    2c6c:	8856      	ldrh	r6, [r2, #2]
    2c6e:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    2c70:	9a06      	ldr	r2, [sp, #24]
    2c72:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2c74:	88ca      	ldrh	r2, [r1, #6]
    2c76:	b292      	uxth	r2, r2
    2c78:	4293      	cmp	r3, r2
    2c7a:	d00c      	beq.n	2c96 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    2c7c:	2d10      	cmp	r5, #16
    2c7e:	d800      	bhi.n	2c82 <m2m_ip_cb+0x24e>
    2c80:	e734      	b.n	2aec <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    2c82:	2301      	movs	r3, #1
    2c84:	2200      	movs	r2, #0
    2c86:	2100      	movs	r1, #0
    2c88:	2000      	movs	r0, #0
    2c8a:	4c26      	ldr	r4, [pc, #152]	; (2d24 <m2m_ip_cb+0x2f0>)
    2c8c:	47a0      	blx	r4
	{
    2c8e:	e72d      	b.n	2aec <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    2c90:	2309      	movs	r3, #9
    2c92:	469a      	mov	sl, r3
    2c94:	e7d2      	b.n	2c3c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    2c96:	4643      	mov	r3, r8
    2c98:	2b00      	cmp	r3, #0
    2c9a:	dd01      	ble.n	2ca0 <m2m_ip_cb+0x26c>
    2c9c:	45a8      	cmp	r8, r5
    2c9e:	db0f      	blt.n	2cc0 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    2ca0:	ab09      	add	r3, sp, #36	; 0x24
    2ca2:	4642      	mov	r2, r8
    2ca4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2ca6:	2300      	movs	r3, #0
    2ca8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2caa:	4b20      	ldr	r3, [pc, #128]	; (2d2c <m2m_ip_cb+0x2f8>)
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	2b00      	cmp	r3, #0
    2cb0:	d100      	bne.n	2cb4 <m2m_ip_cb+0x280>
    2cb2:	e71b      	b.n	2aec <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2cb4:	4b1d      	ldr	r3, [pc, #116]	; (2d2c <m2m_ip_cb+0x2f8>)
    2cb6:	681b      	ldr	r3, [r3, #0]
    2cb8:	aa09      	add	r2, sp, #36	; 0x24
    2cba:	4651      	mov	r1, sl
    2cbc:	4798      	blx	r3
    2cbe:	e715      	b.n	2aec <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    2cc0:	0023      	movs	r3, r4
    2cc2:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2cc4:	4642      	mov	r2, r8
    2cc6:	4669      	mov	r1, sp
    2cc8:	818a      	strh	r2, [r1, #12]
    2cca:	898a      	ldrh	r2, [r1, #12]
    2ccc:	9200      	str	r2, [sp, #0]
    2cce:	4652      	mov	r2, sl
    2cd0:	0039      	movs	r1, r7
    2cd2:	4c1a      	ldr	r4, [pc, #104]	; (2d3c <m2m_ip_cb+0x308>)
    2cd4:	47a0      	blx	r4
    2cd6:	e709      	b.n	2aec <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2cd8:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    2cda:	2300      	movs	r3, #0
    2cdc:	2208      	movs	r2, #8
    2cde:	a909      	add	r1, sp, #36	; 0x24
    2ce0:	0020      	movs	r0, r4
    2ce2:	4c10      	ldr	r4, [pc, #64]	; (2d24 <m2m_ip_cb+0x2f0>)
    2ce4:	47a0      	blx	r4
    2ce6:	2800      	cmp	r0, #0
    2ce8:	d000      	beq.n	2cec <m2m_ip_cb+0x2b8>
    2cea:	e6ff      	b.n	2aec <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    2cec:	ab09      	add	r3, sp, #36	; 0x24
    2cee:	2000      	movs	r0, #0
    2cf0:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    2cf2:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2cf4:	8859      	ldrh	r1, [r3, #2]
    2cf6:	ab05      	add	r3, sp, #20
    2cf8:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    2cfa:	0101      	lsls	r1, r0, #4
    2cfc:	4b0c      	ldr	r3, [pc, #48]	; (2d30 <m2m_ip_cb+0x2fc>)
    2cfe:	185b      	adds	r3, r3, r1
    2d00:	88db      	ldrh	r3, [r3, #6]
    2d02:	b29b      	uxth	r3, r3
    2d04:	429a      	cmp	r2, r3
    2d06:	d000      	beq.n	2d0a <m2m_ip_cb+0x2d6>
    2d08:	e6f0      	b.n	2aec <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    2d0a:	4b08      	ldr	r3, [pc, #32]	; (2d2c <m2m_ip_cb+0x2f8>)
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d100      	bne.n	2d14 <m2m_ip_cb+0x2e0>
    2d12:	e6eb      	b.n	2aec <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    2d14:	4b05      	ldr	r3, [pc, #20]	; (2d2c <m2m_ip_cb+0x2f8>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	aa05      	add	r2, sp, #20
    2d1a:	0029      	movs	r1, r5
    2d1c:	4798      	blx	r3
	{
    2d1e:	e6e5      	b.n	2aec <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    2d20:	2508      	movs	r5, #8
    2d22:	e7da      	b.n	2cda <m2m_ip_cb+0x2a6>
    2d24:	00000cc1 	.word	0x00000cc1
    2d28:	200003ac 	.word	0x200003ac
    2d2c:	200003a8 	.word	0x200003a8
    2d30:	200002f8 	.word	0x200002f8
    2d34:	200000ae 	.word	0x200000ae
    2d38:	200003b0 	.word	0x200003b0
    2d3c:	00002921 	.word	0x00002921

00002d40 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2d40:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    2d42:	4b0a      	ldr	r3, [pc, #40]	; (2d6c <socketInit+0x2c>)
    2d44:	781b      	ldrb	r3, [r3, #0]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d000      	beq.n	2d4c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    2d4a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2d4c:	22b0      	movs	r2, #176	; 0xb0
    2d4e:	2100      	movs	r1, #0
    2d50:	4807      	ldr	r0, [pc, #28]	; (2d70 <socketInit+0x30>)
    2d52:	4b08      	ldr	r3, [pc, #32]	; (2d74 <socketInit+0x34>)
    2d54:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    2d56:	4908      	ldr	r1, [pc, #32]	; (2d78 <socketInit+0x38>)
    2d58:	2002      	movs	r0, #2
    2d5a:	4b08      	ldr	r3, [pc, #32]	; (2d7c <socketInit+0x3c>)
    2d5c:	4798      	blx	r3
		gbSocketInit	= 1;
    2d5e:	2201      	movs	r2, #1
    2d60:	4b02      	ldr	r3, [pc, #8]	; (2d6c <socketInit+0x2c>)
    2d62:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    2d64:	2200      	movs	r2, #0
    2d66:	4b06      	ldr	r3, [pc, #24]	; (2d80 <socketInit+0x40>)
    2d68:	801a      	strh	r2, [r3, #0]
}
    2d6a:	e7ee      	b.n	2d4a <socketInit+0xa>
    2d6c:	200000ad 	.word	0x200000ad
    2d70:	200002f8 	.word	0x200002f8
    2d74:	000005a1 	.word	0x000005a1
    2d78:	00002a35 	.word	0x00002a35
    2d7c:	00000dad 	.word	0x00000dad
    2d80:	200000ae 	.word	0x200000ae

00002d84 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2d84:	4b02      	ldr	r3, [pc, #8]	; (2d90 <registerSocketCallback+0xc>)
    2d86:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2d88:	4b02      	ldr	r3, [pc, #8]	; (2d94 <registerSocketCallback+0x10>)
    2d8a:	6019      	str	r1, [r3, #0]
}
    2d8c:	4770      	bx	lr
    2d8e:	46c0      	nop			; (mov r8, r8)
    2d90:	200003a8 	.word	0x200003a8
    2d94:	200003b0 	.word	0x200003b0

00002d98 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9a:	46d6      	mov	lr, sl
    2d9c:	4647      	mov	r7, r8
    2d9e:	b580      	push	{r7, lr}
    2da0:	b089      	sub	sp, #36	; 0x24
    2da2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2da4:	2802      	cmp	r0, #2
    2da6:	d000      	beq.n	2daa <socket+0x12>
    2da8:	e09c      	b.n	2ee4 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    2daa:	2901      	cmp	r1, #1
    2dac:	d00a      	beq.n	2dc4 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    2dae:	2902      	cmp	r1, #2
    2db0:	d100      	bne.n	2db4 <socket+0x1c>
    2db2:	e070      	b.n	2e96 <socket+0xfe>
	SOCKET					sock = -1;
    2db4:	2501      	movs	r5, #1
    2db6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    2db8:	0028      	movs	r0, r5
    2dba:	b009      	add	sp, #36	; 0x24
    2dbc:	bc0c      	pop	{r2, r3}
    2dbe:	4690      	mov	r8, r2
    2dc0:	469a      	mov	sl, r3
    2dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    2dc4:	4c49      	ldr	r4, [pc, #292]	; (2eec <socket+0x154>)
    2dc6:	7827      	ldrb	r7, [r4, #0]
    2dc8:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2dca:	7826      	ldrb	r6, [r4, #0]
    2dcc:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2dce:	7820      	ldrb	r0, [r4, #0]
    2dd0:	3001      	adds	r0, #1
    2dd2:	3106      	adds	r1, #6
    2dd4:	4b46      	ldr	r3, [pc, #280]	; (2ef0 <socket+0x158>)
    2dd6:	4798      	blx	r3
    2dd8:	b2c9      	uxtb	r1, r1
    2dda:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    2ddc:	0132      	lsls	r2, r6, #4
    2dde:	4b45      	ldr	r3, [pc, #276]	; (2ef4 <socket+0x15c>)
    2de0:	189b      	adds	r3, r3, r2
    2de2:	7a9b      	ldrb	r3, [r3, #10]
    2de4:	2506      	movs	r5, #6
    2de6:	2b00      	cmp	r3, #0
    2de8:	d018      	beq.n	2e1c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    2dea:	4e40      	ldr	r6, [pc, #256]	; (2eec <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2dec:	4b40      	ldr	r3, [pc, #256]	; (2ef0 <socket+0x158>)
    2dee:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    2df0:	4b40      	ldr	r3, [pc, #256]	; (2ef4 <socket+0x15c>)
    2df2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    2df4:	7837      	ldrb	r7, [r6, #0]
    2df6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2df8:	7834      	ldrb	r4, [r6, #0]
    2dfa:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    2dfc:	7830      	ldrb	r0, [r6, #0]
    2dfe:	3001      	adds	r0, #1
    2e00:	2107      	movs	r1, #7
    2e02:	47d0      	blx	sl
    2e04:	b2c9      	uxtb	r1, r1
    2e06:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    2e08:	0123      	lsls	r3, r4, #4
    2e0a:	4443      	add	r3, r8
    2e0c:	7a9b      	ldrb	r3, [r3, #10]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d007      	beq.n	2e22 <socket+0x8a>
    2e12:	3d01      	subs	r5, #1
    2e14:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    2e16:	2d00      	cmp	r5, #0
    2e18:	d1ec      	bne.n	2df4 <socket+0x5c>
    2e1a:	e7cb      	b.n	2db4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    2e1c:	4b35      	ldr	r3, [pc, #212]	; (2ef4 <socket+0x15c>)
    2e1e:	18d4      	adds	r4, r2, r3
    2e20:	e002      	b.n	2e28 <socket+0x90>
    2e22:	0124      	lsls	r4, r4, #4
    2e24:	4b33      	ldr	r3, [pc, #204]	; (2ef4 <socket+0x15c>)
    2e26:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    2e28:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    2e2a:	2d00      	cmp	r5, #0
    2e2c:	dbc4      	blt.n	2db8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2e2e:	2210      	movs	r2, #16
    2e30:	2100      	movs	r1, #0
    2e32:	0020      	movs	r0, r4
    2e34:	4b30      	ldr	r3, [pc, #192]	; (2ef8 <socket+0x160>)
    2e36:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    2e38:	2301      	movs	r3, #1
    2e3a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    2e3c:	4a2f      	ldr	r2, [pc, #188]	; (2efc <socket+0x164>)
    2e3e:	8813      	ldrh	r3, [r2, #0]
    2e40:	3301      	adds	r3, #1
    2e42:	b29b      	uxth	r3, r3
    2e44:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    2e46:	8813      	ldrh	r3, [r2, #0]
    2e48:	b29b      	uxth	r3, r3
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	d103      	bne.n	2e56 <socket+0xbe>
				++gu16SessionID;
    2e4e:	8813      	ldrh	r3, [r2, #0]
    2e50:	3301      	adds	r3, #1
    2e52:	b29b      	uxth	r3, r3
    2e54:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    2e56:	4e29      	ldr	r6, [pc, #164]	; (2efc <socket+0x164>)
    2e58:	8833      	ldrh	r3, [r6, #0]
    2e5a:	b29b      	uxth	r3, r3
    2e5c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    2e5e:	4828      	ldr	r0, [pc, #160]	; (2f00 <socket+0x168>)
    2e60:	4f28      	ldr	r7, [pc, #160]	; (2f04 <socket+0x16c>)
    2e62:	47b8      	blx	r7
    2e64:	8832      	ldrh	r2, [r6, #0]
    2e66:	b292      	uxth	r2, r2
    2e68:	0029      	movs	r1, r5
    2e6a:	4827      	ldr	r0, [pc, #156]	; (2f08 <socket+0x170>)
    2e6c:	47b8      	blx	r7
    2e6e:	200d      	movs	r0, #13
    2e70:	4b26      	ldr	r3, [pc, #152]	; (2f0c <socket+0x174>)
    2e72:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    2e74:	9b05      	ldr	r3, [sp, #20]
    2e76:	07db      	lsls	r3, r3, #31
    2e78:	d59e      	bpl.n	2db8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    2e7a:	aa07      	add	r2, sp, #28
    2e7c:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2e7e:	2321      	movs	r3, #33	; 0x21
    2e80:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2e82:	2300      	movs	r3, #0
    2e84:	9302      	str	r3, [sp, #8]
    2e86:	9301      	str	r3, [sp, #4]
    2e88:	9300      	str	r3, [sp, #0]
    2e8a:	3304      	adds	r3, #4
    2e8c:	2150      	movs	r1, #80	; 0x50
    2e8e:	2002      	movs	r0, #2
    2e90:	4c1f      	ldr	r4, [pc, #124]	; (2f10 <socket+0x178>)
    2e92:	47a0      	blx	r4
    2e94:	e790      	b.n	2db8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    2e96:	4b1f      	ldr	r3, [pc, #124]	; (2f14 <socket+0x17c>)
    2e98:	781d      	ldrb	r5, [r3, #0]
    2e9a:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2e9c:	781c      	ldrb	r4, [r3, #0]
    2e9e:	0124      	lsls	r4, r4, #4
    2ea0:	4a1d      	ldr	r2, [pc, #116]	; (2f18 <socket+0x180>)
    2ea2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2ea4:	7819      	ldrb	r1, [r3, #0]
    2ea6:	3101      	adds	r1, #1
    2ea8:	2203      	movs	r2, #3
    2eaa:	400a      	ands	r2, r1
    2eac:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    2eae:	7aa3      	ldrb	r3, [r4, #10]
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	d014      	beq.n	2ede <socket+0x146>
    2eb4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    2eb6:	4917      	ldr	r1, [pc, #92]	; (2f14 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2eb8:	4f17      	ldr	r7, [pc, #92]	; (2f18 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2eba:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    2ebc:	780d      	ldrb	r5, [r1, #0]
    2ebe:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    2ec0:	780c      	ldrb	r4, [r1, #0]
    2ec2:	0124      	lsls	r4, r4, #4
    2ec4:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    2ec6:	780b      	ldrb	r3, [r1, #0]
    2ec8:	3301      	adds	r3, #1
    2eca:	4003      	ands	r3, r0
    2ecc:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    2ece:	7aa3      	ldrb	r3, [r4, #10]
    2ed0:	2b00      	cmp	r3, #0
    2ed2:	d004      	beq.n	2ede <socket+0x146>
    2ed4:	3a01      	subs	r2, #1
    2ed6:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    2ed8:	2a00      	cmp	r2, #0
    2eda:	d1ef      	bne.n	2ebc <socket+0x124>
    2edc:	e76a      	b.n	2db4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    2ede:	3507      	adds	r5, #7
    2ee0:	b26d      	sxtb	r5, r5
					break;
    2ee2:	e7a2      	b.n	2e2a <socket+0x92>
	SOCKET					sock = -1;
    2ee4:	2501      	movs	r5, #1
    2ee6:	426d      	negs	r5, r5
    2ee8:	e766      	b.n	2db8 <socket+0x20>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	200000b0 	.word	0x200000b0
    2ef0:	00007225 	.word	0x00007225
    2ef4:	200002f8 	.word	0x200002f8
    2ef8:	000005a1 	.word	0x000005a1
    2efc:	200000ae 	.word	0x200000ae
    2f00:	0000a080 	.word	0x0000a080
    2f04:	000089a5 	.word	0x000089a5
    2f08:	0000ab10 	.word	0x0000ab10
    2f0c:	000089d9 	.word	0x000089d9
    2f10:	000006b5 	.word	0x000006b5
    2f14:	200000b1 	.word	0x200000b1
    2f18:	20000368 	.word	0x20000368

00002f1c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2f1c:	b570      	push	{r4, r5, r6, lr}
    2f1e:	b088      	sub	sp, #32
    2f20:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2f22:	db30      	blt.n	2f86 <connect+0x6a>
    2f24:	2900      	cmp	r1, #0
    2f26:	d031      	beq.n	2f8c <connect+0x70>
    2f28:	0100      	lsls	r0, r0, #4
    2f2a:	4b1d      	ldr	r3, [pc, #116]	; (2fa0 <connect+0x84>)
    2f2c:	181b      	adds	r3, r3, r0
    2f2e:	7a9b      	ldrb	r3, [r3, #10]
    2f30:	2b01      	cmp	r3, #1
    2f32:	d12e      	bne.n	2f92 <connect+0x76>
    2f34:	2a00      	cmp	r2, #0
    2f36:	d02f      	beq.n	2f98 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f38:	4b19      	ldr	r3, [pc, #100]	; (2fa0 <connect+0x84>)
    2f3a:	181b      	adds	r3, r3, r0
    2f3c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2f3e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2f40:	07db      	lsls	r3, r3, #31
    2f42:	d505      	bpl.n	2f50 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2f44:	4b16      	ldr	r3, [pc, #88]	; (2fa0 <connect+0x84>)
    2f46:	181b      	adds	r3, r3, r0
    2f48:	7ada      	ldrb	r2, [r3, #11]
    2f4a:	ab05      	add	r3, sp, #20
    2f4c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2f4e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    2f50:	ad05      	add	r5, sp, #20
    2f52:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2f54:	2208      	movs	r2, #8
    2f56:	0028      	movs	r0, r5
    2f58:	4b12      	ldr	r3, [pc, #72]	; (2fa4 <connect+0x88>)
    2f5a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2f5c:	0124      	lsls	r4, r4, #4
    2f5e:	4b10      	ldr	r3, [pc, #64]	; (2fa0 <connect+0x84>)
    2f60:	191c      	adds	r4, r3, r4
    2f62:	88e3      	ldrh	r3, [r4, #6]
    2f64:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2f66:	2300      	movs	r3, #0
    2f68:	9302      	str	r3, [sp, #8]
    2f6a:	9301      	str	r3, [sp, #4]
    2f6c:	9300      	str	r3, [sp, #0]
    2f6e:	330c      	adds	r3, #12
    2f70:	002a      	movs	r2, r5
    2f72:	0031      	movs	r1, r6
    2f74:	2002      	movs	r0, #2
    2f76:	4c0c      	ldr	r4, [pc, #48]	; (2fa8 <connect+0x8c>)
    2f78:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2f7a:	2800      	cmp	r0, #0
    2f7c:	d001      	beq.n	2f82 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    2f7e:	2009      	movs	r0, #9
    2f80:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    2f82:	b008      	add	sp, #32
    2f84:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2f86:	2006      	movs	r0, #6
    2f88:	4240      	negs	r0, r0
    2f8a:	e7fa      	b.n	2f82 <connect+0x66>
    2f8c:	2006      	movs	r0, #6
    2f8e:	4240      	negs	r0, r0
    2f90:	e7f7      	b.n	2f82 <connect+0x66>
    2f92:	2006      	movs	r0, #6
    2f94:	4240      	negs	r0, r0
    2f96:	e7f4      	b.n	2f82 <connect+0x66>
    2f98:	2006      	movs	r0, #6
    2f9a:	4240      	negs	r0, r0
    2f9c:	e7f1      	b.n	2f82 <connect+0x66>
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	200002f8 	.word	0x200002f8
    2fa4:	0000058d 	.word	0x0000058d
    2fa8:	000006b5 	.word	0x000006b5

00002fac <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2fac:	b530      	push	{r4, r5, lr}
    2fae:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2fb0:	2800      	cmp	r0, #0
    2fb2:	db36      	blt.n	3022 <send+0x76>
    2fb4:	2900      	cmp	r1, #0
    2fb6:	d037      	beq.n	3028 <send+0x7c>
    2fb8:	23af      	movs	r3, #175	; 0xaf
    2fba:	00db      	lsls	r3, r3, #3
    2fbc:	429a      	cmp	r2, r3
    2fbe:	d836      	bhi.n	302e <send+0x82>
    2fc0:	0104      	lsls	r4, r0, #4
    2fc2:	4b1e      	ldr	r3, [pc, #120]	; (303c <send+0x90>)
    2fc4:	191b      	adds	r3, r3, r4
    2fc6:	7a9b      	ldrb	r3, [r3, #10]
    2fc8:	2b01      	cmp	r3, #1
    2fca:	d133      	bne.n	3034 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    2fcc:	ab04      	add	r3, sp, #16
    2fce:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    2fd0:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    2fd2:	0025      	movs	r5, r4
    2fd4:	4c19      	ldr	r4, [pc, #100]	; (303c <send+0x90>)
    2fd6:	1964      	adds	r4, r4, r5
    2fd8:	88e4      	ldrh	r4, [r4, #6]
    2fda:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2fdc:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    2fde:	2806      	cmp	r0, #6
    2fe0:	dd00      	ble.n	2fe4 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2fe2:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fe4:	0104      	lsls	r4, r0, #4
    2fe6:	4b15      	ldr	r3, [pc, #84]	; (303c <send+0x90>)
    2fe8:	191b      	adds	r3, r3, r4
    2fea:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    2fec:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2fee:	07e4      	lsls	r4, r4, #31
    2ff0:	d505      	bpl.n	2ffe <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    2ff2:	0100      	lsls	r0, r0, #4
    2ff4:	4b11      	ldr	r3, [pc, #68]	; (303c <send+0x90>)
    2ff6:	1818      	adds	r0, r3, r0
    2ff8:	8905      	ldrh	r5, [r0, #8]
    2ffa:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    2ffc:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    2ffe:	2080      	movs	r0, #128	; 0x80
    3000:	4318      	orrs	r0, r3
    3002:	9502      	str	r5, [sp, #8]
    3004:	9201      	str	r2, [sp, #4]
    3006:	9100      	str	r1, [sp, #0]
    3008:	2310      	movs	r3, #16
    300a:	aa04      	add	r2, sp, #16
    300c:	0001      	movs	r1, r0
    300e:	2002      	movs	r0, #2
    3010:	4c0b      	ldr	r4, [pc, #44]	; (3040 <send+0x94>)
    3012:	47a0      	blx	r4
    3014:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    3016:	2800      	cmp	r0, #0
    3018:	d000      	beq.n	301c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    301a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    301c:	0018      	movs	r0, r3
    301e:	b009      	add	sp, #36	; 0x24
    3020:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3022:	2306      	movs	r3, #6
    3024:	425b      	negs	r3, r3
    3026:	e7f9      	b.n	301c <send+0x70>
    3028:	2306      	movs	r3, #6
    302a:	425b      	negs	r3, r3
    302c:	e7f6      	b.n	301c <send+0x70>
    302e:	2306      	movs	r3, #6
    3030:	425b      	negs	r3, r3
    3032:	e7f3      	b.n	301c <send+0x70>
    3034:	2306      	movs	r3, #6
    3036:	425b      	negs	r3, r3
    3038:	e7f0      	b.n	301c <send+0x70>
    303a:	46c0      	nop			; (mov r8, r8)
    303c:	200002f8 	.word	0x200002f8
    3040:	000006b5 	.word	0x000006b5

00003044 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    3044:	b530      	push	{r4, r5, lr}
    3046:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3048:	2800      	cmp	r0, #0
    304a:	db34      	blt.n	30b6 <recv+0x72>
    304c:	2900      	cmp	r1, #0
    304e:	d035      	beq.n	30bc <recv+0x78>
    3050:	2a00      	cmp	r2, #0
    3052:	d036      	beq.n	30c2 <recv+0x7e>
    3054:	0105      	lsls	r5, r0, #4
    3056:	4c1e      	ldr	r4, [pc, #120]	; (30d0 <recv+0x8c>)
    3058:	1964      	adds	r4, r4, r5
    305a:	7aa4      	ldrb	r4, [r4, #10]
    305c:	2c01      	cmp	r4, #1
    305e:	d133      	bne.n	30c8 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3060:	4c1b      	ldr	r4, [pc, #108]	; (30d0 <recv+0x8c>)
    3062:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3064:	1964      	adds	r4, r4, r5
    3066:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    3068:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    306a:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    306c:	2900      	cmp	r1, #0
    306e:	d11d      	bne.n	30ac <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    3070:	2101      	movs	r1, #1
    3072:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3074:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    3076:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3078:	07d2      	lsls	r2, r2, #31
    307a:	d500      	bpl.n	307e <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    307c:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    307e:	2b00      	cmp	r3, #0
    3080:	d117      	bne.n	30b2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    3082:	3b01      	subs	r3, #1
    3084:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    3086:	aa04      	add	r2, sp, #16
    3088:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    308a:	0100      	lsls	r0, r0, #4
    308c:	4b10      	ldr	r3, [pc, #64]	; (30d0 <recv+0x8c>)
    308e:	1818      	adds	r0, r3, r0
    3090:	88c3      	ldrh	r3, [r0, #6]
    3092:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3094:	2300      	movs	r3, #0
    3096:	9302      	str	r3, [sp, #8]
    3098:	9301      	str	r3, [sp, #4]
    309a:	9300      	str	r3, [sp, #0]
    309c:	3308      	adds	r3, #8
    309e:	2002      	movs	r0, #2
    30a0:	4c0c      	ldr	r4, [pc, #48]	; (30d4 <recv+0x90>)
    30a2:	47a0      	blx	r4
    30a4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    30a6:	2800      	cmp	r0, #0
    30a8:	d000      	beq.n	30ac <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    30aa:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    30ac:	0010      	movs	r0, r2
    30ae:	b007      	add	sp, #28
    30b0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    30b2:	9304      	str	r3, [sp, #16]
    30b4:	e7e7      	b.n	3086 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30b6:	2206      	movs	r2, #6
    30b8:	4252      	negs	r2, r2
    30ba:	e7f7      	b.n	30ac <recv+0x68>
    30bc:	2206      	movs	r2, #6
    30be:	4252      	negs	r2, r2
    30c0:	e7f4      	b.n	30ac <recv+0x68>
    30c2:	2206      	movs	r2, #6
    30c4:	4252      	negs	r2, r2
    30c6:	e7f1      	b.n	30ac <recv+0x68>
    30c8:	2206      	movs	r2, #6
    30ca:	4252      	negs	r2, r2
    30cc:	e7ee      	b.n	30ac <recv+0x68>
    30ce:	46c0      	nop			; (mov r8, r8)
    30d0:	200002f8 	.word	0x200002f8
    30d4:	000006b5 	.word	0x000006b5

000030d8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    30d8:	b530      	push	{r4, r5, lr}
    30da:	b087      	sub	sp, #28
    30dc:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    30de:	481e      	ldr	r0, [pc, #120]	; (3158 <close+0x80>)
    30e0:	4d1e      	ldr	r5, [pc, #120]	; (315c <close+0x84>)
    30e2:	47a8      	blx	r5
    30e4:	0021      	movs	r1, r4
    30e6:	481e      	ldr	r0, [pc, #120]	; (3160 <close+0x88>)
    30e8:	47a8      	blx	r5
    30ea:	200d      	movs	r0, #13
    30ec:	4b1d      	ldr	r3, [pc, #116]	; (3164 <close+0x8c>)
    30ee:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    30f0:	2c00      	cmp	r4, #0
    30f2:	db2a      	blt.n	314a <close+0x72>
    30f4:	0122      	lsls	r2, r4, #4
    30f6:	4b1c      	ldr	r3, [pc, #112]	; (3168 <close+0x90>)
    30f8:	189b      	adds	r3, r3, r2
    30fa:	7a9b      	ldrb	r3, [r3, #10]
    30fc:	2b01      	cmp	r3, #1
    30fe:	d127      	bne.n	3150 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    3100:	a905      	add	r1, sp, #20
    3102:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    3104:	4b18      	ldr	r3, [pc, #96]	; (3168 <close+0x90>)
    3106:	189b      	adds	r3, r3, r2
    3108:	88da      	ldrh	r2, [r3, #6]
    310a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    310c:	2200      	movs	r2, #0
    310e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    3110:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3112:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    3114:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3116:	07db      	lsls	r3, r3, #31
    3118:	d500      	bpl.n	311c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    311a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    311c:	2300      	movs	r3, #0
    311e:	9302      	str	r3, [sp, #8]
    3120:	9301      	str	r3, [sp, #4]
    3122:	9300      	str	r3, [sp, #0]
    3124:	3304      	adds	r3, #4
    3126:	aa05      	add	r2, sp, #20
    3128:	2002      	movs	r0, #2
    312a:	4d10      	ldr	r5, [pc, #64]	; (316c <close+0x94>)
    312c:	47a8      	blx	r5
    312e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3130:	d001      	beq.n	3136 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    3132:	2509      	movs	r5, #9
    3134:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3136:	0124      	lsls	r4, r4, #4
    3138:	480b      	ldr	r0, [pc, #44]	; (3168 <close+0x90>)
    313a:	1820      	adds	r0, r4, r0
    313c:	2210      	movs	r2, #16
    313e:	2100      	movs	r1, #0
    3140:	4b0b      	ldr	r3, [pc, #44]	; (3170 <close+0x98>)
    3142:	4798      	blx	r3
	}
	return s8Ret;
}
    3144:	0028      	movs	r0, r5
    3146:	b007      	add	sp, #28
    3148:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    314a:	2506      	movs	r5, #6
    314c:	426d      	negs	r5, r5
    314e:	e7f9      	b.n	3144 <close+0x6c>
    3150:	2506      	movs	r5, #6
    3152:	426d      	negs	r5, r5
    3154:	e7f6      	b.n	3144 <close+0x6c>
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	0000a080 	.word	0x0000a080
    315c:	000089a5 	.word	0x000089a5
    3160:	0000aaf8 	.word	0x0000aaf8
    3164:	000089d9 	.word	0x000089d9
    3168:	200002f8 	.word	0x200002f8
    316c:	000006b5 	.word	0x000006b5
    3170:	000005a1 	.word	0x000005a1

00003174 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    3174:	b570      	push	{r4, r5, r6, lr}
    3176:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    3178:	2300      	movs	r3, #0
    317a:	9301      	str	r3, [sp, #4]
    317c:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    317e:	2100      	movs	r1, #0
    3180:	7802      	ldrb	r2, [r0, #0]
    3182:	1c44      	adds	r4, r0, #1
    3184:	3005      	adds	r0, #5
    3186:	000b      	movs	r3, r1
    3188:	e009      	b.n	319e <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    318a:	009d      	lsls	r5, r3, #2
    318c:	195b      	adds	r3, r3, r5
    318e:	005b      	lsls	r3, r3, #1
    3190:	189b      	adds	r3, r3, r2
    3192:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    3194:	0022      	movs	r2, r4
    3196:	3401      	adds	r4, #1
			if(j > 4)
    3198:	42a0      	cmp	r0, r4
    319a:	d00a      	beq.n	31b2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    319c:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    319e:	2a2e      	cmp	r2, #46	; 0x2e
    31a0:	d00a      	beq.n	31b8 <nmi_inet_addr+0x44>
    31a2:	2a00      	cmp	r2, #0
    31a4:	d00c      	beq.n	31c0 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    31a6:	3a30      	subs	r2, #48	; 0x30
    31a8:	b2d2      	uxtb	r2, r2
    31aa:	2a09      	cmp	r2, #9
    31ac:	d9ed      	bls.n	318a <nmi_inet_addr+0x16>
				return 0;
    31ae:	2000      	movs	r0, #0
    31b0:	e000      	b.n	31b4 <nmi_inet_addr+0x40>
				return 0;
    31b2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    31b4:	b002      	add	sp, #8
    31b6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    31b8:	466a      	mov	r2, sp
    31ba:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    31bc:	0020      	movs	r0, r4
    31be:	e002      	b.n	31c6 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    31c0:	466a      	mov	r2, sp
    31c2:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    31c4:	0020      	movs	r0, r4
    31c6:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    31c8:	2e04      	cmp	r6, #4
    31ca:	d1d9      	bne.n	3180 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    31cc:	2204      	movs	r2, #4
    31ce:	4669      	mov	r1, sp
    31d0:	a801      	add	r0, sp, #4
    31d2:	4b02      	ldr	r3, [pc, #8]	; (31dc <nmi_inet_addr+0x68>)
    31d4:	4798      	blx	r3
	return u32IP;
    31d6:	9801      	ldr	r0, [sp, #4]
    31d8:	e7ec      	b.n	31b4 <nmi_inet_addr+0x40>
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	0000058d 	.word	0x0000058d

000031e0 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    31e0:	b510      	push	{r4, lr}
    31e2:	b084      	sub	sp, #16
    31e4:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    31e6:	4b0b      	ldr	r3, [pc, #44]	; (3214 <gethostbyname+0x34>)
    31e8:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    31ea:	b2c3      	uxtb	r3, r0
    31ec:	2b40      	cmp	r3, #64	; 0x40
    31ee:	d80d      	bhi.n	320c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    31f0:	23ff      	movs	r3, #255	; 0xff
    31f2:	4003      	ands	r3, r0
    31f4:	3301      	adds	r3, #1
    31f6:	2200      	movs	r2, #0
    31f8:	9202      	str	r2, [sp, #8]
    31fa:	9201      	str	r2, [sp, #4]
    31fc:	9200      	str	r2, [sp, #0]
    31fe:	0022      	movs	r2, r4
    3200:	214a      	movs	r1, #74	; 0x4a
    3202:	2002      	movs	r0, #2
    3204:	4c04      	ldr	r4, [pc, #16]	; (3218 <gethostbyname+0x38>)
    3206:	47a0      	blx	r4
	}
	return s8Err;
}
    3208:	b004      	add	sp, #16
    320a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    320c:	2006      	movs	r0, #6
    320e:	4240      	negs	r0, r0
    3210:	e7fa      	b.n	3208 <gethostbyname+0x28>
    3212:	46c0      	nop			; (mov r8, r8)
    3214:	000005b1 	.word	0x000005b1
    3218:	000006b5 	.word	0x000006b5

0000321c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    321c:	b570      	push	{r4, r5, r6, lr}
    321e:	b082      	sub	sp, #8
    3220:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    3222:	4b2a      	ldr	r3, [pc, #168]	; (32cc <spi_flash_enable+0xb0>)
    3224:	4798      	blx	r3
    3226:	0500      	lsls	r0, r0, #20
    3228:	0d00      	lsrs	r0, r0, #20
    322a:	4b29      	ldr	r3, [pc, #164]	; (32d0 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    322c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    322e:	4298      	cmp	r0, r3
    3230:	d802      	bhi.n	3238 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    3232:	0028      	movs	r0, r5
    3234:	b002      	add	sp, #8
    3236:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    3238:	a901      	add	r1, sp, #4
    323a:	4826      	ldr	r0, [pc, #152]	; (32d4 <spi_flash_enable+0xb8>)
    323c:	4b26      	ldr	r3, [pc, #152]	; (32d8 <spi_flash_enable+0xbc>)
    323e:	4798      	blx	r3
    3240:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    3242:	d1f6      	bne.n	3232 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    3244:	4b25      	ldr	r3, [pc, #148]	; (32dc <spi_flash_enable+0xc0>)
    3246:	9a01      	ldr	r2, [sp, #4]
    3248:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    324a:	4925      	ldr	r1, [pc, #148]	; (32e0 <spi_flash_enable+0xc4>)
    324c:	4319      	orrs	r1, r3
    324e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3250:	4820      	ldr	r0, [pc, #128]	; (32d4 <spi_flash_enable+0xb8>)
    3252:	4b24      	ldr	r3, [pc, #144]	; (32e4 <spi_flash_enable+0xc8>)
    3254:	4798      	blx	r3
		if(enable) {
    3256:	2c00      	cmp	r4, #0
    3258:	d020      	beq.n	329c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    325a:	2100      	movs	r1, #0
    325c:	4822      	ldr	r0, [pc, #136]	; (32e8 <spi_flash_enable+0xcc>)
    325e:	4c21      	ldr	r4, [pc, #132]	; (32e4 <spi_flash_enable+0xc8>)
    3260:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    3262:	21ab      	movs	r1, #171	; 0xab
    3264:	4821      	ldr	r0, [pc, #132]	; (32ec <spi_flash_enable+0xd0>)
    3266:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    3268:	2101      	movs	r1, #1
    326a:	4821      	ldr	r0, [pc, #132]	; (32f0 <spi_flash_enable+0xd4>)
    326c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    326e:	2100      	movs	r1, #0
    3270:	4820      	ldr	r0, [pc, #128]	; (32f4 <spi_flash_enable+0xd8>)
    3272:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    3274:	2181      	movs	r1, #129	; 0x81
    3276:	4820      	ldr	r0, [pc, #128]	; (32f8 <spi_flash_enable+0xdc>)
    3278:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    327a:	4e20      	ldr	r6, [pc, #128]	; (32fc <spi_flash_enable+0xe0>)
    327c:	4c20      	ldr	r4, [pc, #128]	; (3300 <spi_flash_enable+0xe4>)
    327e:	0030      	movs	r0, r6
    3280:	47a0      	blx	r4
    3282:	2801      	cmp	r0, #1
    3284:	d1fb      	bne.n	327e <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    3286:	4b15      	ldr	r3, [pc, #84]	; (32dc <spi_flash_enable+0xc0>)
    3288:	9a01      	ldr	r2, [sp, #4]
    328a:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    328c:	2180      	movs	r1, #128	; 0x80
    328e:	0249      	lsls	r1, r1, #9
    3290:	4319      	orrs	r1, r3
    3292:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    3294:	480f      	ldr	r0, [pc, #60]	; (32d4 <spi_flash_enable+0xb8>)
    3296:	4b13      	ldr	r3, [pc, #76]	; (32e4 <spi_flash_enable+0xc8>)
    3298:	4798      	blx	r3
    329a:	e7ca      	b.n	3232 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    329c:	2100      	movs	r1, #0
    329e:	4812      	ldr	r0, [pc, #72]	; (32e8 <spi_flash_enable+0xcc>)
    32a0:	4c10      	ldr	r4, [pc, #64]	; (32e4 <spi_flash_enable+0xc8>)
    32a2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    32a4:	21b9      	movs	r1, #185	; 0xb9
    32a6:	4811      	ldr	r0, [pc, #68]	; (32ec <spi_flash_enable+0xd0>)
    32a8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    32aa:	2101      	movs	r1, #1
    32ac:	4810      	ldr	r0, [pc, #64]	; (32f0 <spi_flash_enable+0xd4>)
    32ae:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    32b0:	2100      	movs	r1, #0
    32b2:	4810      	ldr	r0, [pc, #64]	; (32f4 <spi_flash_enable+0xd8>)
    32b4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    32b6:	2181      	movs	r1, #129	; 0x81
    32b8:	480f      	ldr	r0, [pc, #60]	; (32f8 <spi_flash_enable+0xdc>)
    32ba:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    32bc:	4e0f      	ldr	r6, [pc, #60]	; (32fc <spi_flash_enable+0xe0>)
    32be:	4c10      	ldr	r4, [pc, #64]	; (3300 <spi_flash_enable+0xe4>)
    32c0:	0030      	movs	r0, r6
    32c2:	47a0      	blx	r4
    32c4:	2801      	cmp	r0, #1
    32c6:	d1fb      	bne.n	32c0 <spi_flash_enable+0xa4>
    32c8:	e7dd      	b.n	3286 <spi_flash_enable+0x6a>
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	00001599 	.word	0x00001599
    32d0:	0000039f 	.word	0x0000039f
    32d4:	00001410 	.word	0x00001410
    32d8:	000019e9 	.word	0x000019e9
    32dc:	f8888fff 	.word	0xf8888fff
    32e0:	01111000 	.word	0x01111000
    32e4:	000019f5 	.word	0x000019f5
    32e8:	00010208 	.word	0x00010208
    32ec:	0001020c 	.word	0x0001020c
    32f0:	00010214 	.word	0x00010214
    32f4:	0001021c 	.word	0x0001021c
    32f8:	00010204 	.word	0x00010204
    32fc:	00010218 	.word	0x00010218
    3300:	000019dd 	.word	0x000019dd

00003304 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3304:	4b0c      	ldr	r3, [pc, #48]	; (3338 <cpu_irq_enter_critical+0x34>)
    3306:	681b      	ldr	r3, [r3, #0]
    3308:	2b00      	cmp	r3, #0
    330a:	d106      	bne.n	331a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    330c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    3310:	2b00      	cmp	r3, #0
    3312:	d007      	beq.n	3324 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3314:	2200      	movs	r2, #0
    3316:	4b09      	ldr	r3, [pc, #36]	; (333c <cpu_irq_enter_critical+0x38>)
    3318:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    331a:	4a07      	ldr	r2, [pc, #28]	; (3338 <cpu_irq_enter_critical+0x34>)
    331c:	6813      	ldr	r3, [r2, #0]
    331e:	3301      	adds	r3, #1
    3320:	6013      	str	r3, [r2, #0]
}
    3322:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    3324:	b672      	cpsid	i
    3326:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    332a:	2200      	movs	r2, #0
    332c:	4b04      	ldr	r3, [pc, #16]	; (3340 <cpu_irq_enter_critical+0x3c>)
    332e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3330:	3201      	adds	r2, #1
    3332:	4b02      	ldr	r3, [pc, #8]	; (333c <cpu_irq_enter_critical+0x38>)
    3334:	701a      	strb	r2, [r3, #0]
    3336:	e7f0      	b.n	331a <cpu_irq_enter_critical+0x16>
    3338:	200000b4 	.word	0x200000b4
    333c:	200000b8 	.word	0x200000b8
    3340:	2000000a 	.word	0x2000000a

00003344 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3344:	4b08      	ldr	r3, [pc, #32]	; (3368 <cpu_irq_leave_critical+0x24>)
    3346:	681a      	ldr	r2, [r3, #0]
    3348:	3a01      	subs	r2, #1
    334a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	2b00      	cmp	r3, #0
    3350:	d109      	bne.n	3366 <cpu_irq_leave_critical+0x22>
    3352:	4b06      	ldr	r3, [pc, #24]	; (336c <cpu_irq_leave_critical+0x28>)
    3354:	781b      	ldrb	r3, [r3, #0]
    3356:	2b00      	cmp	r3, #0
    3358:	d005      	beq.n	3366 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    335a:	2201      	movs	r2, #1
    335c:	4b04      	ldr	r3, [pc, #16]	; (3370 <cpu_irq_leave_critical+0x2c>)
    335e:	701a      	strb	r2, [r3, #0]
    3360:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3364:	b662      	cpsie	i
	}
}
    3366:	4770      	bx	lr
    3368:	200000b4 	.word	0x200000b4
    336c:	200000b8 	.word	0x200000b8
    3370:	2000000a 	.word	0x2000000a

00003374 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    3374:	b5f0      	push	{r4, r5, r6, r7, lr}
    3376:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    3378:	ac01      	add	r4, sp, #4
    337a:	2501      	movs	r5, #1
    337c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    337e:	2700      	movs	r7, #0
    3380:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    3382:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    3384:	0021      	movs	r1, r4
    3386:	2017      	movs	r0, #23
    3388:	4e06      	ldr	r6, [pc, #24]	; (33a4 <system_board_init+0x30>)
    338a:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    338c:	2280      	movs	r2, #128	; 0x80
    338e:	0412      	lsls	r2, r2, #16
    3390:	4b05      	ldr	r3, [pc, #20]	; (33a8 <system_board_init+0x34>)
    3392:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    3394:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    3396:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    3398:	0021      	movs	r1, r4
    339a:	2037      	movs	r0, #55	; 0x37
    339c:	47b0      	blx	r6
}
    339e:	b003      	add	sp, #12
    33a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	00003aad 	.word	0x00003aad
    33a8:	41004400 	.word	0x41004400

000033ac <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    33ac:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    33ae:	2200      	movs	r2, #0
    33b0:	2300      	movs	r3, #0
    33b2:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    33b4:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    33b6:	2100      	movs	r1, #0
    33b8:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    33ba:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    33bc:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    33be:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
    33c0:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    33c2:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    33c4:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    33c6:	24c0      	movs	r4, #192	; 0xc0
    33c8:	0164      	lsls	r4, r4, #5
    33ca:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    33cc:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    33ce:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    33d0:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    33d2:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    33d4:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    33d6:	242a      	movs	r4, #42	; 0x2a
    33d8:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
    33da:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    33dc:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    33de:	3c06      	subs	r4, #6
    33e0:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    33e2:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    33e4:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    33e6:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    33e8:	232b      	movs	r3, #43	; 0x2b
    33ea:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
    33ec:	3301      	adds	r3, #1
    33ee:	54c1      	strb	r1, [r0, r3]
}
    33f0:	bd10      	pop	{r4, pc}
	...

000033f4 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    33f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33f6:	46d6      	mov	lr, sl
    33f8:	464f      	mov	r7, r9
    33fa:	4646      	mov	r6, r8
    33fc:	b5c0      	push	{r6, r7, lr}
    33fe:	b096      	sub	sp, #88	; 0x58
    3400:	0007      	movs	r7, r0
    3402:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    3404:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3406:	4ac6      	ldr	r2, [pc, #792]	; (3720 <adc_init+0x32c>)
    3408:	6a10      	ldr	r0, [r2, #32]
    340a:	2380      	movs	r3, #128	; 0x80
    340c:	025b      	lsls	r3, r3, #9
    340e:	4303      	orrs	r3, r0
    3410:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    3412:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    3414:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    3416:	07db      	lsls	r3, r3, #31
    3418:	d505      	bpl.n	3426 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
    341a:	b016      	add	sp, #88	; 0x58
    341c:	bc1c      	pop	{r2, r3, r4}
    341e:	4690      	mov	r8, r2
    3420:	4699      	mov	r9, r3
    3422:	46a2      	mov	sl, r4
    3424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    3426:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
    3428:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    342a:	079b      	lsls	r3, r3, #30
    342c:	d4f5      	bmi.n	341a <adc_init+0x26>
	module_inst->reference = config->reference;
    342e:	7873      	ldrb	r3, [r6, #1]
    3430:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    3432:	2b00      	cmp	r3, #0
    3434:	d104      	bne.n	3440 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    3436:	4abb      	ldr	r2, [pc, #748]	; (3724 <adc_init+0x330>)
    3438:	6c13      	ldr	r3, [r2, #64]	; 0x40
    343a:	2104      	movs	r1, #4
    343c:	430b      	orrs	r3, r1
    343e:	6413      	str	r3, [r2, #64]	; 0x40
		module_inst->callback[i] = NULL;
    3440:	2300      	movs	r3, #0
    3442:	60bb      	str	r3, [r7, #8]
    3444:	60fb      	str	r3, [r7, #12]
    3446:	613b      	str	r3, [r7, #16]
	module_inst->registered_callback_mask = 0;
    3448:	76bb      	strb	r3, [r7, #26]
	module_inst->enabled_callback_mask = 0;
    344a:	76fb      	strb	r3, [r7, #27]
	module_inst->remaining_conversions = 0;
    344c:	833b      	strh	r3, [r7, #24]
	module_inst->job_status = STATUS_OK;
    344e:	773b      	strb	r3, [r7, #28]
	_adc_instances[0] = module_inst;
    3450:	4bb5      	ldr	r3, [pc, #724]	; (3728 <adc_init+0x334>)
    3452:	601f      	str	r7, [r3, #0]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    3454:	232a      	movs	r3, #42	; 0x2a
    3456:	5cf3      	ldrb	r3, [r6, r3]
    3458:	2b00      	cmp	r3, #0
    345a:	d105      	bne.n	3468 <adc_init+0x74>
    345c:	7d33      	ldrb	r3, [r6, #20]
    345e:	2b00      	cmp	r3, #0
    3460:	d102      	bne.n	3468 <adc_init+0x74>
		module_inst->software_trigger = true;
    3462:	3301      	adds	r3, #1
    3464:	777b      	strb	r3, [r7, #29]
    3466:	e001      	b.n	346c <adc_init+0x78>
		module_inst->software_trigger = false;
    3468:	2300      	movs	r3, #0
    346a:	777b      	strb	r3, [r7, #29]
	Adc *const adc_module = module_inst->hw;
    346c:	683b      	ldr	r3, [r7, #0]
    346e:	4698      	mov	r8, r3
	gclk_chan_conf.source_generator = config->clock_source;
    3470:	7833      	ldrb	r3, [r6, #0]
    3472:	466a      	mov	r2, sp
    3474:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    3476:	4669      	mov	r1, sp
    3478:	201e      	movs	r0, #30
    347a:	4bac      	ldr	r3, [pc, #688]	; (372c <adc_init+0x338>)
    347c:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    347e:	201e      	movs	r0, #30
    3480:	4bab      	ldr	r3, [pc, #684]	; (3730 <adc_init+0x33c>)
    3482:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    3484:	232c      	movs	r3, #44	; 0x2c
    3486:	5cf2      	ldrb	r2, [r6, r3]
    3488:	2a00      	cmp	r2, #0
    348a:	d054      	beq.n	3536 <adc_init+0x142>
		uint8_t offset = config->pin_scan.offset_start_scan;
    348c:	3b01      	subs	r3, #1
    348e:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
    3490:	7b33      	ldrb	r3, [r6, #12]
    3492:	18eb      	adds	r3, r5, r3
    3494:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
    3496:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
    3498:	b2c9      	uxtb	r1, r1
    349a:	428b      	cmp	r3, r1
    349c:	d221      	bcs.n	34e2 <adc_init+0xee>
    349e:	1952      	adds	r2, r2, r5
    34a0:	b2d3      	uxtb	r3, r2
    34a2:	4699      	mov	r9, r3
	const uint32_t pinmapping[] = {
    34a4:	4ba3      	ldr	r3, [pc, #652]	; (3734 <adc_init+0x340>)
    34a6:	469a      	mov	sl, r3
    34a8:	e003      	b.n	34b2 <adc_init+0xbe>
			offset++;
    34aa:	3501      	adds	r5, #1
    34ac:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
    34ae:	454d      	cmp	r5, r9
    34b0:	d017      	beq.n	34e2 <adc_init+0xee>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    34b2:	240f      	movs	r4, #15
    34b4:	402c      	ands	r4, r5
    34b6:	7b33      	ldrb	r3, [r6, #12]
    34b8:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
    34ba:	2250      	movs	r2, #80	; 0x50
    34bc:	499e      	ldr	r1, [pc, #632]	; (3738 <adc_init+0x344>)
    34be:	a802      	add	r0, sp, #8
    34c0:	47d0      	blx	sl
	if (pin <= ADC_EXTCHANNEL_MSB) {
    34c2:	2c13      	cmp	r4, #19
    34c4:	d8f1      	bhi.n	34aa <adc_init+0xb6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    34c6:	00a4      	lsls	r4, r4, #2
    34c8:	ab02      	add	r3, sp, #8
    34ca:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    34cc:	a901      	add	r1, sp, #4
    34ce:	2300      	movs	r3, #0
    34d0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    34d2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    34d4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    34d6:	3301      	adds	r3, #1
    34d8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    34da:	b2c0      	uxtb	r0, r0
    34dc:	4b97      	ldr	r3, [pc, #604]	; (373c <adc_init+0x348>)
    34de:	4798      	blx	r3
    34e0:	e7e3      	b.n	34aa <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
    34e2:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    34e4:	2250      	movs	r2, #80	; 0x50
    34e6:	4994      	ldr	r1, [pc, #592]	; (3738 <adc_init+0x344>)
    34e8:	a802      	add	r0, sp, #8
    34ea:	4b92      	ldr	r3, [pc, #584]	; (3734 <adc_init+0x340>)
    34ec:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    34ee:	2c13      	cmp	r4, #19
    34f0:	d913      	bls.n	351a <adc_init+0x126>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    34f2:	7d73      	ldrb	r3, [r6, #21]
    34f4:	009b      	lsls	r3, r3, #2
    34f6:	b2db      	uxtb	r3, r3
    34f8:	4642      	mov	r2, r8
    34fa:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    34fc:	7db3      	ldrb	r3, [r6, #22]
    34fe:	01db      	lsls	r3, r3, #7
    3500:	7872      	ldrb	r2, [r6, #1]
    3502:	4313      	orrs	r3, r2
    3504:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    3506:	4642      	mov	r2, r8
    3508:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
    350a:	7933      	ldrb	r3, [r6, #4]
    350c:	2b34      	cmp	r3, #52	; 0x34
    350e:	d900      	bls.n	3512 <adc_init+0x11e>
    3510:	e17b      	b.n	380a <adc_init+0x416>
    3512:	009b      	lsls	r3, r3, #2
    3514:	4a8a      	ldr	r2, [pc, #552]	; (3740 <adc_init+0x34c>)
    3516:	58d3      	ldr	r3, [r2, r3]
    3518:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    351a:	00a4      	lsls	r4, r4, #2
    351c:	ab02      	add	r3, sp, #8
    351e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3520:	a901      	add	r1, sp, #4
    3522:	2300      	movs	r3, #0
    3524:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3526:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3528:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    352a:	3301      	adds	r3, #1
    352c:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    352e:	b2c0      	uxtb	r0, r0
    3530:	4b82      	ldr	r3, [pc, #520]	; (373c <adc_init+0x348>)
    3532:	4798      	blx	r3
    3534:	e7dd      	b.n	34f2 <adc_init+0xfe>
		_adc_configure_ain_pin(config->positive_input);
    3536:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
    3538:	2250      	movs	r2, #80	; 0x50
    353a:	497f      	ldr	r1, [pc, #508]	; (3738 <adc_init+0x344>)
    353c:	a802      	add	r0, sp, #8
    353e:	4b7d      	ldr	r3, [pc, #500]	; (3734 <adc_init+0x340>)
    3540:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    3542:	2c13      	cmp	r4, #19
    3544:	d915      	bls.n	3572 <adc_init+0x17e>
		_adc_configure_ain_pin(config->negative_input);
    3546:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
    3548:	2250      	movs	r2, #80	; 0x50
    354a:	497b      	ldr	r1, [pc, #492]	; (3738 <adc_init+0x344>)
    354c:	a802      	add	r0, sp, #8
    354e:	4b79      	ldr	r3, [pc, #484]	; (3734 <adc_init+0x340>)
    3550:	4798      	blx	r3
	if (pin <= ADC_EXTCHANNEL_MSB) {
    3552:	2c13      	cmp	r4, #19
    3554:	d8cd      	bhi.n	34f2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    3556:	00a4      	lsls	r4, r4, #2
    3558:	ab02      	add	r3, sp, #8
    355a:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    355c:	a901      	add	r1, sp, #4
    355e:	2300      	movs	r3, #0
    3560:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3562:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3564:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    3566:	3301      	adds	r3, #1
    3568:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    356a:	b2c0      	uxtb	r0, r0
    356c:	4b73      	ldr	r3, [pc, #460]	; (373c <adc_init+0x348>)
    356e:	4798      	blx	r3
    3570:	e7bf      	b.n	34f2 <adc_init+0xfe>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    3572:	00a4      	lsls	r4, r4, #2
    3574:	ab02      	add	r3, sp, #8
    3576:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3578:	a901      	add	r1, sp, #4
    357a:	2300      	movs	r3, #0
    357c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    357e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    3580:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    3582:	3301      	adds	r3, #1
    3584:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    3586:	b2c0      	uxtb	r0, r0
    3588:	4b6c      	ldr	r3, [pc, #432]	; (373c <adc_init+0x348>)
    358a:	4798      	blx	r3
    358c:	e7db      	b.n	3546 <adc_init+0x152>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    358e:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    3590:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
    3592:	2102      	movs	r1, #2
    3594:	e01a      	b.n	35cc <adc_init+0x1d8>
		adjres = config->divide_result;
    3596:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
    3598:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
    359a:	2410      	movs	r4, #16
    359c:	e016      	b.n	35cc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    359e:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    35a0:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    35a2:	2101      	movs	r1, #1
    35a4:	e012      	b.n	35cc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    35a6:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
    35a8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    35aa:	2100      	movs	r1, #0
    35ac:	e00e      	b.n	35cc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    35ae:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
    35b0:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
    35b2:	2100      	movs	r1, #0
    35b4:	e00a      	b.n	35cc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    35b6:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
    35b8:	2420      	movs	r4, #32
	uint8_t adjres = 0;
    35ba:	2100      	movs	r1, #0
    35bc:	e006      	b.n	35cc <adc_init+0x1d8>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    35be:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
    35c0:	2400      	movs	r4, #0
	uint8_t adjres = 0;
    35c2:	2100      	movs	r1, #0
    35c4:	e002      	b.n	35cc <adc_init+0x1d8>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    35c6:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
    35c8:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
    35ca:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    35cc:	0109      	lsls	r1, r1, #4
    35ce:	2270      	movs	r2, #112	; 0x70
    35d0:	400a      	ands	r2, r1
    35d2:	4313      	orrs	r3, r2
    35d4:	4642      	mov	r2, r8
    35d6:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
    35d8:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
    35da:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
    35dc:	2b3f      	cmp	r3, #63	; 0x3f
    35de:	d900      	bls.n	35e2 <adc_init+0x1ee>
    35e0:	e71b      	b.n	341a <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
    35e2:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    35e4:	683a      	ldr	r2, [r7, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    35e6:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    35e8:	b25b      	sxtb	r3, r3
    35ea:	2b00      	cmp	r3, #0
    35ec:	dbfb      	blt.n	35e6 <adc_init+0x1f2>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    35ee:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    35f0:	8872      	ldrh	r2, [r6, #2]
    35f2:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    35f4:	2224      	movs	r2, #36	; 0x24
    35f6:	5cb2      	ldrb	r2, [r6, r2]
    35f8:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    35fa:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    35fc:	7d32      	ldrb	r2, [r6, #20]
    35fe:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    3600:	4313      	orrs	r3, r2
    3602:	7cb2      	ldrb	r2, [r6, #18]
    3604:	0052      	lsls	r2, r2, #1
    3606:	4313      	orrs	r3, r2
    3608:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
    360a:	4642      	mov	r2, r8
    360c:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    360e:	7e33      	ldrb	r3, [r6, #24]
    3610:	2b00      	cmp	r3, #0
    3612:	d020      	beq.n	3656 <adc_init+0x262>
		switch (resolution) {
    3614:	2c10      	cmp	r4, #16
    3616:	d100      	bne.n	361a <adc_init+0x226>
    3618:	e0d9      	b.n	37ce <adc_init+0x3da>
    361a:	d800      	bhi.n	361e <adc_init+0x22a>
    361c:	e098      	b.n	3750 <adc_init+0x35c>
    361e:	2c20      	cmp	r4, #32
    3620:	d100      	bne.n	3624 <adc_init+0x230>
    3622:	e0b6      	b.n	3792 <adc_init+0x39e>
    3624:	2c30      	cmp	r4, #48	; 0x30
    3626:	d116      	bne.n	3656 <adc_init+0x262>
			if (config->differential_mode &&
    3628:	7cf2      	ldrb	r2, [r6, #19]
    362a:	2a00      	cmp	r2, #0
    362c:	d00a      	beq.n	3644 <adc_init+0x250>
					(config->window.window_lower_value > 127 ||
    362e:	69f2      	ldr	r2, [r6, #28]
    3630:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    3632:	2017      	movs	r0, #23
			if (config->differential_mode &&
    3634:	2aff      	cmp	r2, #255	; 0xff
    3636:	d900      	bls.n	363a <adc_init+0x246>
    3638:	e6ef      	b.n	341a <adc_init+0x26>
					config->window.window_lower_value < -128 ||
    363a:	6a32      	ldr	r2, [r6, #32]
    363c:	3280      	adds	r2, #128	; 0x80
    363e:	2aff      	cmp	r2, #255	; 0xff
    3640:	d900      	bls.n	3644 <adc_init+0x250>
    3642:	e6ea      	b.n	341a <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
    3644:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
    3646:	69f2      	ldr	r2, [r6, #28]
    3648:	2aff      	cmp	r2, #255	; 0xff
    364a:	dd00      	ble.n	364e <adc_init+0x25a>
    364c:	e6e5      	b.n	341a <adc_init+0x26>
    364e:	6a32      	ldr	r2, [r6, #32]
    3650:	2aff      	cmp	r2, #255	; 0xff
    3652:	dd00      	ble.n	3656 <adc_init+0x262>
    3654:	e6e1      	b.n	341a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    3656:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3658:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    365a:	b252      	sxtb	r2, r2
    365c:	2a00      	cmp	r2, #0
    365e:	dbfb      	blt.n	3658 <adc_init+0x264>
	adc_module->WINCTRL.reg = config->window.window_mode;
    3660:	4642      	mov	r2, r8
    3662:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
    3664:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3666:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3668:	b25b      	sxtb	r3, r3
    366a:	2b00      	cmp	r3, #0
    366c:	dbfb      	blt.n	3666 <adc_init+0x272>
	adc_module->WINLT.reg =
    366e:	8bb3      	ldrh	r3, [r6, #28]
    3670:	4642      	mov	r2, r8
    3672:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
    3674:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    3676:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    3678:	b25b      	sxtb	r3, r3
    367a:	2b00      	cmp	r3, #0
    367c:	dbfb      	blt.n	3676 <adc_init+0x282>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    367e:	8c33      	ldrh	r3, [r6, #32]
    3680:	4642      	mov	r2, r8
    3682:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    3684:	232c      	movs	r3, #44	; 0x2c
    3686:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
    3688:	2b00      	cmp	r3, #0
    368a:	d005      	beq.n	3698 <adc_init+0x2a4>
		inputs_to_scan--;
    368c:	3b01      	subs	r3, #1
    368e:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
    3690:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    3692:	2b0f      	cmp	r3, #15
    3694:	d900      	bls.n	3698 <adc_init+0x2a4>
    3696:	e6c0      	b.n	341a <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    3698:	222b      	movs	r2, #43	; 0x2b
    369a:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
    369c:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    369e:	290f      	cmp	r1, #15
    36a0:	d900      	bls.n	36a4 <adc_init+0x2b0>
    36a2:	e6ba      	b.n	341a <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
    36a4:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    36a6:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
    36a8:	b252      	sxtb	r2, r2
    36aa:	2a00      	cmp	r2, #0
    36ac:	dbfb      	blt.n	36a6 <adc_init+0x2b2>
			config->negative_input |
    36ae:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
    36b0:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
    36b2:	4302      	orrs	r2, r0
    36b4:	68b0      	ldr	r0, [r6, #8]
    36b6:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
    36b8:	0509      	lsls	r1, r1, #20
			config->negative_input |
    36ba:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    36bc:	041b      	lsls	r3, r3, #16
			config->negative_input |
    36be:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    36c0:	4642      	mov	r2, r8
    36c2:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
    36c4:	232a      	movs	r3, #42	; 0x2a
    36c6:	5cf3      	ldrb	r3, [r6, r3]
    36c8:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
    36ca:	230f      	movs	r3, #15
    36cc:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
    36ce:	3315      	adds	r3, #21
    36d0:	5cf3      	ldrb	r3, [r6, r3]
    36d2:	2b00      	cmp	r3, #0
    36d4:	d012      	beq.n	36fc <adc_init+0x308>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    36d6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
    36d8:	4a1a      	ldr	r2, [pc, #104]	; (3744 <adc_init+0x350>)
			return STATUS_ERR_INVALID_ARG;
    36da:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    36dc:	4293      	cmp	r3, r2
    36de:	d900      	bls.n	36e2 <adc_init+0x2ee>
    36e0:	e69b      	b.n	341a <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    36e2:	4642      	mov	r2, r8
    36e4:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    36e6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
    36e8:	2380      	movs	r3, #128	; 0x80
    36ea:	011b      	lsls	r3, r3, #4
    36ec:	18d3      	adds	r3, r2, r3
    36ee:	4915      	ldr	r1, [pc, #84]	; (3744 <adc_init+0x350>)
    36f0:	b29b      	uxth	r3, r3
    36f2:	428b      	cmp	r3, r1
    36f4:	d900      	bls.n	36f8 <adc_init+0x304>
    36f6:	e690      	b.n	341a <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    36f8:	4643      	mov	r3, r8
    36fa:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    36fc:	4b12      	ldr	r3, [pc, #72]	; (3748 <adc_init+0x354>)
    36fe:	681b      	ldr	r3, [r3, #0]
    3700:	015b      	lsls	r3, r3, #5
    3702:	22e0      	movs	r2, #224	; 0xe0
    3704:	00d2      	lsls	r2, r2, #3
    3706:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
    3708:	4a10      	ldr	r2, [pc, #64]	; (374c <adc_init+0x358>)
    370a:	6851      	ldr	r1, [r2, #4]
    370c:	0149      	lsls	r1, r1, #5
    370e:	6812      	ldr	r2, [r2, #0]
    3710:	0ed2      	lsrs	r2, r2, #27
    3712:	430a      	orrs	r2, r1
    3714:	b2d2      	uxtb	r2, r2
			) |
    3716:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    3718:	4642      	mov	r2, r8
    371a:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
    371c:	2000      	movs	r0, #0
    371e:	e67c      	b.n	341a <adc_init+0x26>
    3720:	40000400 	.word	0x40000400
    3724:	40000800 	.word	0x40000800
    3728:	200003b4 	.word	0x200003b4
    372c:	00004f9d 	.word	0x00004f9d
    3730:	00004f11 	.word	0x00004f11
    3734:	0000880d 	.word	0x0000880d
    3738:	0000ac00 	.word	0x0000ac00
    373c:	00005095 	.word	0x00005095
    3740:	0000ab2c 	.word	0x0000ab2c
    3744:	00000fff 	.word	0x00000fff
    3748:	00806024 	.word	0x00806024
    374c:	00806020 	.word	0x00806020
		switch (resolution) {
    3750:	2c00      	cmp	r4, #0
    3752:	d000      	beq.n	3756 <adc_init+0x362>
    3754:	e77f      	b.n	3656 <adc_init+0x262>
			if (config->differential_mode &&
    3756:	7cf2      	ldrb	r2, [r6, #19]
    3758:	2a00      	cmp	r2, #0
    375a:	d00f      	beq.n	377c <adc_init+0x388>
					(config->window.window_lower_value > 2047 ||
    375c:	69f2      	ldr	r2, [r6, #28]
    375e:	2180      	movs	r1, #128	; 0x80
    3760:	0109      	lsls	r1, r1, #4
    3762:	468c      	mov	ip, r1
    3764:	4462      	add	r2, ip
			if (config->differential_mode &&
    3766:	492a      	ldr	r1, [pc, #168]	; (3810 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    3768:	2017      	movs	r0, #23
			if (config->differential_mode &&
    376a:	428a      	cmp	r2, r1
    376c:	d900      	bls.n	3770 <adc_init+0x37c>
    376e:	e654      	b.n	341a <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
    3770:	6a32      	ldr	r2, [r6, #32]
    3772:	4462      	add	r2, ip
    3774:	4926      	ldr	r1, [pc, #152]	; (3810 <adc_init+0x41c>)
    3776:	428a      	cmp	r2, r1
    3778:	d900      	bls.n	377c <adc_init+0x388>
    377a:	e64e      	b.n	341a <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
    377c:	4a24      	ldr	r2, [pc, #144]	; (3810 <adc_init+0x41c>)
				return STATUS_ERR_INVALID_ARG;
    377e:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
    3780:	69f1      	ldr	r1, [r6, #28]
    3782:	4291      	cmp	r1, r2
    3784:	dd00      	ble.n	3788 <adc_init+0x394>
    3786:	e648      	b.n	341a <adc_init+0x26>
    3788:	6a31      	ldr	r1, [r6, #32]
    378a:	4291      	cmp	r1, r2
    378c:	dd00      	ble.n	3790 <adc_init+0x39c>
    378e:	e644      	b.n	341a <adc_init+0x26>
    3790:	e761      	b.n	3656 <adc_init+0x262>
			if (config->differential_mode &&
    3792:	7cf2      	ldrb	r2, [r6, #19]
    3794:	2a00      	cmp	r2, #0
    3796:	d00f      	beq.n	37b8 <adc_init+0x3c4>
					(config->window.window_lower_value > 511 ||
    3798:	69f2      	ldr	r2, [r6, #28]
    379a:	2180      	movs	r1, #128	; 0x80
    379c:	0089      	lsls	r1, r1, #2
    379e:	468c      	mov	ip, r1
    37a0:	4462      	add	r2, ip
			if (config->differential_mode &&
    37a2:	491c      	ldr	r1, [pc, #112]	; (3814 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    37a4:	2017      	movs	r0, #23
			if (config->differential_mode &&
    37a6:	428a      	cmp	r2, r1
    37a8:	d900      	bls.n	37ac <adc_init+0x3b8>
    37aa:	e636      	b.n	341a <adc_init+0x26>
					config->window.window_lower_value < -512 ||
    37ac:	6a32      	ldr	r2, [r6, #32]
    37ae:	4462      	add	r2, ip
    37b0:	4918      	ldr	r1, [pc, #96]	; (3814 <adc_init+0x420>)
    37b2:	428a      	cmp	r2, r1
    37b4:	d900      	bls.n	37b8 <adc_init+0x3c4>
    37b6:	e630      	b.n	341a <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
    37b8:	4a16      	ldr	r2, [pc, #88]	; (3814 <adc_init+0x420>)
				return STATUS_ERR_INVALID_ARG;
    37ba:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
    37bc:	69f1      	ldr	r1, [r6, #28]
    37be:	4291      	cmp	r1, r2
    37c0:	dd00      	ble.n	37c4 <adc_init+0x3d0>
    37c2:	e62a      	b.n	341a <adc_init+0x26>
    37c4:	6a31      	ldr	r1, [r6, #32]
    37c6:	4291      	cmp	r1, r2
    37c8:	dd00      	ble.n	37cc <adc_init+0x3d8>
    37ca:	e626      	b.n	341a <adc_init+0x26>
    37cc:	e743      	b.n	3656 <adc_init+0x262>
			if (config->differential_mode &&
    37ce:	7cf2      	ldrb	r2, [r6, #19]
    37d0:	2a00      	cmp	r2, #0
    37d2:	d00f      	beq.n	37f4 <adc_init+0x400>
					(config->window.window_lower_value > 32767 ||
    37d4:	69f2      	ldr	r2, [r6, #28]
    37d6:	2180      	movs	r1, #128	; 0x80
    37d8:	0209      	lsls	r1, r1, #8
    37da:	468c      	mov	ip, r1
    37dc:	4462      	add	r2, ip
			if (config->differential_mode &&
    37de:	490e      	ldr	r1, [pc, #56]	; (3818 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    37e0:	2017      	movs	r0, #23
			if (config->differential_mode &&
    37e2:	428a      	cmp	r2, r1
    37e4:	d900      	bls.n	37e8 <adc_init+0x3f4>
    37e6:	e618      	b.n	341a <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
    37e8:	6a32      	ldr	r2, [r6, #32]
    37ea:	4462      	add	r2, ip
    37ec:	490a      	ldr	r1, [pc, #40]	; (3818 <adc_init+0x424>)
    37ee:	428a      	cmp	r2, r1
    37f0:	d900      	bls.n	37f4 <adc_init+0x400>
    37f2:	e612      	b.n	341a <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
    37f4:	4a08      	ldr	r2, [pc, #32]	; (3818 <adc_init+0x424>)
				return STATUS_ERR_INVALID_ARG;
    37f6:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
    37f8:	69f1      	ldr	r1, [r6, #28]
    37fa:	4291      	cmp	r1, r2
    37fc:	dd00      	ble.n	3800 <adc_init+0x40c>
    37fe:	e60c      	b.n	341a <adc_init+0x26>
    3800:	6a31      	ldr	r1, [r6, #32]
    3802:	4291      	cmp	r1, r2
    3804:	dd00      	ble.n	3808 <adc_init+0x414>
    3806:	e608      	b.n	341a <adc_init+0x26>
    3808:	e725      	b.n	3656 <adc_init+0x262>
		return STATUS_ERR_INVALID_ARG;
    380a:	2017      	movs	r0, #23
    380c:	e605      	b.n	341a <adc_init+0x26>
    380e:	46c0      	nop			; (mov r8, r8)
    3810:	00000fff 	.word	0x00000fff
    3814:	000003ff 	.word	0x000003ff
    3818:	0000ffff 	.word	0x0000ffff

0000381c <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    381c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    381e:	4b2e      	ldr	r3, [pc, #184]	; (38d8 <ADC_Handler+0xbc>)
    3820:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg;
    3822:	6823      	ldr	r3, [r4, #0]
    3824:	7e1d      	ldrb	r5, [r3, #24]
    3826:	b2ed      	uxtb	r5, r5
	if (flags & ADC_INTFLAG_RESRDY) {
    3828:	07ea      	lsls	r2, r5, #31
    382a:	d505      	bpl.n	3838 <ADC_Handler+0x1c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    382c:	7ee2      	ldrb	r2, [r4, #27]
    382e:	07d2      	lsls	r2, r2, #31
    3830:	d502      	bpl.n	3838 <ADC_Handler+0x1c>
    3832:	7ea2      	ldrb	r2, [r4, #26]
    3834:	07d2      	lsls	r2, r2, #31
    3836:	d416      	bmi.n	3866 <ADC_Handler+0x4a>
	if (flags & ADC_INTFLAG_WINMON) {
    3838:	076b      	lsls	r3, r5, #29
    383a:	d508      	bpl.n	384e <ADC_Handler+0x32>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    383c:	2304      	movs	r3, #4
    383e:	6822      	ldr	r2, [r4, #0]
    3840:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3842:	7ee3      	ldrb	r3, [r4, #27]
    3844:	079b      	lsls	r3, r3, #30
    3846:	d502      	bpl.n	384e <ADC_Handler+0x32>
    3848:	7ea3      	ldrb	r3, [r4, #26]
    384a:	079b      	lsls	r3, r3, #30
    384c:	d43c      	bmi.n	38c8 <ADC_Handler+0xac>
	if (flags & ADC_INTFLAG_OVERRUN) {
    384e:	07ab      	lsls	r3, r5, #30
    3850:	d508      	bpl.n	3864 <ADC_Handler+0x48>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3852:	2302      	movs	r3, #2
    3854:	6822      	ldr	r2, [r4, #0]
    3856:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3858:	7ee3      	ldrb	r3, [r4, #27]
    385a:	075b      	lsls	r3, r3, #29
    385c:	d502      	bpl.n	3864 <ADC_Handler+0x48>
    385e:	7ea3      	ldrb	r3, [r4, #26]
    3860:	075b      	lsls	r3, r3, #29
    3862:	d435      	bmi.n	38d0 <ADC_Handler+0xb4>
	_adc_interrupt_handler(0);
}
    3864:	bd70      	pop	{r4, r5, r6, pc}
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    3866:	2201      	movs	r2, #1
    3868:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    386a:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    386c:	7e53      	ldrb	r3, [r2, #25]
			while (adc_is_syncing(module)) {
    386e:	b25b      	sxtb	r3, r3
    3870:	2b00      	cmp	r3, #0
    3872:	dbfb      	blt.n	386c <ADC_Handler+0x50>
			*(module->job_buffer++) = module->hw->RESULT.reg;
    3874:	6961      	ldr	r1, [r4, #20]
    3876:	1c8b      	adds	r3, r1, #2
    3878:	6163      	str	r3, [r4, #20]
    387a:	8b53      	ldrh	r3, [r2, #26]
    387c:	b29b      	uxth	r3, r3
    387e:	800b      	strh	r3, [r1, #0]
			if (--module->remaining_conversions > 0) {
    3880:	8b23      	ldrh	r3, [r4, #24]
    3882:	3b01      	subs	r3, #1
    3884:	b29b      	uxth	r3, r3
    3886:	8323      	strh	r3, [r4, #24]
    3888:	2b00      	cmp	r3, #0
    388a:	d011      	beq.n	38b0 <ADC_Handler+0x94>
				if (module->software_trigger == true) {
    388c:	7f63      	ldrb	r3, [r4, #29]
    388e:	2b00      	cmp	r3, #0
    3890:	d0d2      	beq.n	3838 <ADC_Handler+0x1c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3892:	6822      	ldr	r2, [r4, #0]
    3894:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    3896:	b25b      	sxtb	r3, r3
    3898:	2b00      	cmp	r3, #0
    389a:	dbfb      	blt.n	3894 <ADC_Handler+0x78>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    389c:	7b13      	ldrb	r3, [r2, #12]
    389e:	2102      	movs	r1, #2
    38a0:	430b      	orrs	r3, r1
    38a2:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
    38a4:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    38a6:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    38a8:	b25b      	sxtb	r3, r3
    38aa:	2b00      	cmp	r3, #0
    38ac:	dbfb      	blt.n	38a6 <ADC_Handler+0x8a>
    38ae:	e7c3      	b.n	3838 <ADC_Handler+0x1c>
				if (module->job_status == STATUS_BUSY) {
    38b0:	7f23      	ldrb	r3, [r4, #28]
    38b2:	2b05      	cmp	r3, #5
    38b4:	d1c0      	bne.n	3838 <ADC_Handler+0x1c>
					module->job_status = STATUS_OK;
    38b6:	2300      	movs	r3, #0
    38b8:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    38ba:	3301      	adds	r3, #1
    38bc:	6822      	ldr	r2, [r4, #0]
    38be:	7593      	strb	r3, [r2, #22]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    38c0:	0020      	movs	r0, r4
    38c2:	68a3      	ldr	r3, [r4, #8]
    38c4:	4798      	blx	r3
    38c6:	e7b7      	b.n	3838 <ADC_Handler+0x1c>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    38c8:	0020      	movs	r0, r4
    38ca:	68e3      	ldr	r3, [r4, #12]
    38cc:	4798      	blx	r3
    38ce:	e7be      	b.n	384e <ADC_Handler+0x32>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    38d0:	6923      	ldr	r3, [r4, #16]
    38d2:	0020      	movs	r0, r4
    38d4:	4798      	blx	r3
}
    38d6:	e7c5      	b.n	3864 <ADC_Handler+0x48>
    38d8:	200003b4 	.word	0x200003b4

000038dc <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    38dc:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    38de:	2a00      	cmp	r2, #0
    38e0:	d001      	beq.n	38e6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    38e2:	0018      	movs	r0, r3
    38e4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    38e6:	008b      	lsls	r3, r1, #2
    38e8:	4a06      	ldr	r2, [pc, #24]	; (3904 <extint_register_callback+0x28>)
    38ea:	589b      	ldr	r3, [r3, r2]
    38ec:	2b00      	cmp	r3, #0
    38ee:	d003      	beq.n	38f8 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    38f0:	4283      	cmp	r3, r0
    38f2:	d005      	beq.n	3900 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    38f4:	231d      	movs	r3, #29
    38f6:	e7f4      	b.n	38e2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    38f8:	0089      	lsls	r1, r1, #2
    38fa:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    38fc:	2300      	movs	r3, #0
    38fe:	e7f0      	b.n	38e2 <extint_register_callback+0x6>
		return STATUS_OK;
    3900:	2300      	movs	r3, #0
    3902:	e7ee      	b.n	38e2 <extint_register_callback+0x6>
    3904:	200003bc 	.word	0x200003bc

00003908 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3908:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    390a:	2900      	cmp	r1, #0
    390c:	d001      	beq.n	3912 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    390e:	0018      	movs	r0, r3
    3910:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    3912:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3914:	281f      	cmp	r0, #31
    3916:	d800      	bhi.n	391a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    3918:	4a02      	ldr	r2, [pc, #8]	; (3924 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    391a:	2301      	movs	r3, #1
    391c:	4083      	lsls	r3, r0
    391e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    3920:	2300      	movs	r3, #0
    3922:	e7f4      	b.n	390e <extint_chan_enable_callback+0x6>
    3924:	40001800 	.word	0x40001800

00003928 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3928:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    392a:	2900      	cmp	r1, #0
    392c:	d001      	beq.n	3932 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    392e:	0018      	movs	r0, r3
    3930:	4770      	bx	lr
		return NULL;
    3932:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    3934:	281f      	cmp	r0, #31
    3936:	d800      	bhi.n	393a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    3938:	4a02      	ldr	r2, [pc, #8]	; (3944 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    393a:	2301      	movs	r3, #1
    393c:	4083      	lsls	r3, r0
    393e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    3940:	2300      	movs	r3, #0
    3942:	e7f4      	b.n	392e <extint_chan_disable_callback+0x6>
    3944:	40001800 	.word	0x40001800

00003948 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3948:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    394a:	2200      	movs	r2, #0
    394c:	4b10      	ldr	r3, [pc, #64]	; (3990 <EIC_Handler+0x48>)
    394e:	701a      	strb	r2, [r3, #0]
    3950:	2300      	movs	r3, #0
    3952:	4910      	ldr	r1, [pc, #64]	; (3994 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3954:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3956:	4e10      	ldr	r6, [pc, #64]	; (3998 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3958:	4c0d      	ldr	r4, [pc, #52]	; (3990 <EIC_Handler+0x48>)
    395a:	e00a      	b.n	3972 <EIC_Handler+0x2a>
		return eics[eic_index];
    395c:	490d      	ldr	r1, [pc, #52]	; (3994 <EIC_Handler+0x4c>)
    395e:	e008      	b.n	3972 <EIC_Handler+0x2a>
    3960:	7823      	ldrb	r3, [r4, #0]
    3962:	3301      	adds	r3, #1
    3964:	b2db      	uxtb	r3, r3
    3966:	7023      	strb	r3, [r4, #0]
    3968:	2b0f      	cmp	r3, #15
    396a:	d810      	bhi.n	398e <EIC_Handler+0x46>
		return NULL;
    396c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    396e:	2b1f      	cmp	r3, #31
    3970:	d9f4      	bls.n	395c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3972:	0028      	movs	r0, r5
    3974:	4018      	ands	r0, r3
    3976:	2201      	movs	r2, #1
    3978:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    397a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    397c:	4210      	tst	r0, r2
    397e:	d0ef      	beq.n	3960 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3980:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3982:	009b      	lsls	r3, r3, #2
    3984:	599b      	ldr	r3, [r3, r6]
    3986:	2b00      	cmp	r3, #0
    3988:	d0ea      	beq.n	3960 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    398a:	4798      	blx	r3
    398c:	e7e8      	b.n	3960 <EIC_Handler+0x18>
			}
		}
	}
}
    398e:	bd70      	pop	{r4, r5, r6, pc}
    3990:	200003b8 	.word	0x200003b8
    3994:	40001800 	.word	0x40001800
    3998:	200003bc 	.word	0x200003bc

0000399c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    399c:	4a04      	ldr	r2, [pc, #16]	; (39b0 <_extint_enable+0x14>)
    399e:	7813      	ldrb	r3, [r2, #0]
    39a0:	2102      	movs	r1, #2
    39a2:	430b      	orrs	r3, r1
    39a4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    39a6:	7853      	ldrb	r3, [r2, #1]
    39a8:	b25b      	sxtb	r3, r3
    39aa:	2b00      	cmp	r3, #0
    39ac:	dbfb      	blt.n	39a6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    39ae:	4770      	bx	lr
    39b0:	40001800 	.word	0x40001800

000039b4 <_system_extint_init>:
{
    39b4:	b500      	push	{lr}
    39b6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    39b8:	4a12      	ldr	r2, [pc, #72]	; (3a04 <_system_extint_init+0x50>)
    39ba:	6993      	ldr	r3, [r2, #24]
    39bc:	2140      	movs	r1, #64	; 0x40
    39be:	430b      	orrs	r3, r1
    39c0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    39c2:	a901      	add	r1, sp, #4
    39c4:	2300      	movs	r3, #0
    39c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    39c8:	2005      	movs	r0, #5
    39ca:	4b0f      	ldr	r3, [pc, #60]	; (3a08 <_system_extint_init+0x54>)
    39cc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    39ce:	2005      	movs	r0, #5
    39d0:	4b0e      	ldr	r3, [pc, #56]	; (3a0c <_system_extint_init+0x58>)
    39d2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    39d4:	4a0e      	ldr	r2, [pc, #56]	; (3a10 <_system_extint_init+0x5c>)
    39d6:	7813      	ldrb	r3, [r2, #0]
    39d8:	2101      	movs	r1, #1
    39da:	430b      	orrs	r3, r1
    39dc:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    39de:	7853      	ldrb	r3, [r2, #1]
    39e0:	b25b      	sxtb	r3, r3
    39e2:	2b00      	cmp	r3, #0
    39e4:	dbfb      	blt.n	39de <_system_extint_init+0x2a>
    39e6:	4b0b      	ldr	r3, [pc, #44]	; (3a14 <_system_extint_init+0x60>)
    39e8:	0019      	movs	r1, r3
    39ea:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    39ec:	2200      	movs	r2, #0
    39ee:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    39f0:	4299      	cmp	r1, r3
    39f2:	d1fc      	bne.n	39ee <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    39f4:	2210      	movs	r2, #16
    39f6:	4b08      	ldr	r3, [pc, #32]	; (3a18 <_system_extint_init+0x64>)
    39f8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    39fa:	4b08      	ldr	r3, [pc, #32]	; (3a1c <_system_extint_init+0x68>)
    39fc:	4798      	blx	r3
}
    39fe:	b003      	add	sp, #12
    3a00:	bd00      	pop	{pc}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	40000400 	.word	0x40000400
    3a08:	00004f9d 	.word	0x00004f9d
    3a0c:	00004f11 	.word	0x00004f11
    3a10:	40001800 	.word	0x40001800
    3a14:	200003bc 	.word	0x200003bc
    3a18:	e000e100 	.word	0xe000e100
    3a1c:	0000399d 	.word	0x0000399d

00003a20 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    3a20:	2300      	movs	r3, #0
    3a22:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    3a24:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    3a26:	2201      	movs	r2, #1
    3a28:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    3a2a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    3a2c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    3a2e:	3302      	adds	r3, #2
    3a30:	72c3      	strb	r3, [r0, #11]
}
    3a32:	4770      	bx	lr

00003a34 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    3a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a36:	b083      	sub	sp, #12
    3a38:	0005      	movs	r5, r0
    3a3a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3a3c:	a901      	add	r1, sp, #4
    3a3e:	2300      	movs	r3, #0
    3a40:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3a42:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3a44:	7923      	ldrb	r3, [r4, #4]
    3a46:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    3a48:	7a23      	ldrb	r3, [r4, #8]
    3a4a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3a4c:	7820      	ldrb	r0, [r4, #0]
    3a4e:	4b15      	ldr	r3, [pc, #84]	; (3aa4 <extint_chan_set_config+0x70>)
    3a50:	4798      	blx	r3
		return NULL;
    3a52:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    3a54:	2d1f      	cmp	r5, #31
    3a56:	d800      	bhi.n	3a5a <extint_chan_set_config+0x26>
		return eics[eic_index];
    3a58:	4813      	ldr	r0, [pc, #76]	; (3aa8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    3a5a:	2207      	movs	r2, #7
    3a5c:	402a      	ands	r2, r5
    3a5e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3a60:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3a62:	7aa3      	ldrb	r3, [r4, #10]
    3a64:	2b00      	cmp	r3, #0
    3a66:	d001      	beq.n	3a6c <extint_chan_set_config+0x38>
    3a68:	2308      	movs	r3, #8
    3a6a:	431f      	orrs	r7, r3
    3a6c:	08eb      	lsrs	r3, r5, #3
    3a6e:	009b      	lsls	r3, r3, #2
    3a70:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3a72:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3a74:	260f      	movs	r6, #15
    3a76:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    3a78:	43b1      	bics	r1, r6
			(new_config << config_pos);
    3a7a:	4097      	lsls	r7, r2
    3a7c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3a7e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    3a80:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3a82:	7a63      	ldrb	r3, [r4, #9]
    3a84:	2b00      	cmp	r3, #0
    3a86:	d106      	bne.n	3a96 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    3a88:	6943      	ldr	r3, [r0, #20]
    3a8a:	2201      	movs	r2, #1
    3a8c:	40aa      	lsls	r2, r5
    3a8e:	4393      	bics	r3, r2
    3a90:	6143      	str	r3, [r0, #20]
	}
}
    3a92:	b003      	add	sp, #12
    3a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    3a96:	6942      	ldr	r2, [r0, #20]
    3a98:	2301      	movs	r3, #1
    3a9a:	40ab      	lsls	r3, r5
    3a9c:	4313      	orrs	r3, r2
    3a9e:	6143      	str	r3, [r0, #20]
    3aa0:	e7f7      	b.n	3a92 <extint_chan_set_config+0x5e>
    3aa2:	46c0      	nop			; (mov r8, r8)
    3aa4:	00005095 	.word	0x00005095
    3aa8:	40001800 	.word	0x40001800

00003aac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3aac:	b500      	push	{lr}
    3aae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3ab0:	ab01      	add	r3, sp, #4
    3ab2:	2280      	movs	r2, #128	; 0x80
    3ab4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3ab6:	780a      	ldrb	r2, [r1, #0]
    3ab8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3aba:	784a      	ldrb	r2, [r1, #1]
    3abc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3abe:	788a      	ldrb	r2, [r1, #2]
    3ac0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3ac2:	0019      	movs	r1, r3
    3ac4:	4b01      	ldr	r3, [pc, #4]	; (3acc <port_pin_set_config+0x20>)
    3ac6:	4798      	blx	r3
}
    3ac8:	b003      	add	sp, #12
    3aca:	bd00      	pop	{pc}
    3acc:	00005095 	.word	0x00005095

00003ad0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    3ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ad2:	46de      	mov	lr, fp
    3ad4:	4657      	mov	r7, sl
    3ad6:	464e      	mov	r6, r9
    3ad8:	4645      	mov	r5, r8
    3ada:	b5e0      	push	{r5, r6, r7, lr}
    3adc:	b087      	sub	sp, #28
    3ade:	4680      	mov	r8, r0
    3ae0:	9104      	str	r1, [sp, #16]
    3ae2:	0016      	movs	r6, r2
    3ae4:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3ae6:	2200      	movs	r2, #0
    3ae8:	2300      	movs	r3, #0
    3aea:	2100      	movs	r1, #0
    3aec:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    3aee:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3af0:	2001      	movs	r0, #1
    3af2:	0021      	movs	r1, r4
    3af4:	9600      	str	r6, [sp, #0]
    3af6:	9701      	str	r7, [sp, #4]
    3af8:	465c      	mov	r4, fp
    3afa:	9403      	str	r4, [sp, #12]
    3afc:	4644      	mov	r4, r8
    3afe:	9405      	str	r4, [sp, #20]
    3b00:	e013      	b.n	3b2a <long_division+0x5a>
    3b02:	2420      	movs	r4, #32
    3b04:	1a64      	subs	r4, r4, r1
    3b06:	0005      	movs	r5, r0
    3b08:	40e5      	lsrs	r5, r4
    3b0a:	46a8      	mov	r8, r5
    3b0c:	e014      	b.n	3b38 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    3b0e:	9c00      	ldr	r4, [sp, #0]
    3b10:	9d01      	ldr	r5, [sp, #4]
    3b12:	1b12      	subs	r2, r2, r4
    3b14:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3b16:	465c      	mov	r4, fp
    3b18:	464d      	mov	r5, r9
    3b1a:	432c      	orrs	r4, r5
    3b1c:	46a3      	mov	fp, r4
    3b1e:	9c03      	ldr	r4, [sp, #12]
    3b20:	4645      	mov	r5, r8
    3b22:	432c      	orrs	r4, r5
    3b24:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    3b26:	3901      	subs	r1, #1
    3b28:	d325      	bcc.n	3b76 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    3b2a:	2420      	movs	r4, #32
    3b2c:	4264      	negs	r4, r4
    3b2e:	190c      	adds	r4, r1, r4
    3b30:	d4e7      	bmi.n	3b02 <long_division+0x32>
    3b32:	0005      	movs	r5, r0
    3b34:	40a5      	lsls	r5, r4
    3b36:	46a8      	mov	r8, r5
    3b38:	0004      	movs	r4, r0
    3b3a:	408c      	lsls	r4, r1
    3b3c:	46a1      	mov	r9, r4
		r = r << 1;
    3b3e:	1892      	adds	r2, r2, r2
    3b40:	415b      	adcs	r3, r3
    3b42:	0014      	movs	r4, r2
    3b44:	001d      	movs	r5, r3
		if (n & bit_shift) {
    3b46:	9e05      	ldr	r6, [sp, #20]
    3b48:	464f      	mov	r7, r9
    3b4a:	403e      	ands	r6, r7
    3b4c:	46b4      	mov	ip, r6
    3b4e:	9e04      	ldr	r6, [sp, #16]
    3b50:	4647      	mov	r7, r8
    3b52:	403e      	ands	r6, r7
    3b54:	46b2      	mov	sl, r6
    3b56:	4666      	mov	r6, ip
    3b58:	4657      	mov	r7, sl
    3b5a:	433e      	orrs	r6, r7
    3b5c:	d003      	beq.n	3b66 <long_division+0x96>
			r |= 0x01;
    3b5e:	0006      	movs	r6, r0
    3b60:	4326      	orrs	r6, r4
    3b62:	0032      	movs	r2, r6
    3b64:	002b      	movs	r3, r5
		if (r >= d) {
    3b66:	9c00      	ldr	r4, [sp, #0]
    3b68:	9d01      	ldr	r5, [sp, #4]
    3b6a:	429d      	cmp	r5, r3
    3b6c:	d8db      	bhi.n	3b26 <long_division+0x56>
    3b6e:	d1ce      	bne.n	3b0e <long_division+0x3e>
    3b70:	4294      	cmp	r4, r2
    3b72:	d8d8      	bhi.n	3b26 <long_division+0x56>
    3b74:	e7cb      	b.n	3b0e <long_division+0x3e>
    3b76:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    3b78:	4658      	mov	r0, fp
    3b7a:	0019      	movs	r1, r3
    3b7c:	b007      	add	sp, #28
    3b7e:	bc3c      	pop	{r2, r3, r4, r5}
    3b80:	4690      	mov	r8, r2
    3b82:	4699      	mov	r9, r3
    3b84:	46a2      	mov	sl, r4
    3b86:	46ab      	mov	fp, r5
    3b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b8a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3b8a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    3b8c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3b8e:	2340      	movs	r3, #64	; 0x40
    3b90:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    3b92:	4281      	cmp	r1, r0
    3b94:	d202      	bcs.n	3b9c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    3b96:	0018      	movs	r0, r3
    3b98:	bd10      	pop	{r4, pc}
		baud_calculated++;
    3b9a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    3b9c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3b9e:	1c63      	adds	r3, r4, #1
    3ba0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    3ba2:	4288      	cmp	r0, r1
    3ba4:	d9f9      	bls.n	3b9a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3ba6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    3ba8:	2cff      	cmp	r4, #255	; 0xff
    3baa:	d8f4      	bhi.n	3b96 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    3bac:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    3bae:	2300      	movs	r3, #0
    3bb0:	e7f1      	b.n	3b96 <_sercom_get_sync_baud_val+0xc>
	...

00003bb4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bb6:	b083      	sub	sp, #12
    3bb8:	000f      	movs	r7, r1
    3bba:	0016      	movs	r6, r2
    3bbc:	aa08      	add	r2, sp, #32
    3bbe:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3bc0:	0004      	movs	r4, r0
    3bc2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3bc4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    3bc6:	42bc      	cmp	r4, r7
    3bc8:	d902      	bls.n	3bd0 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    3bca:	0010      	movs	r0, r2
    3bcc:	b003      	add	sp, #12
    3bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	d114      	bne.n	3bfe <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3bd4:	0002      	movs	r2, r0
    3bd6:	0008      	movs	r0, r1
    3bd8:	2100      	movs	r1, #0
    3bda:	4c19      	ldr	r4, [pc, #100]	; (3c40 <_sercom_get_async_baud_val+0x8c>)
    3bdc:	47a0      	blx	r4
    3bde:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    3be0:	003a      	movs	r2, r7
    3be2:	2300      	movs	r3, #0
    3be4:	2000      	movs	r0, #0
    3be6:	4c17      	ldr	r4, [pc, #92]	; (3c44 <_sercom_get_async_baud_val+0x90>)
    3be8:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3bea:	2200      	movs	r2, #0
    3bec:	2301      	movs	r3, #1
    3bee:	1a12      	subs	r2, r2, r0
    3bf0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3bf2:	0c12      	lsrs	r2, r2, #16
    3bf4:	041b      	lsls	r3, r3, #16
    3bf6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    3bf8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    3bfa:	2200      	movs	r2, #0
    3bfc:	e7e5      	b.n	3bca <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    3bfe:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3c00:	2b01      	cmp	r3, #1
    3c02:	d1f9      	bne.n	3bf8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    3c04:	000a      	movs	r2, r1
    3c06:	2300      	movs	r3, #0
    3c08:	2100      	movs	r1, #0
    3c0a:	4c0d      	ldr	r4, [pc, #52]	; (3c40 <_sercom_get_async_baud_val+0x8c>)
    3c0c:	47a0      	blx	r4
    3c0e:	0002      	movs	r2, r0
    3c10:	000b      	movs	r3, r1
    3c12:	9200      	str	r2, [sp, #0]
    3c14:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    3c16:	0038      	movs	r0, r7
    3c18:	2100      	movs	r1, #0
    3c1a:	4c0a      	ldr	r4, [pc, #40]	; (3c44 <_sercom_get_async_baud_val+0x90>)
    3c1c:	47a0      	blx	r4
    3c1e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    3c20:	2380      	movs	r3, #128	; 0x80
    3c22:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3c24:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    3c26:	4298      	cmp	r0, r3
    3c28:	d8cf      	bhi.n	3bca <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3c2a:	0f79      	lsrs	r1, r7, #29
    3c2c:	00f8      	lsls	r0, r7, #3
    3c2e:	9a00      	ldr	r2, [sp, #0]
    3c30:	9b01      	ldr	r3, [sp, #4]
    3c32:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    3c34:	00ea      	lsls	r2, r5, #3
    3c36:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    3c38:	b2d2      	uxtb	r2, r2
    3c3a:	0352      	lsls	r2, r2, #13
    3c3c:	432a      	orrs	r2, r5
    3c3e:	e7db      	b.n	3bf8 <_sercom_get_async_baud_val+0x44>
    3c40:	00007231 	.word	0x00007231
    3c44:	00003ad1 	.word	0x00003ad1

00003c48 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3c48:	b510      	push	{r4, lr}
    3c4a:	b082      	sub	sp, #8
    3c4c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    3c4e:	4b0e      	ldr	r3, [pc, #56]	; (3c88 <sercom_set_gclk_generator+0x40>)
    3c50:	781b      	ldrb	r3, [r3, #0]
    3c52:	2b00      	cmp	r3, #0
    3c54:	d007      	beq.n	3c66 <sercom_set_gclk_generator+0x1e>
    3c56:	2900      	cmp	r1, #0
    3c58:	d105      	bne.n	3c66 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    3c5a:	4b0b      	ldr	r3, [pc, #44]	; (3c88 <sercom_set_gclk_generator+0x40>)
    3c5c:	785b      	ldrb	r3, [r3, #1]
    3c5e:	4283      	cmp	r3, r0
    3c60:	d010      	beq.n	3c84 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    3c62:	201d      	movs	r0, #29
    3c64:	e00c      	b.n	3c80 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    3c66:	a901      	add	r1, sp, #4
    3c68:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3c6a:	2013      	movs	r0, #19
    3c6c:	4b07      	ldr	r3, [pc, #28]	; (3c8c <sercom_set_gclk_generator+0x44>)
    3c6e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3c70:	2013      	movs	r0, #19
    3c72:	4b07      	ldr	r3, [pc, #28]	; (3c90 <sercom_set_gclk_generator+0x48>)
    3c74:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    3c76:	4b04      	ldr	r3, [pc, #16]	; (3c88 <sercom_set_gclk_generator+0x40>)
    3c78:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    3c7a:	2201      	movs	r2, #1
    3c7c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    3c7e:	2000      	movs	r0, #0
}
    3c80:	b002      	add	sp, #8
    3c82:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    3c84:	2000      	movs	r0, #0
    3c86:	e7fb      	b.n	3c80 <sercom_set_gclk_generator+0x38>
    3c88:	200000bc 	.word	0x200000bc
    3c8c:	00004f9d 	.word	0x00004f9d
    3c90:	00004f11 	.word	0x00004f11

00003c94 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    3c94:	4b40      	ldr	r3, [pc, #256]	; (3d98 <_sercom_get_default_pad+0x104>)
    3c96:	4298      	cmp	r0, r3
    3c98:	d031      	beq.n	3cfe <_sercom_get_default_pad+0x6a>
    3c9a:	d90a      	bls.n	3cb2 <_sercom_get_default_pad+0x1e>
    3c9c:	4b3f      	ldr	r3, [pc, #252]	; (3d9c <_sercom_get_default_pad+0x108>)
    3c9e:	4298      	cmp	r0, r3
    3ca0:	d04d      	beq.n	3d3e <_sercom_get_default_pad+0xaa>
    3ca2:	4b3f      	ldr	r3, [pc, #252]	; (3da0 <_sercom_get_default_pad+0x10c>)
    3ca4:	4298      	cmp	r0, r3
    3ca6:	d05a      	beq.n	3d5e <_sercom_get_default_pad+0xca>
    3ca8:	4b3e      	ldr	r3, [pc, #248]	; (3da4 <_sercom_get_default_pad+0x110>)
    3caa:	4298      	cmp	r0, r3
    3cac:	d037      	beq.n	3d1e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    3cae:	2000      	movs	r0, #0
}
    3cb0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    3cb2:	4b3d      	ldr	r3, [pc, #244]	; (3da8 <_sercom_get_default_pad+0x114>)
    3cb4:	4298      	cmp	r0, r3
    3cb6:	d00c      	beq.n	3cd2 <_sercom_get_default_pad+0x3e>
    3cb8:	4b3c      	ldr	r3, [pc, #240]	; (3dac <_sercom_get_default_pad+0x118>)
    3cba:	4298      	cmp	r0, r3
    3cbc:	d1f7      	bne.n	3cae <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cbe:	2901      	cmp	r1, #1
    3cc0:	d017      	beq.n	3cf2 <_sercom_get_default_pad+0x5e>
    3cc2:	2900      	cmp	r1, #0
    3cc4:	d05d      	beq.n	3d82 <_sercom_get_default_pad+0xee>
    3cc6:	2902      	cmp	r1, #2
    3cc8:	d015      	beq.n	3cf6 <_sercom_get_default_pad+0x62>
    3cca:	2903      	cmp	r1, #3
    3ccc:	d015      	beq.n	3cfa <_sercom_get_default_pad+0x66>
	return 0;
    3cce:	2000      	movs	r0, #0
    3cd0:	e7ee      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3cd2:	2901      	cmp	r1, #1
    3cd4:	d007      	beq.n	3ce6 <_sercom_get_default_pad+0x52>
    3cd6:	2900      	cmp	r1, #0
    3cd8:	d051      	beq.n	3d7e <_sercom_get_default_pad+0xea>
    3cda:	2902      	cmp	r1, #2
    3cdc:	d005      	beq.n	3cea <_sercom_get_default_pad+0x56>
    3cde:	2903      	cmp	r1, #3
    3ce0:	d005      	beq.n	3cee <_sercom_get_default_pad+0x5a>
	return 0;
    3ce2:	2000      	movs	r0, #0
    3ce4:	e7e4      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3ce6:	4832      	ldr	r0, [pc, #200]	; (3db0 <_sercom_get_default_pad+0x11c>)
    3ce8:	e7e2      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cea:	4832      	ldr	r0, [pc, #200]	; (3db4 <_sercom_get_default_pad+0x120>)
    3cec:	e7e0      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cee:	4832      	ldr	r0, [pc, #200]	; (3db8 <_sercom_get_default_pad+0x124>)
    3cf0:	e7de      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cf2:	4832      	ldr	r0, [pc, #200]	; (3dbc <_sercom_get_default_pad+0x128>)
    3cf4:	e7dc      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cf6:	4832      	ldr	r0, [pc, #200]	; (3dc0 <_sercom_get_default_pad+0x12c>)
    3cf8:	e7da      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cfa:	4832      	ldr	r0, [pc, #200]	; (3dc4 <_sercom_get_default_pad+0x130>)
    3cfc:	e7d8      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3cfe:	2901      	cmp	r1, #1
    3d00:	d007      	beq.n	3d12 <_sercom_get_default_pad+0x7e>
    3d02:	2900      	cmp	r1, #0
    3d04:	d03f      	beq.n	3d86 <_sercom_get_default_pad+0xf2>
    3d06:	2902      	cmp	r1, #2
    3d08:	d005      	beq.n	3d16 <_sercom_get_default_pad+0x82>
    3d0a:	2903      	cmp	r1, #3
    3d0c:	d005      	beq.n	3d1a <_sercom_get_default_pad+0x86>
	return 0;
    3d0e:	2000      	movs	r0, #0
    3d10:	e7ce      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3d12:	482d      	ldr	r0, [pc, #180]	; (3dc8 <_sercom_get_default_pad+0x134>)
    3d14:	e7cc      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d16:	482d      	ldr	r0, [pc, #180]	; (3dcc <_sercom_get_default_pad+0x138>)
    3d18:	e7ca      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d1a:	482d      	ldr	r0, [pc, #180]	; (3dd0 <_sercom_get_default_pad+0x13c>)
    3d1c:	e7c8      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d1e:	2901      	cmp	r1, #1
    3d20:	d007      	beq.n	3d32 <_sercom_get_default_pad+0x9e>
    3d22:	2900      	cmp	r1, #0
    3d24:	d031      	beq.n	3d8a <_sercom_get_default_pad+0xf6>
    3d26:	2902      	cmp	r1, #2
    3d28:	d005      	beq.n	3d36 <_sercom_get_default_pad+0xa2>
    3d2a:	2903      	cmp	r1, #3
    3d2c:	d005      	beq.n	3d3a <_sercom_get_default_pad+0xa6>
	return 0;
    3d2e:	2000      	movs	r0, #0
    3d30:	e7be      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3d32:	4828      	ldr	r0, [pc, #160]	; (3dd4 <_sercom_get_default_pad+0x140>)
    3d34:	e7bc      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d36:	4828      	ldr	r0, [pc, #160]	; (3dd8 <_sercom_get_default_pad+0x144>)
    3d38:	e7ba      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d3a:	4828      	ldr	r0, [pc, #160]	; (3ddc <_sercom_get_default_pad+0x148>)
    3d3c:	e7b8      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d3e:	2901      	cmp	r1, #1
    3d40:	d007      	beq.n	3d52 <_sercom_get_default_pad+0xbe>
    3d42:	2900      	cmp	r1, #0
    3d44:	d023      	beq.n	3d8e <_sercom_get_default_pad+0xfa>
    3d46:	2902      	cmp	r1, #2
    3d48:	d005      	beq.n	3d56 <_sercom_get_default_pad+0xc2>
    3d4a:	2903      	cmp	r1, #3
    3d4c:	d005      	beq.n	3d5a <_sercom_get_default_pad+0xc6>
	return 0;
    3d4e:	2000      	movs	r0, #0
    3d50:	e7ae      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3d52:	4823      	ldr	r0, [pc, #140]	; (3de0 <_sercom_get_default_pad+0x14c>)
    3d54:	e7ac      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d56:	4823      	ldr	r0, [pc, #140]	; (3de4 <_sercom_get_default_pad+0x150>)
    3d58:	e7aa      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d5a:	4823      	ldr	r0, [pc, #140]	; (3de8 <_sercom_get_default_pad+0x154>)
    3d5c:	e7a8      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d5e:	2901      	cmp	r1, #1
    3d60:	d007      	beq.n	3d72 <_sercom_get_default_pad+0xde>
    3d62:	2900      	cmp	r1, #0
    3d64:	d015      	beq.n	3d92 <_sercom_get_default_pad+0xfe>
    3d66:	2902      	cmp	r1, #2
    3d68:	d005      	beq.n	3d76 <_sercom_get_default_pad+0xe2>
    3d6a:	2903      	cmp	r1, #3
    3d6c:	d005      	beq.n	3d7a <_sercom_get_default_pad+0xe6>
	return 0;
    3d6e:	2000      	movs	r0, #0
    3d70:	e79e      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    3d72:	481e      	ldr	r0, [pc, #120]	; (3dec <_sercom_get_default_pad+0x158>)
    3d74:	e79c      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d76:	481e      	ldr	r0, [pc, #120]	; (3df0 <_sercom_get_default_pad+0x15c>)
    3d78:	e79a      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d7a:	481e      	ldr	r0, [pc, #120]	; (3df4 <_sercom_get_default_pad+0x160>)
    3d7c:	e798      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d7e:	481e      	ldr	r0, [pc, #120]	; (3df8 <_sercom_get_default_pad+0x164>)
    3d80:	e796      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d82:	2003      	movs	r0, #3
    3d84:	e794      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d86:	481d      	ldr	r0, [pc, #116]	; (3dfc <_sercom_get_default_pad+0x168>)
    3d88:	e792      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d8a:	481d      	ldr	r0, [pc, #116]	; (3e00 <_sercom_get_default_pad+0x16c>)
    3d8c:	e790      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d8e:	481d      	ldr	r0, [pc, #116]	; (3e04 <_sercom_get_default_pad+0x170>)
    3d90:	e78e      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d92:	481d      	ldr	r0, [pc, #116]	; (3e08 <_sercom_get_default_pad+0x174>)
    3d94:	e78c      	b.n	3cb0 <_sercom_get_default_pad+0x1c>
    3d96:	46c0      	nop			; (mov r8, r8)
    3d98:	42001000 	.word	0x42001000
    3d9c:	42001800 	.word	0x42001800
    3da0:	42001c00 	.word	0x42001c00
    3da4:	42001400 	.word	0x42001400
    3da8:	42000800 	.word	0x42000800
    3dac:	42000c00 	.word	0x42000c00
    3db0:	00050003 	.word	0x00050003
    3db4:	00060003 	.word	0x00060003
    3db8:	00070003 	.word	0x00070003
    3dbc:	00010003 	.word	0x00010003
    3dc0:	001e0003 	.word	0x001e0003
    3dc4:	001f0003 	.word	0x001f0003
    3dc8:	00090003 	.word	0x00090003
    3dcc:	000a0003 	.word	0x000a0003
    3dd0:	000b0003 	.word	0x000b0003
    3dd4:	00110003 	.word	0x00110003
    3dd8:	00120003 	.word	0x00120003
    3ddc:	00130003 	.word	0x00130003
    3de0:	000d0003 	.word	0x000d0003
    3de4:	000e0003 	.word	0x000e0003
    3de8:	000f0003 	.word	0x000f0003
    3dec:	00170003 	.word	0x00170003
    3df0:	00180003 	.word	0x00180003
    3df4:	00190003 	.word	0x00190003
    3df8:	00040003 	.word	0x00040003
    3dfc:	00080003 	.word	0x00080003
    3e00:	00100003 	.word	0x00100003
    3e04:	000c0003 	.word	0x000c0003
    3e08:	00160003 	.word	0x00160003

00003e0c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3e0c:	b530      	push	{r4, r5, lr}
    3e0e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3e10:	4b0b      	ldr	r3, [pc, #44]	; (3e40 <_sercom_get_sercom_inst_index+0x34>)
    3e12:	466a      	mov	r2, sp
    3e14:	cb32      	ldmia	r3!, {r1, r4, r5}
    3e16:	c232      	stmia	r2!, {r1, r4, r5}
    3e18:	cb32      	ldmia	r3!, {r1, r4, r5}
    3e1a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3e1c:	9b00      	ldr	r3, [sp, #0]
    3e1e:	4283      	cmp	r3, r0
    3e20:	d00b      	beq.n	3e3a <_sercom_get_sercom_inst_index+0x2e>
    3e22:	2301      	movs	r3, #1
    3e24:	009a      	lsls	r2, r3, #2
    3e26:	4669      	mov	r1, sp
    3e28:	5852      	ldr	r2, [r2, r1]
    3e2a:	4282      	cmp	r2, r0
    3e2c:	d006      	beq.n	3e3c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e2e:	3301      	adds	r3, #1
    3e30:	2b06      	cmp	r3, #6
    3e32:	d1f7      	bne.n	3e24 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3e34:	2000      	movs	r0, #0
}
    3e36:	b007      	add	sp, #28
    3e38:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e3a:	2300      	movs	r3, #0
			return i;
    3e3c:	b2d8      	uxtb	r0, r3
    3e3e:	e7fa      	b.n	3e36 <_sercom_get_sercom_inst_index+0x2a>
    3e40:	0000ac50 	.word	0x0000ac50

00003e44 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    3e44:	4770      	bx	lr
	...

00003e48 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3e48:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3e4a:	4b0a      	ldr	r3, [pc, #40]	; (3e74 <_sercom_set_handler+0x2c>)
    3e4c:	781b      	ldrb	r3, [r3, #0]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d10c      	bne.n	3e6c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3e52:	4f09      	ldr	r7, [pc, #36]	; (3e78 <_sercom_set_handler+0x30>)
    3e54:	4e09      	ldr	r6, [pc, #36]	; (3e7c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    3e56:	4d0a      	ldr	r5, [pc, #40]	; (3e80 <_sercom_set_handler+0x38>)
    3e58:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3e5a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    3e5c:	195a      	adds	r2, r3, r5
    3e5e:	6014      	str	r4, [r2, #0]
    3e60:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3e62:	2b18      	cmp	r3, #24
    3e64:	d1f9      	bne.n	3e5a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    3e66:	2201      	movs	r2, #1
    3e68:	4b02      	ldr	r3, [pc, #8]	; (3e74 <_sercom_set_handler+0x2c>)
    3e6a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3e6c:	0080      	lsls	r0, r0, #2
    3e6e:	4b02      	ldr	r3, [pc, #8]	; (3e78 <_sercom_set_handler+0x30>)
    3e70:	50c1      	str	r1, [r0, r3]
}
    3e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e74:	200000be 	.word	0x200000be
    3e78:	200000c0 	.word	0x200000c0
    3e7c:	00003e45 	.word	0x00003e45
    3e80:	200003fc 	.word	0x200003fc

00003e84 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3e84:	b500      	push	{lr}
    3e86:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3e88:	2309      	movs	r3, #9
    3e8a:	466a      	mov	r2, sp
    3e8c:	7013      	strb	r3, [r2, #0]
    3e8e:	3301      	adds	r3, #1
    3e90:	7053      	strb	r3, [r2, #1]
    3e92:	3301      	adds	r3, #1
    3e94:	7093      	strb	r3, [r2, #2]
    3e96:	3301      	adds	r3, #1
    3e98:	70d3      	strb	r3, [r2, #3]
    3e9a:	3301      	adds	r3, #1
    3e9c:	7113      	strb	r3, [r2, #4]
    3e9e:	3301      	adds	r3, #1
    3ea0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3ea2:	4b03      	ldr	r3, [pc, #12]	; (3eb0 <_sercom_get_interrupt_vector+0x2c>)
    3ea4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3ea6:	466b      	mov	r3, sp
    3ea8:	5618      	ldrsb	r0, [r3, r0]
}
    3eaa:	b003      	add	sp, #12
    3eac:	bd00      	pop	{pc}
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	00003e0d 	.word	0x00003e0d

00003eb4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3eb4:	b510      	push	{r4, lr}
    3eb6:	4b02      	ldr	r3, [pc, #8]	; (3ec0 <SERCOM0_Handler+0xc>)
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	2000      	movs	r0, #0
    3ebc:	4798      	blx	r3
    3ebe:	bd10      	pop	{r4, pc}
    3ec0:	200000c0 	.word	0x200000c0

00003ec4 <SERCOM1_Handler>:
    3ec4:	b510      	push	{r4, lr}
    3ec6:	4b02      	ldr	r3, [pc, #8]	; (3ed0 <SERCOM1_Handler+0xc>)
    3ec8:	685b      	ldr	r3, [r3, #4]
    3eca:	2001      	movs	r0, #1
    3ecc:	4798      	blx	r3
    3ece:	bd10      	pop	{r4, pc}
    3ed0:	200000c0 	.word	0x200000c0

00003ed4 <SERCOM2_Handler>:
    3ed4:	b510      	push	{r4, lr}
    3ed6:	4b02      	ldr	r3, [pc, #8]	; (3ee0 <SERCOM2_Handler+0xc>)
    3ed8:	689b      	ldr	r3, [r3, #8]
    3eda:	2002      	movs	r0, #2
    3edc:	4798      	blx	r3
    3ede:	bd10      	pop	{r4, pc}
    3ee0:	200000c0 	.word	0x200000c0

00003ee4 <SERCOM3_Handler>:
    3ee4:	b510      	push	{r4, lr}
    3ee6:	4b02      	ldr	r3, [pc, #8]	; (3ef0 <SERCOM3_Handler+0xc>)
    3ee8:	68db      	ldr	r3, [r3, #12]
    3eea:	2003      	movs	r0, #3
    3eec:	4798      	blx	r3
    3eee:	bd10      	pop	{r4, pc}
    3ef0:	200000c0 	.word	0x200000c0

00003ef4 <SERCOM4_Handler>:
    3ef4:	b510      	push	{r4, lr}
    3ef6:	4b02      	ldr	r3, [pc, #8]	; (3f00 <SERCOM4_Handler+0xc>)
    3ef8:	691b      	ldr	r3, [r3, #16]
    3efa:	2004      	movs	r0, #4
    3efc:	4798      	blx	r3
    3efe:	bd10      	pop	{r4, pc}
    3f00:	200000c0 	.word	0x200000c0

00003f04 <SERCOM5_Handler>:
    3f04:	b510      	push	{r4, lr}
    3f06:	4b02      	ldr	r3, [pc, #8]	; (3f10 <SERCOM5_Handler+0xc>)
    3f08:	695b      	ldr	r3, [r3, #20]
    3f0a:	2005      	movs	r0, #5
    3f0c:	4798      	blx	r3
    3f0e:	bd10      	pop	{r4, pc}
    3f10:	200000c0 	.word	0x200000c0

00003f14 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    3f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f16:	b08b      	sub	sp, #44	; 0x2c
    3f18:	0005      	movs	r5, r0
    3f1a:	000c      	movs	r4, r1
    3f1c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3f1e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3f20:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    3f22:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    3f24:	079b      	lsls	r3, r3, #30
    3f26:	d501      	bpl.n	3f2c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    3f28:	b00b      	add	sp, #44	; 0x2c
    3f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3f2c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    3f2e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    3f30:	07db      	lsls	r3, r3, #31
    3f32:	d4f9      	bmi.n	3f28 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3f34:	0008      	movs	r0, r1
    3f36:	4b60      	ldr	r3, [pc, #384]	; (40b8 <spi_init+0x1a4>)
    3f38:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    3f3a:	4a60      	ldr	r2, [pc, #384]	; (40bc <spi_init+0x1a8>)
    3f3c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3f3e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3f40:	2301      	movs	r3, #1
    3f42:	40bb      	lsls	r3, r7
    3f44:	430b      	orrs	r3, r1
    3f46:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    3f48:	a909      	add	r1, sp, #36	; 0x24
    3f4a:	2724      	movs	r7, #36	; 0x24
    3f4c:	5df3      	ldrb	r3, [r6, r7]
    3f4e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3f50:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3f52:	b2c3      	uxtb	r3, r0
    3f54:	9301      	str	r3, [sp, #4]
    3f56:	0018      	movs	r0, r3
    3f58:	4b59      	ldr	r3, [pc, #356]	; (40c0 <spi_init+0x1ac>)
    3f5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3f5c:	9801      	ldr	r0, [sp, #4]
    3f5e:	4b59      	ldr	r3, [pc, #356]	; (40c4 <spi_init+0x1b0>)
    3f60:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3f62:	5df0      	ldrb	r0, [r6, r7]
    3f64:	2100      	movs	r1, #0
    3f66:	4b58      	ldr	r3, [pc, #352]	; (40c8 <spi_init+0x1b4>)
    3f68:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    3f6a:	7833      	ldrb	r3, [r6, #0]
    3f6c:	2b01      	cmp	r3, #1
    3f6e:	d038      	beq.n	3fe2 <spi_init+0xce>
    3f70:	002b      	movs	r3, r5
    3f72:	330c      	adds	r3, #12
    3f74:	0029      	movs	r1, r5
    3f76:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    3f78:	2200      	movs	r2, #0
    3f7a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    3f7c:	428b      	cmp	r3, r1
    3f7e:	d1fc      	bne.n	3f7a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    3f80:	2300      	movs	r3, #0
    3f82:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    3f84:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    3f86:	2400      	movs	r4, #0
    3f88:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    3f8a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    3f8c:	3336      	adds	r3, #54	; 0x36
    3f8e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    3f90:	3301      	adds	r3, #1
    3f92:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    3f94:	3301      	adds	r3, #1
    3f96:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    3f98:	3b35      	subs	r3, #53	; 0x35
    3f9a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    3f9c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    3f9e:	6828      	ldr	r0, [r5, #0]
    3fa0:	4b45      	ldr	r3, [pc, #276]	; (40b8 <spi_init+0x1a4>)
    3fa2:	4798      	blx	r3
    3fa4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    3fa6:	4949      	ldr	r1, [pc, #292]	; (40cc <spi_init+0x1b8>)
    3fa8:	4b49      	ldr	r3, [pc, #292]	; (40d0 <spi_init+0x1bc>)
    3faa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3fac:	00bf      	lsls	r7, r7, #2
    3fae:	4b49      	ldr	r3, [pc, #292]	; (40d4 <spi_init+0x1c0>)
    3fb0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3fb2:	682f      	ldr	r7, [r5, #0]
    3fb4:	ab04      	add	r3, sp, #16
    3fb6:	2280      	movs	r2, #128	; 0x80
    3fb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3fba:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3fbc:	3a7f      	subs	r2, #127	; 0x7f
    3fbe:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3fc0:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    3fc2:	7833      	ldrb	r3, [r6, #0]
    3fc4:	2b00      	cmp	r3, #0
    3fc6:	d102      	bne.n	3fce <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3fc8:	2200      	movs	r2, #0
    3fca:	ab04      	add	r3, sp, #16
    3fcc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    3fce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3fd0:	9305      	str	r3, [sp, #20]
    3fd2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3fd4:	9306      	str	r3, [sp, #24]
    3fd6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3fd8:	9307      	str	r3, [sp, #28]
    3fda:	6b73      	ldr	r3, [r6, #52]	; 0x34
    3fdc:	9308      	str	r3, [sp, #32]
    3fde:	2400      	movs	r4, #0
    3fe0:	e00b      	b.n	3ffa <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    3fe2:	6823      	ldr	r3, [r4, #0]
    3fe4:	220c      	movs	r2, #12
    3fe6:	4313      	orrs	r3, r2
    3fe8:	6023      	str	r3, [r4, #0]
    3fea:	e7c1      	b.n	3f70 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    3fec:	0038      	movs	r0, r7
    3fee:	4b3a      	ldr	r3, [pc, #232]	; (40d8 <spi_init+0x1c4>)
    3ff0:	4798      	blx	r3
    3ff2:	e00a      	b.n	400a <spi_init+0xf6>
    3ff4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    3ff6:	2c04      	cmp	r4, #4
    3ff8:	d010      	beq.n	401c <spi_init+0x108>
    3ffa:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    3ffc:	00a3      	lsls	r3, r4, #2
    3ffe:	aa02      	add	r2, sp, #8
    4000:	200c      	movs	r0, #12
    4002:	1812      	adds	r2, r2, r0
    4004:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4006:	2800      	cmp	r0, #0
    4008:	d0f0      	beq.n	3fec <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    400a:	1c43      	adds	r3, r0, #1
    400c:	d0f2      	beq.n	3ff4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    400e:	a904      	add	r1, sp, #16
    4010:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4012:	0c00      	lsrs	r0, r0, #16
    4014:	b2c0      	uxtb	r0, r0
    4016:	4b31      	ldr	r3, [pc, #196]	; (40dc <spi_init+0x1c8>)
    4018:	4798      	blx	r3
    401a:	e7eb      	b.n	3ff4 <spi_init+0xe0>
	module->mode             = config->mode;
    401c:	7833      	ldrb	r3, [r6, #0]
    401e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    4020:	7c33      	ldrb	r3, [r6, #16]
    4022:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    4024:	7cb3      	ldrb	r3, [r6, #18]
    4026:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4028:	7d33      	ldrb	r3, [r6, #20]
    402a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    402c:	2200      	movs	r2, #0
    402e:	ab02      	add	r3, sp, #8
    4030:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4032:	7833      	ldrb	r3, [r6, #0]
    4034:	2b01      	cmp	r3, #1
    4036:	d028      	beq.n	408a <spi_init+0x176>
	ctrla |= config->transfer_mode;
    4038:	6873      	ldr	r3, [r6, #4]
    403a:	68b2      	ldr	r2, [r6, #8]
    403c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    403e:	68f2      	ldr	r2, [r6, #12]
    4040:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4042:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4044:	7c72      	ldrb	r2, [r6, #17]
    4046:	2a00      	cmp	r2, #0
    4048:	d103      	bne.n	4052 <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    404a:	4a25      	ldr	r2, [pc, #148]	; (40e0 <spi_init+0x1cc>)
    404c:	7892      	ldrb	r2, [r2, #2]
    404e:	0792      	lsls	r2, r2, #30
    4050:	d501      	bpl.n	4056 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4052:	2280      	movs	r2, #128	; 0x80
    4054:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4056:	7cb2      	ldrb	r2, [r6, #18]
    4058:	2a00      	cmp	r2, #0
    405a:	d002      	beq.n	4062 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    405c:	2280      	movs	r2, #128	; 0x80
    405e:	0292      	lsls	r2, r2, #10
    4060:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4062:	7cf2      	ldrb	r2, [r6, #19]
    4064:	2a00      	cmp	r2, #0
    4066:	d002      	beq.n	406e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4068:	2280      	movs	r2, #128	; 0x80
    406a:	0092      	lsls	r2, r2, #2
    406c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    406e:	7d32      	ldrb	r2, [r6, #20]
    4070:	2a00      	cmp	r2, #0
    4072:	d002      	beq.n	407a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4074:	2280      	movs	r2, #128	; 0x80
    4076:	0192      	lsls	r2, r2, #6
    4078:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    407a:	683a      	ldr	r2, [r7, #0]
    407c:	4313      	orrs	r3, r2
    407e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	430b      	orrs	r3, r1
    4084:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    4086:	2000      	movs	r0, #0
    4088:	e74e      	b.n	3f28 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    408a:	6828      	ldr	r0, [r5, #0]
    408c:	4b0a      	ldr	r3, [pc, #40]	; (40b8 <spi_init+0x1a4>)
    408e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4090:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4092:	b2c0      	uxtb	r0, r0
    4094:	4b13      	ldr	r3, [pc, #76]	; (40e4 <spi_init+0x1d0>)
    4096:	4798      	blx	r3
    4098:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    409a:	ab02      	add	r3, sp, #8
    409c:	1d9a      	adds	r2, r3, #6
    409e:	69b0      	ldr	r0, [r6, #24]
    40a0:	4b11      	ldr	r3, [pc, #68]	; (40e8 <spi_init+0x1d4>)
    40a2:	4798      	blx	r3
    40a4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    40a6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    40a8:	2b00      	cmp	r3, #0
    40aa:	d000      	beq.n	40ae <spi_init+0x19a>
    40ac:	e73c      	b.n	3f28 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    40ae:	ab02      	add	r3, sp, #8
    40b0:	3306      	adds	r3, #6
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	733b      	strb	r3, [r7, #12]
    40b6:	e7bf      	b.n	4038 <spi_init+0x124>
    40b8:	00003e0d 	.word	0x00003e0d
    40bc:	40000400 	.word	0x40000400
    40c0:	00004f9d 	.word	0x00004f9d
    40c4:	00004f11 	.word	0x00004f11
    40c8:	00003c49 	.word	0x00003c49
    40cc:	000041e1 	.word	0x000041e1
    40d0:	00003e49 	.word	0x00003e49
    40d4:	200003fc 	.word	0x200003fc
    40d8:	00003c95 	.word	0x00003c95
    40dc:	00005095 	.word	0x00005095
    40e0:	41002000 	.word	0x41002000
    40e4:	00004fb9 	.word	0x00004fb9
    40e8:	00003b8b 	.word	0x00003b8b

000040ec <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    40ec:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    40ee:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    40f0:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    40f2:	2c01      	cmp	r4, #1
    40f4:	d001      	beq.n	40fa <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    40f6:	0018      	movs	r0, r3
    40f8:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    40fa:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    40fc:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    40fe:	2c00      	cmp	r4, #0
    4100:	d1f9      	bne.n	40f6 <spi_select_slave+0xa>
		if (select) {
    4102:	2a00      	cmp	r2, #0
    4104:	d058      	beq.n	41b8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4106:	784b      	ldrb	r3, [r1, #1]
    4108:	2b00      	cmp	r3, #0
    410a:	d044      	beq.n	4196 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    410c:	6803      	ldr	r3, [r0, #0]
    410e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4110:	07db      	lsls	r3, r3, #31
    4112:	d410      	bmi.n	4136 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4114:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4116:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4118:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    411a:	2900      	cmp	r1, #0
    411c:	d104      	bne.n	4128 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    411e:	0953      	lsrs	r3, r2, #5
    4120:	01db      	lsls	r3, r3, #7
    4122:	492e      	ldr	r1, [pc, #184]	; (41dc <spi_select_slave+0xf0>)
    4124:	468c      	mov	ip, r1
    4126:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4128:	211f      	movs	r1, #31
    412a:	4011      	ands	r1, r2
    412c:	2201      	movs	r2, #1
    412e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4130:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4132:	2305      	movs	r3, #5
    4134:	e7df      	b.n	40f6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4136:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4138:	09d4      	lsrs	r4, r2, #7
		return NULL;
    413a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    413c:	2c00      	cmp	r4, #0
    413e:	d104      	bne.n	414a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4140:	0953      	lsrs	r3, r2, #5
    4142:	01db      	lsls	r3, r3, #7
    4144:	4c25      	ldr	r4, [pc, #148]	; (41dc <spi_select_slave+0xf0>)
    4146:	46a4      	mov	ip, r4
    4148:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    414a:	241f      	movs	r4, #31
    414c:	4014      	ands	r4, r2
    414e:	2201      	movs	r2, #1
    4150:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4152:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4154:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4156:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4158:	07d2      	lsls	r2, r2, #31
    415a:	d501      	bpl.n	4160 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    415c:	788a      	ldrb	r2, [r1, #2]
    415e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4160:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4162:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4164:	2a00      	cmp	r2, #0
    4166:	d1c6      	bne.n	40f6 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4168:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    416a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    416c:	7e13      	ldrb	r3, [r2, #24]
    416e:	420b      	tst	r3, r1
    4170:	d0fc      	beq.n	416c <spi_select_slave+0x80>
    4172:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4174:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4176:	0749      	lsls	r1, r1, #29
    4178:	d5bd      	bpl.n	40f6 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    417a:	8b53      	ldrh	r3, [r2, #26]
    417c:	075b      	lsls	r3, r3, #29
    417e:	d501      	bpl.n	4184 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4180:	2304      	movs	r3, #4
    4182:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4184:	7983      	ldrb	r3, [r0, #6]
    4186:	2b01      	cmp	r3, #1
    4188:	d002      	beq.n	4190 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    418a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    418c:	2300      	movs	r3, #0
    418e:	e7b2      	b.n	40f6 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4190:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4192:	2300      	movs	r3, #0
    4194:	e7af      	b.n	40f6 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4196:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4198:	09d1      	lsrs	r1, r2, #7
		return NULL;
    419a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    419c:	2900      	cmp	r1, #0
    419e:	d104      	bne.n	41aa <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    41a0:	0953      	lsrs	r3, r2, #5
    41a2:	01db      	lsls	r3, r3, #7
    41a4:	490d      	ldr	r1, [pc, #52]	; (41dc <spi_select_slave+0xf0>)
    41a6:	468c      	mov	ip, r1
    41a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    41aa:	211f      	movs	r1, #31
    41ac:	4011      	ands	r1, r2
    41ae:	2201      	movs	r2, #1
    41b0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    41b2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    41b4:	2300      	movs	r3, #0
    41b6:	e79e      	b.n	40f6 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    41b8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    41ba:	09d1      	lsrs	r1, r2, #7
		return NULL;
    41bc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    41be:	2900      	cmp	r1, #0
    41c0:	d104      	bne.n	41cc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    41c2:	0953      	lsrs	r3, r2, #5
    41c4:	01db      	lsls	r3, r3, #7
    41c6:	4905      	ldr	r1, [pc, #20]	; (41dc <spi_select_slave+0xf0>)
    41c8:	468c      	mov	ip, r1
    41ca:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    41cc:	211f      	movs	r1, #31
    41ce:	4011      	ands	r1, r2
    41d0:	2201      	movs	r2, #1
    41d2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    41d4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    41d6:	2300      	movs	r3, #0
    41d8:	e78d      	b.n	40f6 <spi_select_slave+0xa>
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	41004400 	.word	0x41004400

000041e0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    41e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    41e2:	0080      	lsls	r0, r0, #2
    41e4:	4b70      	ldr	r3, [pc, #448]	; (43a8 <_spi_interrupt_handler+0x1c8>)
    41e6:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    41e8:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    41ea:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    41ec:	5ce7      	ldrb	r7, [r4, r3]
    41ee:	2236      	movs	r2, #54	; 0x36
    41f0:	5ca2      	ldrb	r2, [r4, r2]
    41f2:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    41f4:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    41f6:	7db5      	ldrb	r5, [r6, #22]
    41f8:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    41fa:	07eb      	lsls	r3, r5, #31
    41fc:	d502      	bpl.n	4204 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    41fe:	7963      	ldrb	r3, [r4, #5]
    4200:	2b01      	cmp	r3, #1
    4202:	d01e      	beq.n	4242 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4204:	076b      	lsls	r3, r5, #29
    4206:	d511      	bpl.n	422c <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4208:	8b73      	ldrh	r3, [r6, #26]
    420a:	075b      	lsls	r3, r3, #29
    420c:	d55a      	bpl.n	42c4 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    420e:	7a63      	ldrb	r3, [r4, #9]
    4210:	2b01      	cmp	r3, #1
    4212:	d008      	beq.n	4226 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4214:	221e      	movs	r2, #30
    4216:	2338      	movs	r3, #56	; 0x38
    4218:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    421a:	3b35      	subs	r3, #53	; 0x35
    421c:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    421e:	3302      	adds	r3, #2
    4220:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4222:	073b      	lsls	r3, r7, #28
    4224:	d44a      	bmi.n	42bc <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4226:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4228:	2304      	movs	r3, #4
    422a:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    422c:	07ab      	lsls	r3, r5, #30
    422e:	d503      	bpl.n	4238 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4230:	7963      	ldrb	r3, [r4, #5]
    4232:	2b01      	cmp	r3, #1
    4234:	d100      	bne.n	4238 <_spi_interrupt_handler+0x58>
    4236:	e097      	b.n	4368 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4238:	b26d      	sxtb	r5, r5
    423a:	2d00      	cmp	r5, #0
    423c:	da00      	bge.n	4240 <_spi_interrupt_handler+0x60>
    423e:	e0a9      	b.n	4394 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    4240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    4242:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    4244:	2b00      	cmp	r3, #0
    4246:	d022      	beq.n	428e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    4248:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    424a:	2b00      	cmp	r3, #0
    424c:	d0da      	beq.n	4204 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    424e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4250:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4252:	7813      	ldrb	r3, [r2, #0]
    4254:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    4256:	1c50      	adds	r0, r2, #1
    4258:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    425a:	79a0      	ldrb	r0, [r4, #6]
    425c:	2801      	cmp	r0, #1
    425e:	d027      	beq.n	42b0 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4260:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    4262:	05db      	lsls	r3, r3, #23
    4264:	0ddb      	lsrs	r3, r3, #23
    4266:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    4268:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    426a:	3b01      	subs	r3, #1
    426c:	b29b      	uxth	r3, r3
    426e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    4270:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4272:	b29b      	uxth	r3, r3
    4274:	2b00      	cmp	r3, #0
    4276:	d1c5      	bne.n	4204 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4278:	3301      	adds	r3, #1
    427a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    427c:	7a63      	ldrb	r3, [r4, #9]
    427e:	2b01      	cmp	r3, #1
    4280:	d1c0      	bne.n	4204 <_spi_interrupt_handler+0x24>
    4282:	79e3      	ldrb	r3, [r4, #7]
    4284:	2b00      	cmp	r3, #0
    4286:	d1bd      	bne.n	4204 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4288:	3302      	adds	r3, #2
    428a:	75b3      	strb	r3, [r6, #22]
    428c:	e7ba      	b.n	4204 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    428e:	4b47      	ldr	r3, [pc, #284]	; (43ac <_spi_interrupt_handler+0x1cc>)
    4290:	881b      	ldrh	r3, [r3, #0]
    4292:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4294:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4296:	3b01      	subs	r3, #1
    4298:	b29b      	uxth	r3, r3
    429a:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    429c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    429e:	b29b      	uxth	r3, r3
    42a0:	2b00      	cmp	r3, #0
    42a2:	d101      	bne.n	42a8 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    42a4:	3301      	adds	r3, #1
    42a6:	7533      	strb	r3, [r6, #20]
		if (0
    42a8:	7963      	ldrb	r3, [r4, #5]
    42aa:	2b01      	cmp	r3, #1
    42ac:	d0cc      	beq.n	4248 <_spi_interrupt_handler+0x68>
    42ae:	e7a9      	b.n	4204 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    42b0:	7850      	ldrb	r0, [r2, #1]
    42b2:	0200      	lsls	r0, r0, #8
    42b4:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    42b6:	3202      	adds	r2, #2
    42b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    42ba:	e7d2      	b.n	4262 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    42bc:	0020      	movs	r0, r4
    42be:	69a3      	ldr	r3, [r4, #24]
    42c0:	4798      	blx	r3
    42c2:	e7b0      	b.n	4226 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    42c4:	7a63      	ldrb	r3, [r4, #9]
    42c6:	2b01      	cmp	r3, #1
    42c8:	d028      	beq.n	431c <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    42ca:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    42cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    42ce:	05db      	lsls	r3, r3, #23
    42d0:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    42d2:	b2da      	uxtb	r2, r3
    42d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    42d6:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    42d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    42da:	1c51      	adds	r1, r2, #1
    42dc:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    42de:	79a1      	ldrb	r1, [r4, #6]
    42e0:	2901      	cmp	r1, #1
    42e2:	d034      	beq.n	434e <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    42e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    42e6:	3b01      	subs	r3, #1
    42e8:	b29b      	uxth	r3, r3
    42ea:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    42ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    42ee:	b29b      	uxth	r3, r3
    42f0:	2b00      	cmp	r3, #0
    42f2:	d000      	beq.n	42f6 <_spi_interrupt_handler+0x116>
    42f4:	e79a      	b.n	422c <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    42f6:	2200      	movs	r2, #0
    42f8:	3338      	adds	r3, #56	; 0x38
    42fa:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    42fc:	3b34      	subs	r3, #52	; 0x34
    42fe:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4300:	7a63      	ldrb	r3, [r4, #9]
    4302:	2b02      	cmp	r3, #2
    4304:	d029      	beq.n	435a <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    4306:	7a63      	ldrb	r3, [r4, #9]
    4308:	2b00      	cmp	r3, #0
    430a:	d000      	beq.n	430e <_spi_interrupt_handler+0x12e>
    430c:	e78e      	b.n	422c <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    430e:	07bb      	lsls	r3, r7, #30
    4310:	d400      	bmi.n	4314 <_spi_interrupt_handler+0x134>
    4312:	e78b      	b.n	422c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4314:	0020      	movs	r0, r4
    4316:	6923      	ldr	r3, [r4, #16]
    4318:	4798      	blx	r3
    431a:	e787      	b.n	422c <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    431c:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    4320:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4322:	3b01      	subs	r3, #1
    4324:	b29b      	uxth	r3, r3
    4326:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    4328:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    432a:	b29b      	uxth	r3, r3
    432c:	2b00      	cmp	r3, #0
    432e:	d000      	beq.n	4332 <_spi_interrupt_handler+0x152>
    4330:	e77c      	b.n	422c <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4332:	3304      	adds	r3, #4
    4334:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4336:	2200      	movs	r2, #0
    4338:	3334      	adds	r3, #52	; 0x34
    433a:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    433c:	3b35      	subs	r3, #53	; 0x35
    433e:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    4340:	07fb      	lsls	r3, r7, #31
    4342:	d400      	bmi.n	4346 <_spi_interrupt_handler+0x166>
    4344:	e772      	b.n	422c <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4346:	0020      	movs	r0, r4
    4348:	68e3      	ldr	r3, [r4, #12]
    434a:	4798      	blx	r3
    434c:	e76e      	b.n	422c <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    434e:	0a1b      	lsrs	r3, r3, #8
    4350:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    4352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4354:	3301      	adds	r3, #1
    4356:	62a3      	str	r3, [r4, #40]	; 0x28
    4358:	e7c4      	b.n	42e4 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    435a:	077b      	lsls	r3, r7, #29
    435c:	d400      	bmi.n	4360 <_spi_interrupt_handler+0x180>
    435e:	e765      	b.n	422c <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4360:	0020      	movs	r0, r4
    4362:	6963      	ldr	r3, [r4, #20]
    4364:	4798      	blx	r3
    4366:	e761      	b.n	422c <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4368:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    436a:	2b01      	cmp	r3, #1
    436c:	d000      	beq.n	4370 <_spi_interrupt_handler+0x190>
    436e:	e763      	b.n	4238 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4370:	79e3      	ldrb	r3, [r4, #7]
    4372:	2b00      	cmp	r3, #0
    4374:	d000      	beq.n	4378 <_spi_interrupt_handler+0x198>
    4376:	e75f      	b.n	4238 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4378:	3302      	adds	r3, #2
    437a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    437c:	3301      	adds	r3, #1
    437e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    4380:	2200      	movs	r2, #0
    4382:	3335      	adds	r3, #53	; 0x35
    4384:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4386:	07fb      	lsls	r3, r7, #31
    4388:	d400      	bmi.n	438c <_spi_interrupt_handler+0x1ac>
    438a:	e755      	b.n	4238 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    438c:	0020      	movs	r0, r4
    438e:	68e3      	ldr	r3, [r4, #12]
    4390:	4798      	blx	r3
    4392:	e751      	b.n	4238 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4394:	2380      	movs	r3, #128	; 0x80
    4396:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4398:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    439a:	067b      	lsls	r3, r7, #25
    439c:	d400      	bmi.n	43a0 <_spi_interrupt_handler+0x1c0>
    439e:	e74f      	b.n	4240 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    43a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43a2:	0020      	movs	r0, r4
    43a4:	4798      	blx	r3
}
    43a6:	e74b      	b.n	4240 <_spi_interrupt_handler+0x60>
    43a8:	200003fc 	.word	0x200003fc
    43ac:	20000414 	.word	0x20000414

000043b0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    43b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b2:	46de      	mov	lr, fp
    43b4:	4657      	mov	r7, sl
    43b6:	464e      	mov	r6, r9
    43b8:	4645      	mov	r5, r8
    43ba:	b5e0      	push	{r5, r6, r7, lr}
    43bc:	b091      	sub	sp, #68	; 0x44
    43be:	0005      	movs	r5, r0
    43c0:	000c      	movs	r4, r1
    43c2:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    43c4:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    43c6:	0008      	movs	r0, r1
    43c8:	4bbc      	ldr	r3, [pc, #752]	; (46bc <usart_init+0x30c>)
    43ca:	4798      	blx	r3
    43cc:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    43ce:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    43d0:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    43d2:	07db      	lsls	r3, r3, #31
    43d4:	d506      	bpl.n	43e4 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    43d6:	b011      	add	sp, #68	; 0x44
    43d8:	bc3c      	pop	{r2, r3, r4, r5}
    43da:	4690      	mov	r8, r2
    43dc:	4699      	mov	r9, r3
    43de:	46a2      	mov	sl, r4
    43e0:	46ab      	mov	fp, r5
    43e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    43e4:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    43e6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    43e8:	079b      	lsls	r3, r3, #30
    43ea:	d4f4      	bmi.n	43d6 <usart_init+0x26>
    43ec:	49b4      	ldr	r1, [pc, #720]	; (46c0 <usart_init+0x310>)
    43ee:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    43f0:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    43f2:	2301      	movs	r3, #1
    43f4:	40bb      	lsls	r3, r7
    43f6:	4303      	orrs	r3, r0
    43f8:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    43fa:	a90f      	add	r1, sp, #60	; 0x3c
    43fc:	272d      	movs	r7, #45	; 0x2d
    43fe:	5df3      	ldrb	r3, [r6, r7]
    4400:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4402:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4404:	b2d3      	uxtb	r3, r2
    4406:	9302      	str	r3, [sp, #8]
    4408:	0018      	movs	r0, r3
    440a:	4bae      	ldr	r3, [pc, #696]	; (46c4 <usart_init+0x314>)
    440c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    440e:	9802      	ldr	r0, [sp, #8]
    4410:	4bad      	ldr	r3, [pc, #692]	; (46c8 <usart_init+0x318>)
    4412:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4414:	5df0      	ldrb	r0, [r6, r7]
    4416:	2100      	movs	r1, #0
    4418:	4bac      	ldr	r3, [pc, #688]	; (46cc <usart_init+0x31c>)
    441a:	4798      	blx	r3
	module->character_size = config->character_size;
    441c:	7af3      	ldrb	r3, [r6, #11]
    441e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4420:	2324      	movs	r3, #36	; 0x24
    4422:	5cf3      	ldrb	r3, [r6, r3]
    4424:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4426:	2325      	movs	r3, #37	; 0x25
    4428:	5cf3      	ldrb	r3, [r6, r3]
    442a:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    442c:	7ef3      	ldrb	r3, [r6, #27]
    442e:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4430:	7f33      	ldrb	r3, [r6, #28]
    4432:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4434:	682b      	ldr	r3, [r5, #0]
    4436:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4438:	0018      	movs	r0, r3
    443a:	4ba0      	ldr	r3, [pc, #640]	; (46bc <usart_init+0x30c>)
    443c:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    443e:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    4440:	2200      	movs	r2, #0
    4442:	230e      	movs	r3, #14
    4444:	a906      	add	r1, sp, #24
    4446:	468c      	mov	ip, r1
    4448:	4463      	add	r3, ip
    444a:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    444c:	8a32      	ldrh	r2, [r6, #16]
    444e:	9202      	str	r2, [sp, #8]
    4450:	2380      	movs	r3, #128	; 0x80
    4452:	01db      	lsls	r3, r3, #7
    4454:	429a      	cmp	r2, r3
    4456:	d100      	bne.n	445a <usart_init+0xaa>
    4458:	e09e      	b.n	4598 <usart_init+0x1e8>
    445a:	d90f      	bls.n	447c <usart_init+0xcc>
    445c:	23c0      	movs	r3, #192	; 0xc0
    445e:	01db      	lsls	r3, r3, #7
    4460:	9a02      	ldr	r2, [sp, #8]
    4462:	429a      	cmp	r2, r3
    4464:	d100      	bne.n	4468 <usart_init+0xb8>
    4466:	e092      	b.n	458e <usart_init+0x1de>
    4468:	2380      	movs	r3, #128	; 0x80
    446a:	021b      	lsls	r3, r3, #8
    446c:	429a      	cmp	r2, r3
    446e:	d000      	beq.n	4472 <usart_init+0xc2>
    4470:	e11f      	b.n	46b2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4472:	2303      	movs	r3, #3
    4474:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4476:	2300      	movs	r3, #0
    4478:	9307      	str	r3, [sp, #28]
    447a:	e008      	b.n	448e <usart_init+0xde>
	switch (config->sample_rate) {
    447c:	2380      	movs	r3, #128	; 0x80
    447e:	019b      	lsls	r3, r3, #6
    4480:	429a      	cmp	r2, r3
    4482:	d000      	beq.n	4486 <usart_init+0xd6>
    4484:	e115      	b.n	46b2 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4486:	2310      	movs	r3, #16
    4488:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    448a:	3b0f      	subs	r3, #15
    448c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    448e:	6833      	ldr	r3, [r6, #0]
    4490:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4492:	68f3      	ldr	r3, [r6, #12]
    4494:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4496:	6973      	ldr	r3, [r6, #20]
    4498:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    449a:	7e33      	ldrb	r3, [r6, #24]
    449c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    449e:	2326      	movs	r3, #38	; 0x26
    44a0:	5cf3      	ldrb	r3, [r6, r3]
    44a2:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    44a4:	6873      	ldr	r3, [r6, #4]
    44a6:	4699      	mov	r9, r3
	switch (transfer_mode)
    44a8:	2b00      	cmp	r3, #0
    44aa:	d100      	bne.n	44ae <usart_init+0xfe>
    44ac:	e0a0      	b.n	45f0 <usart_init+0x240>
    44ae:	2380      	movs	r3, #128	; 0x80
    44b0:	055b      	lsls	r3, r3, #21
    44b2:	4599      	cmp	r9, r3
    44b4:	d100      	bne.n	44b8 <usart_init+0x108>
    44b6:	e084      	b.n	45c2 <usart_init+0x212>
	if(config->encoding_format_enable) {
    44b8:	7e73      	ldrb	r3, [r6, #25]
    44ba:	2b00      	cmp	r3, #0
    44bc:	d002      	beq.n	44c4 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    44be:	7eb3      	ldrb	r3, [r6, #26]
    44c0:	4642      	mov	r2, r8
    44c2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    44c4:	682a      	ldr	r2, [r5, #0]
    44c6:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    44c8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    44ca:	2b00      	cmp	r3, #0
    44cc:	d1fc      	bne.n	44c8 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    44ce:	330e      	adds	r3, #14
    44d0:	aa06      	add	r2, sp, #24
    44d2:	4694      	mov	ip, r2
    44d4:	4463      	add	r3, ip
    44d6:	881b      	ldrh	r3, [r3, #0]
    44d8:	4642      	mov	r2, r8
    44da:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    44dc:	9b05      	ldr	r3, [sp, #20]
    44de:	9a03      	ldr	r2, [sp, #12]
    44e0:	4313      	orrs	r3, r2
    44e2:	9a04      	ldr	r2, [sp, #16]
    44e4:	4313      	orrs	r3, r2
    44e6:	464a      	mov	r2, r9
    44e8:	4313      	orrs	r3, r2
    44ea:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    44ec:	465b      	mov	r3, fp
    44ee:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    44f0:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    44f2:	4653      	mov	r3, sl
    44f4:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    44f6:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    44f8:	2327      	movs	r3, #39	; 0x27
    44fa:	5cf3      	ldrb	r3, [r6, r3]
    44fc:	2b00      	cmp	r3, #0
    44fe:	d101      	bne.n	4504 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4500:	3304      	adds	r3, #4
    4502:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4504:	7e73      	ldrb	r3, [r6, #25]
    4506:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4508:	7f32      	ldrb	r2, [r6, #28]
    450a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    450c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    450e:	7f72      	ldrb	r2, [r6, #29]
    4510:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4512:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4514:	2224      	movs	r2, #36	; 0x24
    4516:	5cb2      	ldrb	r2, [r6, r2]
    4518:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    451a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    451c:	2225      	movs	r2, #37	; 0x25
    451e:	5cb2      	ldrb	r2, [r6, r2]
    4520:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4522:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4524:	7ab1      	ldrb	r1, [r6, #10]
    4526:	7af2      	ldrb	r2, [r6, #11]
    4528:	4311      	orrs	r1, r2
    452a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    452c:	8933      	ldrh	r3, [r6, #8]
    452e:	2bff      	cmp	r3, #255	; 0xff
    4530:	d100      	bne.n	4534 <usart_init+0x184>
    4532:	e081      	b.n	4638 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4534:	2280      	movs	r2, #128	; 0x80
    4536:	0452      	lsls	r2, r2, #17
    4538:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    453a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    453c:	232c      	movs	r3, #44	; 0x2c
    453e:	5cf3      	ldrb	r3, [r6, r3]
    4540:	2b00      	cmp	r3, #0
    4542:	d103      	bne.n	454c <usart_init+0x19c>
    4544:	4b62      	ldr	r3, [pc, #392]	; (46d0 <usart_init+0x320>)
    4546:	789b      	ldrb	r3, [r3, #2]
    4548:	079b      	lsls	r3, r3, #30
    454a:	d501      	bpl.n	4550 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    454c:	2380      	movs	r3, #128	; 0x80
    454e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4550:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4552:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4554:	2b00      	cmp	r3, #0
    4556:	d1fc      	bne.n	4552 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    4558:	4643      	mov	r3, r8
    455a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    455c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    455e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4560:	2b00      	cmp	r3, #0
    4562:	d1fc      	bne.n	455e <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    4564:	4643      	mov	r3, r8
    4566:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4568:	ab0e      	add	r3, sp, #56	; 0x38
    456a:	2280      	movs	r2, #128	; 0x80
    456c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    456e:	2200      	movs	r2, #0
    4570:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4572:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4574:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4576:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4578:	930a      	str	r3, [sp, #40]	; 0x28
    457a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    457c:	930b      	str	r3, [sp, #44]	; 0x2c
    457e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4580:	930c      	str	r3, [sp, #48]	; 0x30
    4582:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4584:	9302      	str	r3, [sp, #8]
    4586:	930d      	str	r3, [sp, #52]	; 0x34
    4588:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    458a:	ae0a      	add	r6, sp, #40	; 0x28
    458c:	e063      	b.n	4656 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    458e:	2308      	movs	r3, #8
    4590:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4592:	3b07      	subs	r3, #7
    4594:	9307      	str	r3, [sp, #28]
    4596:	e77a      	b.n	448e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    4598:	6833      	ldr	r3, [r6, #0]
    459a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    459c:	68f3      	ldr	r3, [r6, #12]
    459e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    45a0:	6973      	ldr	r3, [r6, #20]
    45a2:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    45a4:	7e33      	ldrb	r3, [r6, #24]
    45a6:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    45a8:	2326      	movs	r3, #38	; 0x26
    45aa:	5cf3      	ldrb	r3, [r6, r3]
    45ac:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    45ae:	6873      	ldr	r3, [r6, #4]
    45b0:	4699      	mov	r9, r3
	switch (transfer_mode)
    45b2:	2b00      	cmp	r3, #0
    45b4:	d018      	beq.n	45e8 <usart_init+0x238>
    45b6:	2380      	movs	r3, #128	; 0x80
    45b8:	055b      	lsls	r3, r3, #21
    45ba:	4599      	cmp	r9, r3
    45bc:	d001      	beq.n	45c2 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    45be:	2000      	movs	r0, #0
    45c0:	e025      	b.n	460e <usart_init+0x25e>
			if (!config->use_external_clock) {
    45c2:	2327      	movs	r3, #39	; 0x27
    45c4:	5cf3      	ldrb	r3, [r6, r3]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d000      	beq.n	45cc <usart_init+0x21c>
    45ca:	e775      	b.n	44b8 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    45cc:	6a33      	ldr	r3, [r6, #32]
    45ce:	001f      	movs	r7, r3
    45d0:	b2c0      	uxtb	r0, r0
    45d2:	4b40      	ldr	r3, [pc, #256]	; (46d4 <usart_init+0x324>)
    45d4:	4798      	blx	r3
    45d6:	0001      	movs	r1, r0
    45d8:	220e      	movs	r2, #14
    45da:	ab06      	add	r3, sp, #24
    45dc:	469c      	mov	ip, r3
    45de:	4462      	add	r2, ip
    45e0:	0038      	movs	r0, r7
    45e2:	4b3d      	ldr	r3, [pc, #244]	; (46d8 <usart_init+0x328>)
    45e4:	4798      	blx	r3
    45e6:	e012      	b.n	460e <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    45e8:	2308      	movs	r3, #8
    45ea:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    45ec:	2300      	movs	r3, #0
    45ee:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    45f0:	2327      	movs	r3, #39	; 0x27
    45f2:	5cf3      	ldrb	r3, [r6, r3]
    45f4:	2b00      	cmp	r3, #0
    45f6:	d00e      	beq.n	4616 <usart_init+0x266>
				status_code =
    45f8:	9b06      	ldr	r3, [sp, #24]
    45fa:	9300      	str	r3, [sp, #0]
    45fc:	9b07      	ldr	r3, [sp, #28]
    45fe:	220e      	movs	r2, #14
    4600:	a906      	add	r1, sp, #24
    4602:	468c      	mov	ip, r1
    4604:	4462      	add	r2, ip
    4606:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4608:	6a30      	ldr	r0, [r6, #32]
    460a:	4f34      	ldr	r7, [pc, #208]	; (46dc <usart_init+0x32c>)
    460c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    460e:	2800      	cmp	r0, #0
    4610:	d000      	beq.n	4614 <usart_init+0x264>
    4612:	e6e0      	b.n	43d6 <usart_init+0x26>
    4614:	e750      	b.n	44b8 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    4616:	6a33      	ldr	r3, [r6, #32]
    4618:	001f      	movs	r7, r3
    461a:	b2c0      	uxtb	r0, r0
    461c:	4b2d      	ldr	r3, [pc, #180]	; (46d4 <usart_init+0x324>)
    461e:	4798      	blx	r3
    4620:	0001      	movs	r1, r0
				status_code =
    4622:	9b06      	ldr	r3, [sp, #24]
    4624:	9300      	str	r3, [sp, #0]
    4626:	9b07      	ldr	r3, [sp, #28]
    4628:	220e      	movs	r2, #14
    462a:	a806      	add	r0, sp, #24
    462c:	4684      	mov	ip, r0
    462e:	4462      	add	r2, ip
    4630:	0038      	movs	r0, r7
    4632:	4f2a      	ldr	r7, [pc, #168]	; (46dc <usart_init+0x32c>)
    4634:	47b8      	blx	r7
    4636:	e7ea      	b.n	460e <usart_init+0x25e>
		if(config->lin_slave_enable) {
    4638:	7ef3      	ldrb	r3, [r6, #27]
    463a:	2b00      	cmp	r3, #0
    463c:	d100      	bne.n	4640 <usart_init+0x290>
    463e:	e77d      	b.n	453c <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4640:	2380      	movs	r3, #128	; 0x80
    4642:	04db      	lsls	r3, r3, #19
    4644:	431f      	orrs	r7, r3
    4646:	e779      	b.n	453c <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4648:	0020      	movs	r0, r4
    464a:	4b25      	ldr	r3, [pc, #148]	; (46e0 <usart_init+0x330>)
    464c:	4798      	blx	r3
    464e:	e007      	b.n	4660 <usart_init+0x2b0>
    4650:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4652:	2f04      	cmp	r7, #4
    4654:	d00d      	beq.n	4672 <usart_init+0x2c2>
    4656:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4658:	00bb      	lsls	r3, r7, #2
    465a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    465c:	2800      	cmp	r0, #0
    465e:	d0f3      	beq.n	4648 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    4660:	1c43      	adds	r3, r0, #1
    4662:	d0f5      	beq.n	4650 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4664:	a90e      	add	r1, sp, #56	; 0x38
    4666:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4668:	0c00      	lsrs	r0, r0, #16
    466a:	b2c0      	uxtb	r0, r0
    466c:	4b1d      	ldr	r3, [pc, #116]	; (46e4 <usart_init+0x334>)
    466e:	4798      	blx	r3
    4670:	e7ee      	b.n	4650 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    4672:	2300      	movs	r3, #0
    4674:	60eb      	str	r3, [r5, #12]
    4676:	612b      	str	r3, [r5, #16]
    4678:	616b      	str	r3, [r5, #20]
    467a:	61ab      	str	r3, [r5, #24]
    467c:	61eb      	str	r3, [r5, #28]
    467e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4680:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4682:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4684:	2200      	movs	r2, #0
    4686:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4688:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    468a:	3330      	adds	r3, #48	; 0x30
    468c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    468e:	3301      	adds	r3, #1
    4690:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4692:	3301      	adds	r3, #1
    4694:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4696:	3301      	adds	r3, #1
    4698:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    469a:	6828      	ldr	r0, [r5, #0]
    469c:	4b07      	ldr	r3, [pc, #28]	; (46bc <usart_init+0x30c>)
    469e:	4798      	blx	r3
    46a0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    46a2:	4911      	ldr	r1, [pc, #68]	; (46e8 <usart_init+0x338>)
    46a4:	4b11      	ldr	r3, [pc, #68]	; (46ec <usart_init+0x33c>)
    46a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    46a8:	00a4      	lsls	r4, r4, #2
    46aa:	4b11      	ldr	r3, [pc, #68]	; (46f0 <usart_init+0x340>)
    46ac:	50e5      	str	r5, [r4, r3]
	return status_code;
    46ae:	2000      	movs	r0, #0
    46b0:	e691      	b.n	43d6 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    46b2:	2310      	movs	r3, #16
    46b4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    46b6:	2300      	movs	r3, #0
    46b8:	9307      	str	r3, [sp, #28]
    46ba:	e6e8      	b.n	448e <usart_init+0xde>
    46bc:	00003e0d 	.word	0x00003e0d
    46c0:	40000400 	.word	0x40000400
    46c4:	00004f9d 	.word	0x00004f9d
    46c8:	00004f11 	.word	0x00004f11
    46cc:	00003c49 	.word	0x00003c49
    46d0:	41002000 	.word	0x41002000
    46d4:	00004fb9 	.word	0x00004fb9
    46d8:	00003b8b 	.word	0x00003b8b
    46dc:	00003bb5 	.word	0x00003bb5
    46e0:	00003c95 	.word	0x00003c95
    46e4:	00005095 	.word	0x00005095
    46e8:	00004809 	.word	0x00004809
    46ec:	00003e49 	.word	0x00003e49
    46f0:	200003fc 	.word	0x200003fc

000046f4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    46f4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    46f6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    46f8:	2a00      	cmp	r2, #0
    46fa:	d101      	bne.n	4700 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    46fc:	0018      	movs	r0, r3
    46fe:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4700:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4702:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4704:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4706:	2a00      	cmp	r2, #0
    4708:	d1f8      	bne.n	46fc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    470a:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    470c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    470e:	2a00      	cmp	r2, #0
    4710:	d1fc      	bne.n	470c <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4712:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4714:	2102      	movs	r1, #2
    4716:	7e1a      	ldrb	r2, [r3, #24]
    4718:	420a      	tst	r2, r1
    471a:	d0fc      	beq.n	4716 <usart_write_wait+0x22>
	return STATUS_OK;
    471c:	2300      	movs	r3, #0
    471e:	e7ed      	b.n	46fc <usart_write_wait+0x8>

00004720 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4720:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4722:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4724:	2a00      	cmp	r2, #0
    4726:	d101      	bne.n	472c <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4728:	0018      	movs	r0, r3
    472a:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    472c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    472e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4730:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4732:	2a00      	cmp	r2, #0
    4734:	d1f8      	bne.n	4728 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4736:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4738:	7e10      	ldrb	r0, [r2, #24]
    473a:	0740      	lsls	r0, r0, #29
    473c:	d5f4      	bpl.n	4728 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    473e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4740:	2b00      	cmp	r3, #0
    4742:	d1fc      	bne.n	473e <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4744:	8b53      	ldrh	r3, [r2, #26]
    4746:	b2db      	uxtb	r3, r3
	if (error_code) {
    4748:	0698      	lsls	r0, r3, #26
    474a:	d01d      	beq.n	4788 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    474c:	0798      	lsls	r0, r3, #30
    474e:	d503      	bpl.n	4758 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4750:	2302      	movs	r3, #2
    4752:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4754:	3318      	adds	r3, #24
    4756:	e7e7      	b.n	4728 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4758:	0758      	lsls	r0, r3, #29
    475a:	d503      	bpl.n	4764 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    475c:	2304      	movs	r3, #4
    475e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4760:	331a      	adds	r3, #26
    4762:	e7e1      	b.n	4728 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4764:	07d8      	lsls	r0, r3, #31
    4766:	d503      	bpl.n	4770 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4768:	2301      	movs	r3, #1
    476a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    476c:	3312      	adds	r3, #18
    476e:	e7db      	b.n	4728 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4770:	06d8      	lsls	r0, r3, #27
    4772:	d503      	bpl.n	477c <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4774:	2310      	movs	r3, #16
    4776:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4778:	3332      	adds	r3, #50	; 0x32
    477a:	e7d5      	b.n	4728 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    477c:	069b      	lsls	r3, r3, #26
    477e:	d503      	bpl.n	4788 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4780:	2320      	movs	r3, #32
    4782:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4784:	3321      	adds	r3, #33	; 0x21
    4786:	e7cf      	b.n	4728 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4788:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    478a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    478c:	2300      	movs	r3, #0
    478e:	e7cb      	b.n	4728 <usart_read_wait+0x8>

00004790 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4792:	0004      	movs	r4, r0
    4794:	000d      	movs	r5, r1
    4796:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4798:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    479a:	4b0f      	ldr	r3, [pc, #60]	; (47d8 <_usart_read_buffer+0x48>)
    479c:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    479e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    47a0:	b29b      	uxth	r3, r3
    47a2:	2b00      	cmp	r3, #0
    47a4:	d003      	beq.n	47ae <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    47a6:	4b0d      	ldr	r3, [pc, #52]	; (47dc <_usart_read_buffer+0x4c>)
    47a8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    47aa:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    47ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    47ae:	85a6      	strh	r6, [r4, #44]	; 0x2c
    47b0:	4b0a      	ldr	r3, [pc, #40]	; (47dc <_usart_read_buffer+0x4c>)
    47b2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    47b4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    47b6:	2205      	movs	r2, #5
    47b8:	2332      	movs	r3, #50	; 0x32
    47ba:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    47bc:	3b2e      	subs	r3, #46	; 0x2e
    47be:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    47c0:	7a23      	ldrb	r3, [r4, #8]
    47c2:	2b00      	cmp	r3, #0
    47c4:	d001      	beq.n	47ca <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    47c6:	2320      	movs	r3, #32
    47c8:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    47ca:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    47cc:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    47ce:	2b00      	cmp	r3, #0
    47d0:	d0ec      	beq.n	47ac <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    47d2:	2308      	movs	r3, #8
    47d4:	75bb      	strb	r3, [r7, #22]
    47d6:	e7e9      	b.n	47ac <_usart_read_buffer+0x1c>
    47d8:	00003305 	.word	0x00003305
    47dc:	00003345 	.word	0x00003345

000047e0 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    47e0:	1c93      	adds	r3, r2, #2
    47e2:	009b      	lsls	r3, r3, #2
    47e4:	18c3      	adds	r3, r0, r3
    47e6:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    47e8:	2130      	movs	r1, #48	; 0x30
    47ea:	2301      	movs	r3, #1
    47ec:	4093      	lsls	r3, r2
    47ee:	001a      	movs	r2, r3
    47f0:	5c43      	ldrb	r3, [r0, r1]
    47f2:	4313      	orrs	r3, r2
    47f4:	5443      	strb	r3, [r0, r1]
}
    47f6:	4770      	bx	lr

000047f8 <usart_read_job>:
 * \retval  STATUS_BUSY  If operation was not completed
 */
enum status_code usart_read_job(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    47f8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	/* Call internal read buffer function with length 1 */
	return _usart_read_buffer(module, (uint8_t *)rx_data, 1);
    47fa:	2201      	movs	r2, #1
    47fc:	4b01      	ldr	r3, [pc, #4]	; (4804 <usart_read_job+0xc>)
    47fe:	4798      	blx	r3
}
    4800:	bd10      	pop	{r4, pc}
    4802:	46c0      	nop			; (mov r8, r8)
    4804:	00004791 	.word	0x00004791

00004808 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    480a:	0080      	lsls	r0, r0, #2
    480c:	4b62      	ldr	r3, [pc, #392]	; (4998 <_usart_interrupt_handler+0x190>)
    480e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4810:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4812:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    4814:	2b00      	cmp	r3, #0
    4816:	d1fc      	bne.n	4812 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4818:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    481a:	7da6      	ldrb	r6, [r4, #22]
    481c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    481e:	2330      	movs	r3, #48	; 0x30
    4820:	5ceb      	ldrb	r3, [r5, r3]
    4822:	2231      	movs	r2, #49	; 0x31
    4824:	5caf      	ldrb	r7, [r5, r2]
    4826:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4828:	07f3      	lsls	r3, r6, #31
    482a:	d522      	bpl.n	4872 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    482c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    482e:	b29b      	uxth	r3, r3
    4830:	2b00      	cmp	r3, #0
    4832:	d01c      	beq.n	486e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4834:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4836:	7813      	ldrb	r3, [r2, #0]
    4838:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    483a:	1c51      	adds	r1, r2, #1
    483c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    483e:	7969      	ldrb	r1, [r5, #5]
    4840:	2901      	cmp	r1, #1
    4842:	d00e      	beq.n	4862 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4844:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4846:	05db      	lsls	r3, r3, #23
    4848:	0ddb      	lsrs	r3, r3, #23
    484a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    484c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    484e:	3b01      	subs	r3, #1
    4850:	b29b      	uxth	r3, r3
    4852:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4854:	2b00      	cmp	r3, #0
    4856:	d10c      	bne.n	4872 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4858:	3301      	adds	r3, #1
    485a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    485c:	3301      	adds	r3, #1
    485e:	75a3      	strb	r3, [r4, #22]
    4860:	e007      	b.n	4872 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4862:	7851      	ldrb	r1, [r2, #1]
    4864:	0209      	lsls	r1, r1, #8
    4866:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    4868:	3202      	adds	r2, #2
    486a:	62aa      	str	r2, [r5, #40]	; 0x28
    486c:	e7eb      	b.n	4846 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    486e:	2301      	movs	r3, #1
    4870:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4872:	07b3      	lsls	r3, r6, #30
    4874:	d506      	bpl.n	4884 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4876:	2302      	movs	r3, #2
    4878:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    487a:	2200      	movs	r2, #0
    487c:	3331      	adds	r3, #49	; 0x31
    487e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4880:	07fb      	lsls	r3, r7, #31
    4882:	d41a      	bmi.n	48ba <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4884:	0773      	lsls	r3, r6, #29
    4886:	d565      	bpl.n	4954 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    4888:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    488a:	b29b      	uxth	r3, r3
    488c:	2b00      	cmp	r3, #0
    488e:	d05f      	beq.n	4950 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4890:	8b63      	ldrh	r3, [r4, #26]
    4892:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4894:	071a      	lsls	r2, r3, #28
    4896:	d414      	bmi.n	48c2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4898:	223f      	movs	r2, #63	; 0x3f
    489a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    489c:	2b00      	cmp	r3, #0
    489e:	d034      	beq.n	490a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    48a0:	079a      	lsls	r2, r3, #30
    48a2:	d511      	bpl.n	48c8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    48a4:	221a      	movs	r2, #26
    48a6:	2332      	movs	r3, #50	; 0x32
    48a8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    48aa:	3b30      	subs	r3, #48	; 0x30
    48ac:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    48ae:	077b      	lsls	r3, r7, #29
    48b0:	d550      	bpl.n	4954 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    48b2:	0028      	movs	r0, r5
    48b4:	696b      	ldr	r3, [r5, #20]
    48b6:	4798      	blx	r3
    48b8:	e04c      	b.n	4954 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    48ba:	0028      	movs	r0, r5
    48bc:	68eb      	ldr	r3, [r5, #12]
    48be:	4798      	blx	r3
    48c0:	e7e0      	b.n	4884 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    48c2:	2237      	movs	r2, #55	; 0x37
    48c4:	4013      	ands	r3, r2
    48c6:	e7e9      	b.n	489c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    48c8:	075a      	lsls	r2, r3, #29
    48ca:	d505      	bpl.n	48d8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    48cc:	221e      	movs	r2, #30
    48ce:	2332      	movs	r3, #50	; 0x32
    48d0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    48d2:	3b2e      	subs	r3, #46	; 0x2e
    48d4:	8363      	strh	r3, [r4, #26]
    48d6:	e7ea      	b.n	48ae <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    48d8:	07da      	lsls	r2, r3, #31
    48da:	d505      	bpl.n	48e8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    48dc:	2213      	movs	r2, #19
    48de:	2332      	movs	r3, #50	; 0x32
    48e0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    48e2:	3b31      	subs	r3, #49	; 0x31
    48e4:	8363      	strh	r3, [r4, #26]
    48e6:	e7e2      	b.n	48ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    48e8:	06da      	lsls	r2, r3, #27
    48ea:	d505      	bpl.n	48f8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    48ec:	2242      	movs	r2, #66	; 0x42
    48ee:	2332      	movs	r3, #50	; 0x32
    48f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    48f2:	3b22      	subs	r3, #34	; 0x22
    48f4:	8363      	strh	r3, [r4, #26]
    48f6:	e7da      	b.n	48ae <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    48f8:	2220      	movs	r2, #32
    48fa:	421a      	tst	r2, r3
    48fc:	d0d7      	beq.n	48ae <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    48fe:	3221      	adds	r2, #33	; 0x21
    4900:	2332      	movs	r3, #50	; 0x32
    4902:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4904:	3b12      	subs	r3, #18
    4906:	8363      	strh	r3, [r4, #26]
    4908:	e7d1      	b.n	48ae <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    490a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    490c:	05db      	lsls	r3, r3, #23
    490e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4910:	b2da      	uxtb	r2, r3
    4912:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4914:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4916:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4918:	1c51      	adds	r1, r2, #1
    491a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    491c:	7969      	ldrb	r1, [r5, #5]
    491e:	2901      	cmp	r1, #1
    4920:	d010      	beq.n	4944 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4922:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4924:	3b01      	subs	r3, #1
    4926:	b29b      	uxth	r3, r3
    4928:	85ab      	strh	r3, [r5, #44]	; 0x2c
    492a:	2b00      	cmp	r3, #0
    492c:	d112      	bne.n	4954 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    492e:	3304      	adds	r3, #4
    4930:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4932:	2200      	movs	r2, #0
    4934:	332e      	adds	r3, #46	; 0x2e
    4936:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4938:	07bb      	lsls	r3, r7, #30
    493a:	d50b      	bpl.n	4954 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    493c:	0028      	movs	r0, r5
    493e:	692b      	ldr	r3, [r5, #16]
    4940:	4798      	blx	r3
    4942:	e007      	b.n	4954 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4944:	0a1b      	lsrs	r3, r3, #8
    4946:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    4948:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    494a:	3301      	adds	r3, #1
    494c:	626b      	str	r3, [r5, #36]	; 0x24
    494e:	e7e8      	b.n	4922 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4950:	2304      	movs	r3, #4
    4952:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4954:	06f3      	lsls	r3, r6, #27
    4956:	d504      	bpl.n	4962 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4958:	2310      	movs	r3, #16
    495a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    495c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    495e:	06fb      	lsls	r3, r7, #27
    4960:	d40e      	bmi.n	4980 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4962:	06b3      	lsls	r3, r6, #26
    4964:	d504      	bpl.n	4970 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4966:	2320      	movs	r3, #32
    4968:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    496a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    496c:	073b      	lsls	r3, r7, #28
    496e:	d40b      	bmi.n	4988 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4970:	0733      	lsls	r3, r6, #28
    4972:	d504      	bpl.n	497e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4974:	2308      	movs	r3, #8
    4976:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4978:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    497a:	06bb      	lsls	r3, r7, #26
    497c:	d408      	bmi.n	4990 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4980:	0028      	movs	r0, r5
    4982:	69eb      	ldr	r3, [r5, #28]
    4984:	4798      	blx	r3
    4986:	e7ec      	b.n	4962 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4988:	0028      	movs	r0, r5
    498a:	69ab      	ldr	r3, [r5, #24]
    498c:	4798      	blx	r3
    498e:	e7ef      	b.n	4970 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4990:	6a2b      	ldr	r3, [r5, #32]
    4992:	0028      	movs	r0, r5
    4994:	4798      	blx	r3
}
    4996:	e7f2      	b.n	497e <_usart_interrupt_handler+0x176>
    4998:	200003fc 	.word	0x200003fc

0000499c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    499c:	b510      	push	{r4, lr}
	switch (clock_source) {
    499e:	2808      	cmp	r0, #8
    49a0:	d803      	bhi.n	49aa <system_clock_source_get_hz+0xe>
    49a2:	0080      	lsls	r0, r0, #2
    49a4:	4b1b      	ldr	r3, [pc, #108]	; (4a14 <system_clock_source_get_hz+0x78>)
    49a6:	581b      	ldr	r3, [r3, r0]
    49a8:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    49aa:	2000      	movs	r0, #0
    49ac:	e030      	b.n	4a10 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    49ae:	4b1a      	ldr	r3, [pc, #104]	; (4a18 <system_clock_source_get_hz+0x7c>)
    49b0:	6918      	ldr	r0, [r3, #16]
    49b2:	e02d      	b.n	4a10 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    49b4:	4b19      	ldr	r3, [pc, #100]	; (4a1c <system_clock_source_get_hz+0x80>)
    49b6:	6a1b      	ldr	r3, [r3, #32]
    49b8:	059b      	lsls	r3, r3, #22
    49ba:	0f9b      	lsrs	r3, r3, #30
    49bc:	4818      	ldr	r0, [pc, #96]	; (4a20 <system_clock_source_get_hz+0x84>)
    49be:	40d8      	lsrs	r0, r3
    49c0:	e026      	b.n	4a10 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    49c2:	4b15      	ldr	r3, [pc, #84]	; (4a18 <system_clock_source_get_hz+0x7c>)
    49c4:	6958      	ldr	r0, [r3, #20]
    49c6:	e023      	b.n	4a10 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    49c8:	4b13      	ldr	r3, [pc, #76]	; (4a18 <system_clock_source_get_hz+0x7c>)
    49ca:	681b      	ldr	r3, [r3, #0]
			return 0;
    49cc:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    49ce:	079b      	lsls	r3, r3, #30
    49d0:	d51e      	bpl.n	4a10 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    49d2:	4912      	ldr	r1, [pc, #72]	; (4a1c <system_clock_source_get_hz+0x80>)
    49d4:	2210      	movs	r2, #16
    49d6:	68cb      	ldr	r3, [r1, #12]
    49d8:	421a      	tst	r2, r3
    49da:	d0fc      	beq.n	49d6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    49dc:	4b0e      	ldr	r3, [pc, #56]	; (4a18 <system_clock_source_get_hz+0x7c>)
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	075b      	lsls	r3, r3, #29
    49e2:	d401      	bmi.n	49e8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    49e4:	480f      	ldr	r0, [pc, #60]	; (4a24 <system_clock_source_get_hz+0x88>)
    49e6:	e013      	b.n	4a10 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    49e8:	2000      	movs	r0, #0
    49ea:	4b0f      	ldr	r3, [pc, #60]	; (4a28 <system_clock_source_get_hz+0x8c>)
    49ec:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    49ee:	4b0a      	ldr	r3, [pc, #40]	; (4a18 <system_clock_source_get_hz+0x7c>)
    49f0:	689b      	ldr	r3, [r3, #8]
    49f2:	041b      	lsls	r3, r3, #16
    49f4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    49f6:	4358      	muls	r0, r3
    49f8:	e00a      	b.n	4a10 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    49fa:	2350      	movs	r3, #80	; 0x50
    49fc:	4a07      	ldr	r2, [pc, #28]	; (4a1c <system_clock_source_get_hz+0x80>)
    49fe:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4a00:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4a02:	075b      	lsls	r3, r3, #29
    4a04:	d504      	bpl.n	4a10 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    4a06:	4b04      	ldr	r3, [pc, #16]	; (4a18 <system_clock_source_get_hz+0x7c>)
    4a08:	68d8      	ldr	r0, [r3, #12]
    4a0a:	e001      	b.n	4a10 <system_clock_source_get_hz+0x74>
		return 32768UL;
    4a0c:	2080      	movs	r0, #128	; 0x80
    4a0e:	0200      	lsls	r0, r0, #8
	}
}
    4a10:	bd10      	pop	{r4, pc}
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	0000ac68 	.word	0x0000ac68
    4a18:	200000d8 	.word	0x200000d8
    4a1c:	40000800 	.word	0x40000800
    4a20:	007a1200 	.word	0x007a1200
    4a24:	02dc6c00 	.word	0x02dc6c00
    4a28:	00004fb9 	.word	0x00004fb9

00004a2c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4a2c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4a2e:	490c      	ldr	r1, [pc, #48]	; (4a60 <system_clock_source_osc8m_set_config+0x34>)
    4a30:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4a32:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4a34:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4a36:	7840      	ldrb	r0, [r0, #1]
    4a38:	2201      	movs	r2, #1
    4a3a:	4010      	ands	r0, r2
    4a3c:	0180      	lsls	r0, r0, #6
    4a3e:	2640      	movs	r6, #64	; 0x40
    4a40:	43b3      	bics	r3, r6
    4a42:	4303      	orrs	r3, r0
    4a44:	402a      	ands	r2, r5
    4a46:	01d2      	lsls	r2, r2, #7
    4a48:	2080      	movs	r0, #128	; 0x80
    4a4a:	4383      	bics	r3, r0
    4a4c:	4313      	orrs	r3, r2
    4a4e:	2203      	movs	r2, #3
    4a50:	4022      	ands	r2, r4
    4a52:	0212      	lsls	r2, r2, #8
    4a54:	4803      	ldr	r0, [pc, #12]	; (4a64 <system_clock_source_osc8m_set_config+0x38>)
    4a56:	4003      	ands	r3, r0
    4a58:	4313      	orrs	r3, r2
    4a5a:	620b      	str	r3, [r1, #32]
}
    4a5c:	bd70      	pop	{r4, r5, r6, pc}
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	40000800 	.word	0x40000800
    4a64:	fffffcff 	.word	0xfffffcff

00004a68 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
    4a68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a6a:	46ce      	mov	lr, r9
    4a6c:	4647      	mov	r7, r8
    4a6e:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    4a70:	4b19      	ldr	r3, [pc, #100]	; (4ad8 <system_clock_source_osc32k_set_config+0x70>)
    4a72:	4699      	mov	r9, r3
    4a74:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
    4a76:	7841      	ldrb	r1, [r0, #1]
    4a78:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
    4a7a:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4a7c:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4a7e:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    4a80:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
    4a82:	7880      	ldrb	r0, [r0, #2]
    4a84:	2101      	movs	r1, #1
    4a86:	4008      	ands	r0, r1
    4a88:	0080      	lsls	r0, r0, #2
    4a8a:	2204      	movs	r2, #4
    4a8c:	4393      	bics	r3, r2
    4a8e:	4303      	orrs	r3, r0
    4a90:	4660      	mov	r0, ip
    4a92:	4008      	ands	r0, r1
    4a94:	00c0      	lsls	r0, r0, #3
    4a96:	3204      	adds	r2, #4
    4a98:	4393      	bics	r3, r2
    4a9a:	4303      	orrs	r3, r0
    4a9c:	0038      	movs	r0, r7
    4a9e:	4008      	ands	r0, r1
    4aa0:	0180      	lsls	r0, r0, #6
    4aa2:	2740      	movs	r7, #64	; 0x40
    4aa4:	43bb      	bics	r3, r7
    4aa6:	4303      	orrs	r3, r0
    4aa8:	0030      	movs	r0, r6
    4aaa:	4008      	ands	r0, r1
    4aac:	01c0      	lsls	r0, r0, #7
    4aae:	2680      	movs	r6, #128	; 0x80
    4ab0:	43b3      	bics	r3, r6
    4ab2:	4303      	orrs	r3, r0
    4ab4:	2007      	movs	r0, #7
    4ab6:	4005      	ands	r5, r0
    4ab8:	022d      	lsls	r5, r5, #8
    4aba:	4808      	ldr	r0, [pc, #32]	; (4adc <system_clock_source_osc32k_set_config+0x74>)
    4abc:	4003      	ands	r3, r0
    4abe:	432b      	orrs	r3, r5
    4ac0:	4021      	ands	r1, r4
    4ac2:	0309      	lsls	r1, r1, #12
    4ac4:	4806      	ldr	r0, [pc, #24]	; (4ae0 <system_clock_source_osc32k_set_config+0x78>)
    4ac6:	4003      	ands	r3, r0
    4ac8:	430b      	orrs	r3, r1
    4aca:	464a      	mov	r2, r9
    4acc:	6193      	str	r3, [r2, #24]
}
    4ace:	bc0c      	pop	{r2, r3}
    4ad0:	4690      	mov	r8, r2
    4ad2:	4699      	mov	r9, r3
    4ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ad6:	46c0      	nop			; (mov r8, r8)
    4ad8:	40000800 	.word	0x40000800
    4adc:	fffff8ff 	.word	0xfffff8ff
    4ae0:	ffffefff 	.word	0xffffefff

00004ae4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4ae4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4ae6:	7a03      	ldrb	r3, [r0, #8]
    4ae8:	069b      	lsls	r3, r3, #26
    4aea:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4aec:	8942      	ldrh	r2, [r0, #10]
    4aee:	0592      	lsls	r2, r2, #22
    4af0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4af2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    4af4:	4918      	ldr	r1, [pc, #96]	; (4b58 <system_clock_source_dfll_set_config+0x74>)
    4af6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4af8:	7983      	ldrb	r3, [r0, #6]
    4afa:	79c2      	ldrb	r2, [r0, #7]
    4afc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4afe:	8842      	ldrh	r2, [r0, #2]
    4b00:	8884      	ldrh	r4, [r0, #4]
    4b02:	4322      	orrs	r2, r4
    4b04:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4b06:	7842      	ldrb	r2, [r0, #1]
    4b08:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    4b0a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    4b0c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4b0e:	7803      	ldrb	r3, [r0, #0]
    4b10:	2b04      	cmp	r3, #4
    4b12:	d011      	beq.n	4b38 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4b14:	2b20      	cmp	r3, #32
    4b16:	d10e      	bne.n	4b36 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4b18:	7b03      	ldrb	r3, [r0, #12]
    4b1a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4b1c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4b1e:	4313      	orrs	r3, r2
    4b20:	89c2      	ldrh	r2, [r0, #14]
    4b22:	0412      	lsls	r2, r2, #16
    4b24:	490d      	ldr	r1, [pc, #52]	; (4b5c <system_clock_source_dfll_set_config+0x78>)
    4b26:	400a      	ands	r2, r1
    4b28:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4b2a:	4a0b      	ldr	r2, [pc, #44]	; (4b58 <system_clock_source_dfll_set_config+0x74>)
    4b2c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4b2e:	6811      	ldr	r1, [r2, #0]
    4b30:	4b0b      	ldr	r3, [pc, #44]	; (4b60 <system_clock_source_dfll_set_config+0x7c>)
    4b32:	430b      	orrs	r3, r1
    4b34:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4b36:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4b38:	7b03      	ldrb	r3, [r0, #12]
    4b3a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4b3c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4b3e:	4313      	orrs	r3, r2
    4b40:	89c2      	ldrh	r2, [r0, #14]
    4b42:	0412      	lsls	r2, r2, #16
    4b44:	4905      	ldr	r1, [pc, #20]	; (4b5c <system_clock_source_dfll_set_config+0x78>)
    4b46:	400a      	ands	r2, r1
    4b48:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    4b4a:	4a03      	ldr	r2, [pc, #12]	; (4b58 <system_clock_source_dfll_set_config+0x74>)
    4b4c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    4b4e:	6813      	ldr	r3, [r2, #0]
    4b50:	2104      	movs	r1, #4
    4b52:	430b      	orrs	r3, r1
    4b54:	6013      	str	r3, [r2, #0]
    4b56:	e7ee      	b.n	4b36 <system_clock_source_dfll_set_config+0x52>
    4b58:	200000d8 	.word	0x200000d8
    4b5c:	03ff0000 	.word	0x03ff0000
    4b60:	00000424 	.word	0x00000424

00004b64 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4b64:	2808      	cmp	r0, #8
    4b66:	d803      	bhi.n	4b70 <system_clock_source_enable+0xc>
    4b68:	0080      	lsls	r0, r0, #2
    4b6a:	4b25      	ldr	r3, [pc, #148]	; (4c00 <system_clock_source_enable+0x9c>)
    4b6c:	581b      	ldr	r3, [r3, r0]
    4b6e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4b70:	2017      	movs	r0, #23
    4b72:	e044      	b.n	4bfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4b74:	4a23      	ldr	r2, [pc, #140]	; (4c04 <system_clock_source_enable+0xa0>)
    4b76:	6a13      	ldr	r3, [r2, #32]
    4b78:	2102      	movs	r1, #2
    4b7a:	430b      	orrs	r3, r1
    4b7c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4b7e:	2000      	movs	r0, #0
    4b80:	e03d      	b.n	4bfe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4b82:	4a20      	ldr	r2, [pc, #128]	; (4c04 <system_clock_source_enable+0xa0>)
    4b84:	6993      	ldr	r3, [r2, #24]
    4b86:	2102      	movs	r1, #2
    4b88:	430b      	orrs	r3, r1
    4b8a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    4b8c:	2000      	movs	r0, #0
		break;
    4b8e:	e036      	b.n	4bfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4b90:	4a1c      	ldr	r2, [pc, #112]	; (4c04 <system_clock_source_enable+0xa0>)
    4b92:	8a13      	ldrh	r3, [r2, #16]
    4b94:	2102      	movs	r1, #2
    4b96:	430b      	orrs	r3, r1
    4b98:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    4b9a:	2000      	movs	r0, #0
		break;
    4b9c:	e02f      	b.n	4bfe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4b9e:	4a19      	ldr	r2, [pc, #100]	; (4c04 <system_clock_source_enable+0xa0>)
    4ba0:	8a93      	ldrh	r3, [r2, #20]
    4ba2:	2102      	movs	r1, #2
    4ba4:	430b      	orrs	r3, r1
    4ba6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    4ba8:	2000      	movs	r0, #0
		break;
    4baa:	e028      	b.n	4bfe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4bac:	4916      	ldr	r1, [pc, #88]	; (4c08 <system_clock_source_enable+0xa4>)
    4bae:	680b      	ldr	r3, [r1, #0]
    4bb0:	2202      	movs	r2, #2
    4bb2:	4313      	orrs	r3, r2
    4bb4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4bb6:	4b13      	ldr	r3, [pc, #76]	; (4c04 <system_clock_source_enable+0xa0>)
    4bb8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bba:	0019      	movs	r1, r3
    4bbc:	320e      	adds	r2, #14
    4bbe:	68cb      	ldr	r3, [r1, #12]
    4bc0:	421a      	tst	r2, r3
    4bc2:	d0fc      	beq.n	4bbe <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4bc4:	4a10      	ldr	r2, [pc, #64]	; (4c08 <system_clock_source_enable+0xa4>)
    4bc6:	6891      	ldr	r1, [r2, #8]
    4bc8:	4b0e      	ldr	r3, [pc, #56]	; (4c04 <system_clock_source_enable+0xa0>)
    4bca:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4bcc:	6852      	ldr	r2, [r2, #4]
    4bce:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    4bd0:	2200      	movs	r2, #0
    4bd2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4bd4:	0019      	movs	r1, r3
    4bd6:	3210      	adds	r2, #16
    4bd8:	68cb      	ldr	r3, [r1, #12]
    4bda:	421a      	tst	r2, r3
    4bdc:	d0fc      	beq.n	4bd8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4bde:	4b0a      	ldr	r3, [pc, #40]	; (4c08 <system_clock_source_enable+0xa4>)
    4be0:	681b      	ldr	r3, [r3, #0]
    4be2:	b29b      	uxth	r3, r3
    4be4:	4a07      	ldr	r2, [pc, #28]	; (4c04 <system_clock_source_enable+0xa0>)
    4be6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    4be8:	2000      	movs	r0, #0
    4bea:	e008      	b.n	4bfe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4bec:	4905      	ldr	r1, [pc, #20]	; (4c04 <system_clock_source_enable+0xa0>)
    4bee:	2244      	movs	r2, #68	; 0x44
    4bf0:	5c8b      	ldrb	r3, [r1, r2]
    4bf2:	2002      	movs	r0, #2
    4bf4:	4303      	orrs	r3, r0
    4bf6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    4bf8:	2000      	movs	r0, #0
		break;
    4bfa:	e000      	b.n	4bfe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    4bfc:	2000      	movs	r0, #0
}
    4bfe:	4770      	bx	lr
    4c00:	0000ac8c 	.word	0x0000ac8c
    4c04:	40000800 	.word	0x40000800
    4c08:	200000d8 	.word	0x200000d8

00004c0c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0e:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4c10:	22c2      	movs	r2, #194	; 0xc2
    4c12:	00d2      	lsls	r2, r2, #3
    4c14:	4b44      	ldr	r3, [pc, #272]	; (4d28 <system_clock_init+0x11c>)
    4c16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4c18:	4a44      	ldr	r2, [pc, #272]	; (4d2c <system_clock_init+0x120>)
    4c1a:	6853      	ldr	r3, [r2, #4]
    4c1c:	211e      	movs	r1, #30
    4c1e:	438b      	bics	r3, r1
    4c20:	391a      	subs	r1, #26
    4c22:	430b      	orrs	r3, r1
    4c24:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4c26:	2202      	movs	r2, #2
    4c28:	ab01      	add	r3, sp, #4
    4c2a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4c2c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4c2e:	4d40      	ldr	r5, [pc, #256]	; (4d30 <system_clock_init+0x124>)
    4c30:	b2e0      	uxtb	r0, r4
    4c32:	a901      	add	r1, sp, #4
    4c34:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4c36:	3401      	adds	r4, #1
    4c38:	2c25      	cmp	r4, #37	; 0x25
    4c3a:	d1f9      	bne.n	4c30 <system_clock_init+0x24>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			((*(uint32_t *)SYSCTRL_FUSES_OSC32K_ADDR >> 
    4c3c:	4c3d      	ldr	r4, [pc, #244]	; (4d34 <system_clock_init+0x128>)
	SYSCTRL->OSC32K.bit.CALIB =
    4c3e:	6823      	ldr	r3, [r4, #0]
    4c40:	04db      	lsls	r3, r3, #19
    4c42:	4939      	ldr	r1, [pc, #228]	; (4d28 <system_clock_init+0x11c>)
    4c44:	698a      	ldr	r2, [r1, #24]
    4c46:	0e5b      	lsrs	r3, r3, #25
    4c48:	041b      	lsls	r3, r3, #16
    4c4a:	483b      	ldr	r0, [pc, #236]	; (4d38 <system_clock_init+0x12c>)
    4c4c:	4002      	ands	r2, r0
    4c4e:	4313      	orrs	r3, r2
    4c50:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    4c52:	a80a      	add	r0, sp, #40	; 0x28
    4c54:	2301      	movs	r3, #1
    4c56:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    4c58:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    4c5a:	2500      	movs	r5, #0
    4c5c:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    4c5e:	7103      	strb	r3, [r0, #4]
	config->write_once          = false;
    4c60:	7145      	strb	r5, [r0, #5]
			SYSCTRL_FUSES_OSC32K_Pos) & 0x7Ful);

	struct system_clock_source_osc32k_config osc32k_conf;
	system_clock_source_osc32k_get_config_defaults(&osc32k_conf);

	osc32k_conf.startup_time        = CONF_CLOCK_OSC32K_STARTUP_TIME;
    4c62:	3302      	adds	r3, #2
    4c64:	7003      	strb	r3, [r0, #0]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    4c66:	4b35      	ldr	r3, [pc, #212]	; (4d3c <system_clock_init+0x130>)
    4c68:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    4c6a:	2004      	movs	r0, #4
    4c6c:	4b34      	ldr	r3, [pc, #208]	; (4d40 <system_clock_init+0x134>)
    4c6e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4c70:	ab05      	add	r3, sp, #20
    4c72:	2200      	movs	r2, #0
    4c74:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4c76:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4c78:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4c7a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    4c7c:	213f      	movs	r1, #63	; 0x3f
    4c7e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4c80:	393b      	subs	r1, #59	; 0x3b
    4c82:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4c84:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4c86:	6823      	ldr	r3, [r4, #0]
    4c88:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4c8a:	2b3f      	cmp	r3, #63	; 0x3f
    4c8c:	d04a      	beq.n	4d24 <system_clock_init+0x118>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    4c8e:	a805      	add	r0, sp, #20
    4c90:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    4c92:	4b2c      	ldr	r3, [pc, #176]	; (4d44 <system_clock_init+0x138>)
    4c94:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    4c96:	2307      	movs	r3, #7
    4c98:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    4c9a:	3338      	adds	r3, #56	; 0x38
    4c9c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    4c9e:	4b2a      	ldr	r3, [pc, #168]	; (4d48 <system_clock_init+0x13c>)
    4ca0:	4798      	blx	r3
	config->run_in_standby  = false;
    4ca2:	a804      	add	r0, sp, #16
    4ca4:	2500      	movs	r5, #0
    4ca6:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    4ca8:	2601      	movs	r6, #1
    4caa:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    4cac:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    4cae:	4b27      	ldr	r3, [pc, #156]	; (4d4c <system_clock_init+0x140>)
    4cb0:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    4cb2:	2006      	movs	r0, #6
    4cb4:	4f22      	ldr	r7, [pc, #136]	; (4d40 <system_clock_init+0x134>)
    4cb6:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4cb8:	4b25      	ldr	r3, [pc, #148]	; (4d50 <system_clock_init+0x144>)
    4cba:	4798      	blx	r3
	config->division_factor    = 1;
    4cbc:	ac01      	add	r4, sp, #4
    4cbe:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    4cc0:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    4cc2:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4cc4:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4cc6:	2304      	movs	r3, #4
    4cc8:	7023      	strb	r3, [r4, #0]
    4cca:	0021      	movs	r1, r4
    4ccc:	2001      	movs	r0, #1
    4cce:	4b21      	ldr	r3, [pc, #132]	; (4d54 <system_clock_init+0x148>)
    4cd0:	4798      	blx	r3
    4cd2:	2001      	movs	r0, #1
    4cd4:	4b20      	ldr	r3, [pc, #128]	; (4d58 <system_clock_init+0x14c>)
    4cd6:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4cd8:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4cda:	0021      	movs	r1, r4
    4cdc:	2000      	movs	r0, #0
    4cde:	4b14      	ldr	r3, [pc, #80]	; (4d30 <system_clock_init+0x124>)
    4ce0:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4ce2:	2000      	movs	r0, #0
    4ce4:	4b1d      	ldr	r3, [pc, #116]	; (4d5c <system_clock_init+0x150>)
    4ce6:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    4ce8:	2007      	movs	r0, #7
    4cea:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4cec:	490e      	ldr	r1, [pc, #56]	; (4d28 <system_clock_init+0x11c>)
    4cee:	22d0      	movs	r2, #208	; 0xd0
    4cf0:	68cb      	ldr	r3, [r1, #12]
    4cf2:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4cf4:	2bd0      	cmp	r3, #208	; 0xd0
    4cf6:	d1fb      	bne.n	4cf0 <system_clock_init+0xe4>
	PM->CPUSEL.reg = (uint32_t)divider;
    4cf8:	4a19      	ldr	r2, [pc, #100]	; (4d60 <system_clock_init+0x154>)
    4cfa:	2300      	movs	r3, #0
    4cfc:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    4cfe:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    4d00:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4d02:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    4d04:	a901      	add	r1, sp, #4
    4d06:	2201      	movs	r2, #1
    4d08:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    4d0a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    4d0c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    4d0e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4d10:	3307      	adds	r3, #7
    4d12:	700b      	strb	r3, [r1, #0]
    4d14:	2000      	movs	r0, #0
    4d16:	4b0f      	ldr	r3, [pc, #60]	; (4d54 <system_clock_init+0x148>)
    4d18:	4798      	blx	r3
    4d1a:	2000      	movs	r0, #0
    4d1c:	4b0e      	ldr	r3, [pc, #56]	; (4d58 <system_clock_init+0x14c>)
    4d1e:	4798      	blx	r3
#endif
}
    4d20:	b00d      	add	sp, #52	; 0x34
    4d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    4d24:	3b20      	subs	r3, #32
    4d26:	e7b2      	b.n	4c8e <system_clock_init+0x82>
    4d28:	40000800 	.word	0x40000800
    4d2c:	41004000 	.word	0x41004000
    4d30:	00004f9d 	.word	0x00004f9d
    4d34:	00806024 	.word	0x00806024
    4d38:	ff80ffff 	.word	0xff80ffff
    4d3c:	00004a69 	.word	0x00004a69
    4d40:	00004b65 	.word	0x00004b65
    4d44:	000005b9 	.word	0x000005b9
    4d48:	00004ae5 	.word	0x00004ae5
    4d4c:	00004a2d 	.word	0x00004a2d
    4d50:	00004d65 	.word	0x00004d65
    4d54:	00004d89 	.word	0x00004d89
    4d58:	00004e41 	.word	0x00004e41
    4d5c:	00004f11 	.word	0x00004f11
    4d60:	40000400 	.word	0x40000400

00004d64 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    4d64:	4a06      	ldr	r2, [pc, #24]	; (4d80 <system_gclk_init+0x1c>)
    4d66:	6993      	ldr	r3, [r2, #24]
    4d68:	2108      	movs	r1, #8
    4d6a:	430b      	orrs	r3, r1
    4d6c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    4d6e:	2201      	movs	r2, #1
    4d70:	4b04      	ldr	r3, [pc, #16]	; (4d84 <system_gclk_init+0x20>)
    4d72:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    4d74:	0019      	movs	r1, r3
    4d76:	780b      	ldrb	r3, [r1, #0]
    4d78:	4213      	tst	r3, r2
    4d7a:	d1fc      	bne.n	4d76 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    4d7c:	4770      	bx	lr
    4d7e:	46c0      	nop			; (mov r8, r8)
    4d80:	40000400 	.word	0x40000400
    4d84:	40000c00 	.word	0x40000c00

00004d88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    4d88:	b570      	push	{r4, r5, r6, lr}
    4d8a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4d8c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4d8e:	780d      	ldrb	r5, [r1, #0]
    4d90:	022d      	lsls	r5, r5, #8
    4d92:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    4d94:	784b      	ldrb	r3, [r1, #1]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d002      	beq.n	4da0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    4d9a:	2380      	movs	r3, #128	; 0x80
    4d9c:	02db      	lsls	r3, r3, #11
    4d9e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4da0:	7a4b      	ldrb	r3, [r1, #9]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d002      	beq.n	4dac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4da6:	2380      	movs	r3, #128	; 0x80
    4da8:	031b      	lsls	r3, r3, #12
    4daa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    4dac:	6848      	ldr	r0, [r1, #4]
    4dae:	2801      	cmp	r0, #1
    4db0:	d910      	bls.n	4dd4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4db2:	1e43      	subs	r3, r0, #1
    4db4:	4218      	tst	r0, r3
    4db6:	d134      	bne.n	4e22 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    4db8:	2802      	cmp	r0, #2
    4dba:	d930      	bls.n	4e1e <system_gclk_gen_set_config+0x96>
    4dbc:	2302      	movs	r3, #2
    4dbe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    4dc0:	3201      	adds	r2, #1
						mask <<= 1) {
    4dc2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    4dc4:	4298      	cmp	r0, r3
    4dc6:	d8fb      	bhi.n	4dc0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4dc8:	0212      	lsls	r2, r2, #8
    4dca:	4332      	orrs	r2, r6
    4dcc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4dce:	2380      	movs	r3, #128	; 0x80
    4dd0:	035b      	lsls	r3, r3, #13
    4dd2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4dd4:	7a0b      	ldrb	r3, [r1, #8]
    4dd6:	2b00      	cmp	r3, #0
    4dd8:	d002      	beq.n	4de0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    4dda:	2380      	movs	r3, #128	; 0x80
    4ddc:	039b      	lsls	r3, r3, #14
    4dde:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4de0:	4a13      	ldr	r2, [pc, #76]	; (4e30 <system_gclk_gen_set_config+0xa8>)
    4de2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    4de4:	b25b      	sxtb	r3, r3
    4de6:	2b00      	cmp	r3, #0
    4de8:	dbfb      	blt.n	4de2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    4dea:	4b12      	ldr	r3, [pc, #72]	; (4e34 <system_gclk_gen_set_config+0xac>)
    4dec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4dee:	4b12      	ldr	r3, [pc, #72]	; (4e38 <system_gclk_gen_set_config+0xb0>)
    4df0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4df2:	4a0f      	ldr	r2, [pc, #60]	; (4e30 <system_gclk_gen_set_config+0xa8>)
    4df4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4df6:	b25b      	sxtb	r3, r3
    4df8:	2b00      	cmp	r3, #0
    4dfa:	dbfb      	blt.n	4df4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    4dfc:	4b0c      	ldr	r3, [pc, #48]	; (4e30 <system_gclk_gen_set_config+0xa8>)
    4dfe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e00:	001a      	movs	r2, r3
    4e02:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    4e04:	b25b      	sxtb	r3, r3
    4e06:	2b00      	cmp	r3, #0
    4e08:	dbfb      	blt.n	4e02 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4e0a:	4a09      	ldr	r2, [pc, #36]	; (4e30 <system_gclk_gen_set_config+0xa8>)
    4e0c:	6853      	ldr	r3, [r2, #4]
    4e0e:	2180      	movs	r1, #128	; 0x80
    4e10:	0249      	lsls	r1, r1, #9
    4e12:	400b      	ands	r3, r1
    4e14:	431d      	orrs	r5, r3
    4e16:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    4e18:	4b08      	ldr	r3, [pc, #32]	; (4e3c <system_gclk_gen_set_config+0xb4>)
    4e1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e1c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    4e1e:	2200      	movs	r2, #0
    4e20:	e7d2      	b.n	4dc8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    4e22:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    4e24:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4e26:	2380      	movs	r3, #128	; 0x80
    4e28:	029b      	lsls	r3, r3, #10
    4e2a:	431d      	orrs	r5, r3
    4e2c:	e7d2      	b.n	4dd4 <system_gclk_gen_set_config+0x4c>
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	40000c00 	.word	0x40000c00
    4e34:	00003305 	.word	0x00003305
    4e38:	40000c08 	.word	0x40000c08
    4e3c:	00003345 	.word	0x00003345

00004e40 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    4e40:	b510      	push	{r4, lr}
    4e42:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e44:	4a0b      	ldr	r2, [pc, #44]	; (4e74 <system_gclk_gen_enable+0x34>)
    4e46:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e48:	b25b      	sxtb	r3, r3
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	dbfb      	blt.n	4e46 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    4e4e:	4b0a      	ldr	r3, [pc, #40]	; (4e78 <system_gclk_gen_enable+0x38>)
    4e50:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e52:	4b0a      	ldr	r3, [pc, #40]	; (4e7c <system_gclk_gen_enable+0x3c>)
    4e54:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e56:	4a07      	ldr	r2, [pc, #28]	; (4e74 <system_gclk_gen_enable+0x34>)
    4e58:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e5a:	b25b      	sxtb	r3, r3
    4e5c:	2b00      	cmp	r3, #0
    4e5e:	dbfb      	blt.n	4e58 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    4e60:	4a04      	ldr	r2, [pc, #16]	; (4e74 <system_gclk_gen_enable+0x34>)
    4e62:	6851      	ldr	r1, [r2, #4]
    4e64:	2380      	movs	r3, #128	; 0x80
    4e66:	025b      	lsls	r3, r3, #9
    4e68:	430b      	orrs	r3, r1
    4e6a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    4e6c:	4b04      	ldr	r3, [pc, #16]	; (4e80 <system_gclk_gen_enable+0x40>)
    4e6e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4e70:	bd10      	pop	{r4, pc}
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	40000c00 	.word	0x40000c00
    4e78:	00003305 	.word	0x00003305
    4e7c:	40000c04 	.word	0x40000c04
    4e80:	00003345 	.word	0x00003345

00004e84 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    4e84:	b570      	push	{r4, r5, r6, lr}
    4e86:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e88:	4a1a      	ldr	r2, [pc, #104]	; (4ef4 <system_gclk_gen_get_hz+0x70>)
    4e8a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e8c:	b25b      	sxtb	r3, r3
    4e8e:	2b00      	cmp	r3, #0
    4e90:	dbfb      	blt.n	4e8a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    4e92:	4b19      	ldr	r3, [pc, #100]	; (4ef8 <system_gclk_gen_get_hz+0x74>)
    4e94:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4e96:	4b19      	ldr	r3, [pc, #100]	; (4efc <system_gclk_gen_get_hz+0x78>)
    4e98:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4e9a:	4a16      	ldr	r2, [pc, #88]	; (4ef4 <system_gclk_gen_get_hz+0x70>)
    4e9c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4e9e:	b25b      	sxtb	r3, r3
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	dbfb      	blt.n	4e9c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    4ea4:	4e13      	ldr	r6, [pc, #76]	; (4ef4 <system_gclk_gen_get_hz+0x70>)
    4ea6:	6870      	ldr	r0, [r6, #4]
    4ea8:	04c0      	lsls	r0, r0, #19
    4eaa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4eac:	4b14      	ldr	r3, [pc, #80]	; (4f00 <system_gclk_gen_get_hz+0x7c>)
    4eae:	4798      	blx	r3
    4eb0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4eb2:	4b12      	ldr	r3, [pc, #72]	; (4efc <system_gclk_gen_get_hz+0x78>)
    4eb4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    4eb6:	6876      	ldr	r6, [r6, #4]
    4eb8:	02f6      	lsls	r6, r6, #11
    4eba:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4ebc:	4b11      	ldr	r3, [pc, #68]	; (4f04 <system_gclk_gen_get_hz+0x80>)
    4ebe:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    4ec0:	4a0c      	ldr	r2, [pc, #48]	; (4ef4 <system_gclk_gen_get_hz+0x70>)
    4ec2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    4ec4:	b25b      	sxtb	r3, r3
    4ec6:	2b00      	cmp	r3, #0
    4ec8:	dbfb      	blt.n	4ec2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4eca:	4b0a      	ldr	r3, [pc, #40]	; (4ef4 <system_gclk_gen_get_hz+0x70>)
    4ecc:	689c      	ldr	r4, [r3, #8]
    4ece:	0224      	lsls	r4, r4, #8
    4ed0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    4ed2:	4b0d      	ldr	r3, [pc, #52]	; (4f08 <system_gclk_gen_get_hz+0x84>)
    4ed4:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4ed6:	2e00      	cmp	r6, #0
    4ed8:	d107      	bne.n	4eea <system_gclk_gen_get_hz+0x66>
    4eda:	2c01      	cmp	r4, #1
    4edc:	d907      	bls.n	4eee <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    4ede:	0021      	movs	r1, r4
    4ee0:	0028      	movs	r0, r5
    4ee2:	4b0a      	ldr	r3, [pc, #40]	; (4f0c <system_gclk_gen_get_hz+0x88>)
    4ee4:	4798      	blx	r3
    4ee6:	0005      	movs	r5, r0
    4ee8:	e001      	b.n	4eee <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    4eea:	3401      	adds	r4, #1
    4eec:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    4eee:	0028      	movs	r0, r5
    4ef0:	bd70      	pop	{r4, r5, r6, pc}
    4ef2:	46c0      	nop			; (mov r8, r8)
    4ef4:	40000c00 	.word	0x40000c00
    4ef8:	00003305 	.word	0x00003305
    4efc:	40000c04 	.word	0x40000c04
    4f00:	0000499d 	.word	0x0000499d
    4f04:	40000c08 	.word	0x40000c08
    4f08:	00003345 	.word	0x00003345
    4f0c:	00006f45 	.word	0x00006f45

00004f10 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4f10:	b510      	push	{r4, lr}
    4f12:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4f14:	4b06      	ldr	r3, [pc, #24]	; (4f30 <system_gclk_chan_enable+0x20>)
    4f16:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f18:	4b06      	ldr	r3, [pc, #24]	; (4f34 <system_gclk_chan_enable+0x24>)
    4f1a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4f1c:	4a06      	ldr	r2, [pc, #24]	; (4f38 <system_gclk_chan_enable+0x28>)
    4f1e:	8853      	ldrh	r3, [r2, #2]
    4f20:	2180      	movs	r1, #128	; 0x80
    4f22:	01c9      	lsls	r1, r1, #7
    4f24:	430b      	orrs	r3, r1
    4f26:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    4f28:	4b04      	ldr	r3, [pc, #16]	; (4f3c <system_gclk_chan_enable+0x2c>)
    4f2a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f2c:	bd10      	pop	{r4, pc}
    4f2e:	46c0      	nop			; (mov r8, r8)
    4f30:	00003305 	.word	0x00003305
    4f34:	40000c02 	.word	0x40000c02
    4f38:	40000c00 	.word	0x40000c00
    4f3c:	00003345 	.word	0x00003345

00004f40 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4f40:	b510      	push	{r4, lr}
    4f42:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4f44:	4b0f      	ldr	r3, [pc, #60]	; (4f84 <system_gclk_chan_disable+0x44>)
    4f46:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4f48:	4b0f      	ldr	r3, [pc, #60]	; (4f88 <system_gclk_chan_disable+0x48>)
    4f4a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    4f4c:	4a0f      	ldr	r2, [pc, #60]	; (4f8c <system_gclk_chan_disable+0x4c>)
    4f4e:	8853      	ldrh	r3, [r2, #2]
    4f50:	051b      	lsls	r3, r3, #20
    4f52:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    4f54:	8853      	ldrh	r3, [r2, #2]
    4f56:	490e      	ldr	r1, [pc, #56]	; (4f90 <system_gclk_chan_disable+0x50>)
    4f58:	400b      	ands	r3, r1
    4f5a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    4f5c:	8853      	ldrh	r3, [r2, #2]
    4f5e:	490d      	ldr	r1, [pc, #52]	; (4f94 <system_gclk_chan_disable+0x54>)
    4f60:	400b      	ands	r3, r1
    4f62:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    4f64:	0011      	movs	r1, r2
    4f66:	2280      	movs	r2, #128	; 0x80
    4f68:	01d2      	lsls	r2, r2, #7
    4f6a:	884b      	ldrh	r3, [r1, #2]
    4f6c:	4213      	tst	r3, r2
    4f6e:	d1fc      	bne.n	4f6a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    4f70:	4906      	ldr	r1, [pc, #24]	; (4f8c <system_gclk_chan_disable+0x4c>)
    4f72:	884a      	ldrh	r2, [r1, #2]
    4f74:	0203      	lsls	r3, r0, #8
    4f76:	4806      	ldr	r0, [pc, #24]	; (4f90 <system_gclk_chan_disable+0x50>)
    4f78:	4002      	ands	r2, r0
    4f7a:	4313      	orrs	r3, r2
    4f7c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    4f7e:	4b06      	ldr	r3, [pc, #24]	; (4f98 <system_gclk_chan_disable+0x58>)
    4f80:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4f82:	bd10      	pop	{r4, pc}
    4f84:	00003305 	.word	0x00003305
    4f88:	40000c02 	.word	0x40000c02
    4f8c:	40000c00 	.word	0x40000c00
    4f90:	fffff0ff 	.word	0xfffff0ff
    4f94:	ffffbfff 	.word	0xffffbfff
    4f98:	00003345 	.word	0x00003345

00004f9c <system_gclk_chan_set_config>:
{
    4f9c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    4f9e:	780c      	ldrb	r4, [r1, #0]
    4fa0:	0224      	lsls	r4, r4, #8
    4fa2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    4fa4:	4b02      	ldr	r3, [pc, #8]	; (4fb0 <system_gclk_chan_set_config+0x14>)
    4fa6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    4fa8:	b2a4      	uxth	r4, r4
    4faa:	4b02      	ldr	r3, [pc, #8]	; (4fb4 <system_gclk_chan_set_config+0x18>)
    4fac:	805c      	strh	r4, [r3, #2]
}
    4fae:	bd10      	pop	{r4, pc}
    4fb0:	00004f41 	.word	0x00004f41
    4fb4:	40000c00 	.word	0x40000c00

00004fb8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4fb8:	b510      	push	{r4, lr}
    4fba:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4fbc:	4b06      	ldr	r3, [pc, #24]	; (4fd8 <system_gclk_chan_get_hz+0x20>)
    4fbe:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4fc0:	4b06      	ldr	r3, [pc, #24]	; (4fdc <system_gclk_chan_get_hz+0x24>)
    4fc2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4fc4:	4b06      	ldr	r3, [pc, #24]	; (4fe0 <system_gclk_chan_get_hz+0x28>)
    4fc6:	885c      	ldrh	r4, [r3, #2]
    4fc8:	0524      	lsls	r4, r4, #20
    4fca:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    4fcc:	4b05      	ldr	r3, [pc, #20]	; (4fe4 <system_gclk_chan_get_hz+0x2c>)
    4fce:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4fd0:	0020      	movs	r0, r4
    4fd2:	4b05      	ldr	r3, [pc, #20]	; (4fe8 <system_gclk_chan_get_hz+0x30>)
    4fd4:	4798      	blx	r3
}
    4fd6:	bd10      	pop	{r4, pc}
    4fd8:	00003305 	.word	0x00003305
    4fdc:	40000c02 	.word	0x40000c02
    4fe0:	40000c00 	.word	0x40000c00
    4fe4:	00003345 	.word	0x00003345
    4fe8:	00004e85 	.word	0x00004e85

00004fec <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    4fec:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    4fee:	78d3      	ldrb	r3, [r2, #3]
    4ff0:	2b00      	cmp	r3, #0
    4ff2:	d135      	bne.n	5060 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4ff4:	7813      	ldrb	r3, [r2, #0]
    4ff6:	2b80      	cmp	r3, #128	; 0x80
    4ff8:	d029      	beq.n	504e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    4ffa:	061b      	lsls	r3, r3, #24
    4ffc:	2480      	movs	r4, #128	; 0x80
    4ffe:	0264      	lsls	r4, r4, #9
    5000:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    5002:	7854      	ldrb	r4, [r2, #1]
    5004:	2502      	movs	r5, #2
    5006:	43ac      	bics	r4, r5
    5008:	d106      	bne.n	5018 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    500a:	7894      	ldrb	r4, [r2, #2]
    500c:	2c00      	cmp	r4, #0
    500e:	d120      	bne.n	5052 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    5010:	2480      	movs	r4, #128	; 0x80
    5012:	02a4      	lsls	r4, r4, #10
    5014:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5016:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5018:	7854      	ldrb	r4, [r2, #1]
    501a:	3c01      	subs	r4, #1
    501c:	2c01      	cmp	r4, #1
    501e:	d91c      	bls.n	505a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5020:	040d      	lsls	r5, r1, #16
    5022:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5024:	24a0      	movs	r4, #160	; 0xa0
    5026:	05e4      	lsls	r4, r4, #23
    5028:	432c      	orrs	r4, r5
    502a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    502c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    502e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5030:	24d0      	movs	r4, #208	; 0xd0
    5032:	0624      	lsls	r4, r4, #24
    5034:	432c      	orrs	r4, r5
    5036:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5038:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    503a:	78d4      	ldrb	r4, [r2, #3]
    503c:	2c00      	cmp	r4, #0
    503e:	d122      	bne.n	5086 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5040:	035b      	lsls	r3, r3, #13
    5042:	d51c      	bpl.n	507e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5044:	7893      	ldrb	r3, [r2, #2]
    5046:	2b01      	cmp	r3, #1
    5048:	d01e      	beq.n	5088 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    504a:	6141      	str	r1, [r0, #20]
    504c:	e017      	b.n	507e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    504e:	2300      	movs	r3, #0
    5050:	e7d7      	b.n	5002 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5052:	24c0      	movs	r4, #192	; 0xc0
    5054:	02e4      	lsls	r4, r4, #11
    5056:	4323      	orrs	r3, r4
    5058:	e7dd      	b.n	5016 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    505a:	4c0d      	ldr	r4, [pc, #52]	; (5090 <_system_pinmux_config+0xa4>)
    505c:	4023      	ands	r3, r4
    505e:	e7df      	b.n	5020 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5060:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5062:	040c      	lsls	r4, r1, #16
    5064:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5066:	23a0      	movs	r3, #160	; 0xa0
    5068:	05db      	lsls	r3, r3, #23
    506a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    506c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    506e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5070:	23d0      	movs	r3, #208	; 0xd0
    5072:	061b      	lsls	r3, r3, #24
    5074:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5076:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5078:	78d3      	ldrb	r3, [r2, #3]
    507a:	2b00      	cmp	r3, #0
    507c:	d103      	bne.n	5086 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    507e:	7853      	ldrb	r3, [r2, #1]
    5080:	3b01      	subs	r3, #1
    5082:	2b01      	cmp	r3, #1
    5084:	d902      	bls.n	508c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5086:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5088:	6181      	str	r1, [r0, #24]
    508a:	e7f8      	b.n	507e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    508c:	6081      	str	r1, [r0, #8]
}
    508e:	e7fa      	b.n	5086 <_system_pinmux_config+0x9a>
    5090:	fffbffff 	.word	0xfffbffff

00005094 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5094:	b510      	push	{r4, lr}
    5096:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5098:	09c1      	lsrs	r1, r0, #7
		return NULL;
    509a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    509c:	2900      	cmp	r1, #0
    509e:	d104      	bne.n	50aa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    50a0:	0943      	lsrs	r3, r0, #5
    50a2:	01db      	lsls	r3, r3, #7
    50a4:	4905      	ldr	r1, [pc, #20]	; (50bc <system_pinmux_pin_set_config+0x28>)
    50a6:	468c      	mov	ip, r1
    50a8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    50aa:	241f      	movs	r4, #31
    50ac:	4020      	ands	r0, r4
    50ae:	2101      	movs	r1, #1
    50b0:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    50b2:	0018      	movs	r0, r3
    50b4:	4b02      	ldr	r3, [pc, #8]	; (50c0 <system_pinmux_pin_set_config+0x2c>)
    50b6:	4798      	blx	r3
}
    50b8:	bd10      	pop	{r4, pc}
    50ba:	46c0      	nop			; (mov r8, r8)
    50bc:	41004400 	.word	0x41004400
    50c0:	00004fed 	.word	0x00004fed

000050c4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    50c4:	4770      	bx	lr
	...

000050c8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    50c8:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    50ca:	4b05      	ldr	r3, [pc, #20]	; (50e0 <system_init+0x18>)
    50cc:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    50ce:	4b05      	ldr	r3, [pc, #20]	; (50e4 <system_init+0x1c>)
    50d0:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    50d2:	4b05      	ldr	r3, [pc, #20]	; (50e8 <system_init+0x20>)
    50d4:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    50d6:	4b05      	ldr	r3, [pc, #20]	; (50ec <system_init+0x24>)
    50d8:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    50da:	4b05      	ldr	r3, [pc, #20]	; (50f0 <system_init+0x28>)
    50dc:	4798      	blx	r3
}
    50de:	bd10      	pop	{r4, pc}
    50e0:	00004c0d 	.word	0x00004c0d
    50e4:	00003375 	.word	0x00003375
    50e8:	000050c5 	.word	0x000050c5
    50ec:	000039b5 	.word	0x000039b5
    50f0:	000050c5 	.word	0x000050c5

000050f4 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    50f4:	4b09      	ldr	r3, [pc, #36]	; (511c <_tcc_get_inst_index+0x28>)
    50f6:	4298      	cmp	r0, r3
    50f8:	d00c      	beq.n	5114 <_tcc_get_inst_index+0x20>
    50fa:	4b09      	ldr	r3, [pc, #36]	; (5120 <_tcc_get_inst_index+0x2c>)
    50fc:	4298      	cmp	r0, r3
    50fe:	d007      	beq.n	5110 <_tcc_get_inst_index+0x1c>
    5100:	4a08      	ldr	r2, [pc, #32]	; (5124 <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5102:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    5104:	4290      	cmp	r0, r2
    5106:	d001      	beq.n	510c <_tcc_get_inst_index+0x18>
}
    5108:	0018      	movs	r0, r3
    510a:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    510c:	3302      	adds	r3, #2
    510e:	e002      	b.n	5116 <_tcc_get_inst_index+0x22>
    5110:	2301      	movs	r3, #1
    5112:	e000      	b.n	5116 <_tcc_get_inst_index+0x22>
    5114:	2300      	movs	r3, #0
			return i;
    5116:	b2db      	uxtb	r3, r3
    5118:	e7f6      	b.n	5108 <_tcc_get_inst_index+0x14>
    511a:	46c0      	nop			; (mov r8, r8)
    511c:	42002000 	.word	0x42002000
    5120:	42002400 	.word	0x42002400
    5124:	42002800 	.word	0x42002800

00005128 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5128:	b510      	push	{r4, lr}
    512a:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    512c:	0008      	movs	r0, r1
    512e:	4b4f      	ldr	r3, [pc, #316]	; (526c <tcc_get_config_defaults+0x144>)
    5130:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5132:	2300      	movs	r3, #0
    5134:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5136:	0080      	lsls	r0, r0, #2
    5138:	4a4d      	ldr	r2, [pc, #308]	; (5270 <tcc_get_config_defaults+0x148>)
    513a:	5882      	ldr	r2, [r0, r2]
    513c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    513e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5140:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5142:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5144:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5146:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5148:	61e3      	str	r3, [r4, #28]
    514a:	6223      	str	r3, [r4, #32]
    514c:	6263      	str	r3, [r4, #36]	; 0x24
    514e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5150:	7523      	strb	r3, [r4, #20]
    5152:	7563      	strb	r3, [r4, #21]
    5154:	75a3      	strb	r3, [r4, #22]
    5156:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    5158:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    515a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    515c:	7423      	strb	r3, [r4, #16]
    515e:	7463      	strb	r3, [r4, #17]
    5160:	74a3      	strb	r3, [r4, #18]
    5162:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    5164:	222c      	movs	r2, #44	; 0x2c
    5166:	54a3      	strb	r3, [r4, r2]
    5168:	3201      	adds	r2, #1
    516a:	54a3      	strb	r3, [r4, r2]
    516c:	3201      	adds	r2, #1
    516e:	54a3      	strb	r3, [r4, r2]
    5170:	3201      	adds	r2, #1
    5172:	54a3      	strb	r3, [r4, r2]
    5174:	3201      	adds	r2, #1
    5176:	54a3      	strb	r3, [r4, r2]
    5178:	3201      	adds	r2, #1
    517a:	54a3      	strb	r3, [r4, r2]
    517c:	3201      	adds	r2, #1
    517e:	54a3      	strb	r3, [r4, r2]
    5180:	3201      	adds	r2, #1
    5182:	54a3      	strb	r3, [r4, r2]
    5184:	3201      	adds	r2, #1
    5186:	54a3      	strb	r3, [r4, r2]
    5188:	3201      	adds	r2, #1
    518a:	54a3      	strb	r3, [r4, r2]
    518c:	3201      	adds	r2, #1
    518e:	54a3      	strb	r3, [r4, r2]
    5190:	3201      	adds	r2, #1
    5192:	54a3      	strb	r3, [r4, r2]
    5194:	3201      	adds	r2, #1
    5196:	54a3      	strb	r3, [r4, r2]
    5198:	3201      	adds	r2, #1
    519a:	54a3      	strb	r3, [r4, r2]
    519c:	3201      	adds	r2, #1
    519e:	54a3      	strb	r3, [r4, r2]
    51a0:	3201      	adds	r2, #1
    51a2:	54a3      	strb	r3, [r4, r2]
    51a4:	3201      	adds	r2, #1
    51a6:	54a3      	strb	r3, [r4, r2]
    51a8:	3201      	adds	r2, #1
    51aa:	54a3      	strb	r3, [r4, r2]
    51ac:	3201      	adds	r2, #1
    51ae:	54a3      	strb	r3, [r4, r2]
    51b0:	3201      	adds	r2, #1
    51b2:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    51b4:	3201      	adds	r2, #1
    51b6:	54a3      	strb	r3, [r4, r2]
    51b8:	3201      	adds	r2, #1
    51ba:	54a3      	strb	r3, [r4, r2]
    51bc:	3201      	adds	r2, #1
    51be:	54a3      	strb	r3, [r4, r2]
    51c0:	3201      	adds	r2, #1
    51c2:	54a3      	strb	r3, [r4, r2]
    51c4:	3201      	adds	r2, #1
    51c6:	54a3      	strb	r3, [r4, r2]
    51c8:	3201      	adds	r2, #1
    51ca:	54a3      	strb	r3, [r4, r2]
    51cc:	3201      	adds	r2, #1
    51ce:	54a3      	strb	r3, [r4, r2]
    51d0:	3201      	adds	r2, #1
    51d2:	54a3      	strb	r3, [r4, r2]
    51d4:	3201      	adds	r2, #1
    51d6:	54a3      	strb	r3, [r4, r2]
    51d8:	3201      	adds	r2, #1
    51da:	54a3      	strb	r3, [r4, r2]
    51dc:	3201      	adds	r2, #1
    51de:	54a3      	strb	r3, [r4, r2]
    51e0:	3201      	adds	r2, #1
    51e2:	54a3      	strb	r3, [r4, r2]
    51e4:	3201      	adds	r2, #1
    51e6:	54a3      	strb	r3, [r4, r2]
    51e8:	3201      	adds	r2, #1
    51ea:	54a3      	strb	r3, [r4, r2]
    51ec:	3201      	adds	r2, #1
    51ee:	54a3      	strb	r3, [r4, r2]
    51f0:	3201      	adds	r2, #1
    51f2:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    51f4:	3201      	adds	r2, #1
    51f6:	54a3      	strb	r3, [r4, r2]
    51f8:	3201      	adds	r2, #1
    51fa:	54a3      	strb	r3, [r4, r2]
    51fc:	3201      	adds	r2, #1
    51fe:	54a3      	strb	r3, [r4, r2]
    5200:	3201      	adds	r2, #1
    5202:	54a3      	strb	r3, [r4, r2]
    5204:	3201      	adds	r2, #1
    5206:	54a3      	strb	r3, [r4, r2]
    5208:	3201      	adds	r2, #1
    520a:	54a3      	strb	r3, [r4, r2]
    520c:	3201      	adds	r2, #1
    520e:	54a3      	strb	r3, [r4, r2]
    5210:	3201      	adds	r2, #1
    5212:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5214:	3241      	adds	r2, #65	; 0x41
    5216:	54a3      	strb	r3, [r4, r2]
    5218:	65a3      	str	r3, [r4, #88]	; 0x58
    521a:	67a3      	str	r3, [r4, #120]	; 0x78
    521c:	3201      	adds	r2, #1
    521e:	54a3      	strb	r3, [r4, r2]
    5220:	65e3      	str	r3, [r4, #92]	; 0x5c
    5222:	67e3      	str	r3, [r4, #124]	; 0x7c
    5224:	3201      	adds	r2, #1
    5226:	54a3      	strb	r3, [r4, r2]
    5228:	6623      	str	r3, [r4, #96]	; 0x60
    522a:	3a1a      	subs	r2, #26
    522c:	50a3      	str	r3, [r4, r2]
    522e:	321b      	adds	r2, #27
    5230:	54a3      	strb	r3, [r4, r2]
    5232:	6663      	str	r3, [r4, #100]	; 0x64
    5234:	3a17      	subs	r2, #23
    5236:	50a3      	str	r3, [r4, r2]
    5238:	3218      	adds	r2, #24
    523a:	54a3      	strb	r3, [r4, r2]
    523c:	66a3      	str	r3, [r4, #104]	; 0x68
    523e:	3a14      	subs	r2, #20
    5240:	50a3      	str	r3, [r4, r2]
    5242:	3215      	adds	r2, #21
    5244:	54a3      	strb	r3, [r4, r2]
    5246:	66e3      	str	r3, [r4, #108]	; 0x6c
    5248:	3a11      	subs	r2, #17
    524a:	50a3      	str	r3, [r4, r2]
    524c:	3212      	adds	r2, #18
    524e:	54a3      	strb	r3, [r4, r2]
    5250:	6723      	str	r3, [r4, #112]	; 0x70
    5252:	3a0e      	subs	r2, #14
    5254:	50a3      	str	r3, [r4, r2]
    5256:	320f      	adds	r2, #15
    5258:	54a3      	strb	r3, [r4, r2]
    525a:	6763      	str	r3, [r4, #116]	; 0x74
    525c:	3a0b      	subs	r2, #11
    525e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    5260:	2101      	movs	r1, #1
    5262:	320c      	adds	r2, #12
    5264:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    5266:	3201      	adds	r2, #1
    5268:	54a3      	strb	r3, [r4, r2]
}
    526a:	bd10      	pop	{r4, pc}
    526c:	000050f5 	.word	0x000050f5
    5270:	0000acc4 	.word	0x0000acc4

00005274 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    5274:	b5f0      	push	{r4, r5, r6, r7, lr}
    5276:	46de      	mov	lr, fp
    5278:	4657      	mov	r7, sl
    527a:	464e      	mov	r6, r9
    527c:	4645      	mov	r5, r8
    527e:	b5e0      	push	{r5, r6, r7, lr}
    5280:	b091      	sub	sp, #68	; 0x44
    5282:	9001      	str	r0, [sp, #4]
    5284:	000c      	movs	r4, r1
    5286:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    5288:	0008      	movs	r0, r1
    528a:	4bc3      	ldr	r3, [pc, #780]	; (5598 <tcc_init+0x324>)
    528c:	4798      	blx	r3
    528e:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    5290:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    5292:	48c2      	ldr	r0, [pc, #776]	; (559c <tcc_init+0x328>)
    5294:	6a02      	ldr	r2, [r0, #32]
    5296:	009e      	lsls	r6, r3, #2
    5298:	4fc1      	ldr	r7, [pc, #772]	; (55a0 <tcc_init+0x32c>)
    529a:	59f7      	ldr	r7, [r6, r7]
    529c:	433a      	orrs	r2, r7
    529e:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52a0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    52a2:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    52a4:	0792      	lsls	r2, r2, #30
    52a6:	d506      	bpl.n	52b6 <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    52a8:	b011      	add	sp, #68	; 0x44
    52aa:	bc3c      	pop	{r2, r3, r4, r5}
    52ac:	4690      	mov	r8, r2
    52ae:	4699      	mov	r9, r3
    52b0:	46a2      	mov	sl, r4
    52b2:	46ab      	mov	fp, r5
    52b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    52b6:	6822      	ldr	r2, [r4, #0]
    52b8:	2701      	movs	r7, #1
    52ba:	4017      	ands	r7, r2
    52bc:	d1f4      	bne.n	52a8 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    52be:	48b9      	ldr	r0, [pc, #740]	; (55a4 <tcc_init+0x330>)
    52c0:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    52c2:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    52c4:	682e      	ldr	r6, [r5, #0]
    52c6:	42b2      	cmp	r2, r6
    52c8:	d3ee      	bcc.n	52a8 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    52ca:	686e      	ldr	r6, [r5, #4]
    52cc:	42b2      	cmp	r2, r6
    52ce:	d3eb      	bcc.n	52a8 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    52d0:	69e8      	ldr	r0, [r5, #28]
    52d2:	4282      	cmp	r2, r0
    52d4:	d200      	bcs.n	52d8 <tcc_init+0x64>
    52d6:	e1b9      	b.n	564c <tcc_init+0x3d8>
    52d8:	6a28      	ldr	r0, [r5, #32]
    52da:	4282      	cmp	r2, r0
    52dc:	d200      	bcs.n	52e0 <tcc_init+0x6c>
    52de:	e1b7      	b.n	5650 <tcc_init+0x3dc>
    52e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
    52e2:	4282      	cmp	r2, r0
    52e4:	d200      	bcs.n	52e8 <tcc_init+0x74>
    52e6:	e1b5      	b.n	5654 <tcc_init+0x3e0>
    52e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    52ea:	4282      	cmp	r2, r0
    52ec:	d200      	bcs.n	52f0 <tcc_init+0x7c>
    52ee:	e1b3      	b.n	5658 <tcc_init+0x3e4>
    52f0:	2298      	movs	r2, #152	; 0x98
    52f2:	4694      	mov	ip, r2
    52f4:	44ac      	add	ip, r5
    52f6:	4662      	mov	r2, ip
    52f8:	9208      	str	r2, [sp, #32]
    52fa:	2000      	movs	r0, #0
    52fc:	e003      	b.n	5306 <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    52fe:	3001      	adds	r0, #1
    5300:	3201      	adds	r2, #1
    5302:	2808      	cmp	r0, #8
    5304:	d008      	beq.n	5318 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    5306:	7816      	ldrb	r6, [r2, #0]
    5308:	2e00      	cmp	r6, #0
    530a:	d0f8      	beq.n	52fe <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    530c:	4ea6      	ldr	r6, [pc, #664]	; (55a8 <tcc_init+0x334>)
    530e:	5c76      	ldrb	r6, [r6, r1]
    5310:	4286      	cmp	r6, r0
    5312:	dcf4      	bgt.n	52fe <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    5314:	2017      	movs	r0, #23
    5316:	e7c7      	b.n	52a8 <tcc_init+0x34>
    5318:	2200      	movs	r2, #0
    531a:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    531c:	2080      	movs	r0, #128	; 0x80
    531e:	0440      	lsls	r0, r0, #17
    5320:	4684      	mov	ip, r0
    5322:	e002      	b.n	532a <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5324:	3201      	adds	r2, #1
    5326:	2a04      	cmp	r2, #4
    5328:	d00e      	beq.n	5348 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    532a:	18a8      	adds	r0, r5, r2
    532c:	7c00      	ldrb	r0, [r0, #16]
    532e:	2801      	cmp	r0, #1
    5330:	d1f8      	bne.n	5324 <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    5332:	489e      	ldr	r0, [pc, #632]	; (55ac <tcc_init+0x338>)
    5334:	5c40      	ldrb	r0, [r0, r1]
    5336:	4290      	cmp	r0, r2
    5338:	da00      	bge.n	533c <tcc_init+0xc8>
    533a:	e18f      	b.n	565c <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    533c:	4660      	mov	r0, ip
    533e:	4090      	lsls	r0, r2
    5340:	9e02      	ldr	r6, [sp, #8]
    5342:	4306      	orrs	r6, r0
    5344:	9602      	str	r6, [sp, #8]
    5346:	e7ed      	b.n	5324 <tcc_init+0xb0>
	if (config->run_in_standby) {
    5348:	329d      	adds	r2, #157	; 0x9d
    534a:	5caa      	ldrb	r2, [r5, r2]
    534c:	2a00      	cmp	r2, #0
    534e:	d004      	beq.n	535a <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5350:	2280      	movs	r2, #128	; 0x80
    5352:	0112      	lsls	r2, r2, #4
    5354:	9902      	ldr	r1, [sp, #8]
    5356:	4311      	orrs	r1, r2
    5358:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    535a:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    535c:	1e51      	subs	r1, r2, #1
    535e:	418a      	sbcs	r2, r1
    5360:	0092      	lsls	r2, r2, #2
    5362:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    5364:	7a6a      	ldrb	r2, [r5, #9]
    5366:	2a01      	cmp	r2, #1
    5368:	d022      	beq.n	53b0 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    536a:	4a90      	ldr	r2, [pc, #576]	; (55ac <tcc_init+0x338>)
    536c:	5cd2      	ldrb	r2, [r2, r3]
    536e:	0011      	movs	r1, r2
    5370:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    5372:	2235      	movs	r2, #53	; 0x35
    5374:	5caa      	ldrb	r2, [r5, r2]
    5376:	428a      	cmp	r2, r1
    5378:	d300      	bcc.n	537c <tcc_init+0x108>
    537a:	e179      	b.n	5670 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    537c:	212c      	movs	r1, #44	; 0x2c
    537e:	5c69      	ldrb	r1, [r5, r1]
    5380:	290f      	cmp	r1, #15
    5382:	d900      	bls.n	5386 <tcc_init+0x112>
    5384:	e174      	b.n	5670 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5386:	7b28      	ldrb	r0, [r5, #12]
    5388:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    538a:	7ae8      	ldrb	r0, [r5, #11]
    538c:	900b      	str	r0, [sp, #44]	; 0x2c
    538e:	202d      	movs	r0, #45	; 0x2d
    5390:	4682      	mov	sl, r0
    5392:	44aa      	add	sl, r5
    5394:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5396:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    5398:	ae0e      	add	r6, sp, #56	; 0x38
    539a:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    539c:	26c0      	movs	r6, #192	; 0xc0
    539e:	0136      	lsls	r6, r6, #4
    53a0:	46b1      	mov	r9, r6
    53a2:	4684      	mov	ip, r0
    53a4:	46a0      	mov	r8, r4
    53a6:	0028      	movs	r0, r5
    53a8:	4655      	mov	r5, sl
    53aa:	9309      	str	r3, [sp, #36]	; 0x24
    53ac:	4682      	mov	sl, r0
    53ae:	e035      	b.n	541c <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    53b0:	9906      	ldr	r1, [sp, #24]
    53b2:	4311      	orrs	r1, r2
    53b4:	9106      	str	r1, [sp, #24]
    53b6:	e7d8      	b.n	536a <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    53b8:	0292      	lsls	r2, r2, #10
    53ba:	464f      	mov	r7, r9
    53bc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    53be:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    53c0:	7919      	ldrb	r1, [r3, #4]
    53c2:	468b      	mov	fp, r1
    53c4:	2103      	movs	r1, #3
    53c6:	465f      	mov	r7, fp
    53c8:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    53ca:	430a      	orrs	r2, r1
    53cc:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    53ce:	795a      	ldrb	r2, [r3, #5]
    53d0:	0152      	lsls	r2, r2, #5
    53d2:	2160      	movs	r1, #96	; 0x60
    53d4:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    53d6:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    53d8:	7999      	ldrb	r1, [r3, #6]
    53da:	0209      	lsls	r1, r1, #8
    53dc:	26c0      	movs	r6, #192	; 0xc0
    53de:	00b6      	lsls	r6, r6, #2
    53e0:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    53e2:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    53e4:	79da      	ldrb	r2, [r3, #7]
    53e6:	0312      	lsls	r2, r2, #12
    53e8:	21e0      	movs	r1, #224	; 0xe0
    53ea:	01c9      	lsls	r1, r1, #7
    53ec:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    53ee:	4316      	orrs	r6, r2
    53f0:	4334      	orrs	r4, r6
    53f2:	9a03      	ldr	r2, [sp, #12]
    53f4:	4314      	orrs	r4, r2
    53f6:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    53f8:	4662      	mov	r2, ip
    53fa:	9907      	ldr	r1, [sp, #28]
    53fc:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    53fe:	2a04      	cmp	r2, #4
    5400:	d02a      	beq.n	5458 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    5402:	7c9a      	ldrb	r2, [r3, #18]
    5404:	9905      	ldr	r1, [sp, #20]
    5406:	4291      	cmp	r1, r2
    5408:	d800      	bhi.n	540c <tcc_init+0x198>
    540a:	e131      	b.n	5670 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    540c:	7a59      	ldrb	r1, [r3, #9]
    540e:	350a      	adds	r5, #10
    5410:	2304      	movs	r3, #4
    5412:	469b      	mov	fp, r3
    5414:	44dc      	add	ip, fp
    5416:	290f      	cmp	r1, #15
    5418:	d900      	bls.n	541c <tcc_init+0x1a8>
    541a:	e129      	b.n	5670 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    541c:	0609      	lsls	r1, r1, #24
    541e:	23f0      	movs	r3, #240	; 0xf0
    5420:	051b      	lsls	r3, r3, #20
    5422:	4019      	ands	r1, r3
    5424:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    5426:	782e      	ldrb	r6, [r5, #0]
    5428:	0436      	lsls	r6, r6, #16
    542a:	20ff      	movs	r0, #255	; 0xff
    542c:	0400      	lsls	r0, r0, #16
    542e:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5430:	7868      	ldrb	r0, [r5, #1]
    5432:	2480      	movs	r4, #128	; 0x80
    5434:	2800      	cmp	r0, #0
    5436:	d100      	bne.n	543a <tcc_init+0x1c6>
    5438:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    543a:	7898      	ldrb	r0, [r3, #2]
    543c:	2708      	movs	r7, #8
    543e:	9703      	str	r7, [sp, #12]
    5440:	2800      	cmp	r0, #0
    5442:	d101      	bne.n	5448 <tcc_init+0x1d4>
    5444:	9804      	ldr	r0, [sp, #16]
    5446:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    5448:	78d8      	ldrb	r0, [r3, #3]
    544a:	4683      	mov	fp, r0
    544c:	2010      	movs	r0, #16
    544e:	465f      	mov	r7, fp
    5450:	2f00      	cmp	r7, #0
    5452:	d1b1      	bne.n	53b8 <tcc_init+0x144>
    5454:	9804      	ldr	r0, [sp, #16]
    5456:	e7af      	b.n	53b8 <tcc_init+0x144>
    5458:	4644      	mov	r4, r8
    545a:	4655      	mov	r5, sl
    545c:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    545e:	4a52      	ldr	r2, [pc, #328]	; (55a8 <tcc_init+0x334>)
    5460:	5cd2      	ldrb	r2, [r2, r3]
    5462:	4691      	mov	r9, r2
    5464:	4651      	mov	r1, sl
    5466:	3150      	adds	r1, #80	; 0x50
    5468:	4650      	mov	r0, sl
    546a:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    546c:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    546e:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5470:	2601      	movs	r6, #1
    5472:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    5474:	2602      	movs	r6, #2
    5476:	36ff      	adds	r6, #255	; 0xff
    5478:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    547a:	2680      	movs	r6, #128	; 0x80
    547c:	0276      	lsls	r6, r6, #9
    547e:	46b0      	mov	r8, r6
    5480:	46a4      	mov	ip, r4
    5482:	001c      	movs	r4, r3
    5484:	464b      	mov	r3, r9
    5486:	e00f      	b.n	54a8 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    5488:	7806      	ldrb	r6, [r0, #0]
    548a:	2e00      	cmp	r6, #0
    548c:	d007      	beq.n	549e <tcc_init+0x22a>
			if (i >= ow_num) {
    548e:	4293      	cmp	r3, r2
    5490:	d800      	bhi.n	5494 <tcc_init+0x220>
    5492:	e0e7      	b.n	5664 <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    5494:	2e02      	cmp	r6, #2
    5496:	d014      	beq.n	54c2 <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5498:	4656      	mov	r6, sl
    549a:	4096      	lsls	r6, r2
    549c:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    549e:	3201      	adds	r2, #1
    54a0:	3101      	adds	r1, #1
    54a2:	3002      	adds	r0, #2
    54a4:	2a08      	cmp	r2, #8
    54a6:	d010      	beq.n	54ca <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    54a8:	780e      	ldrb	r6, [r1, #0]
    54aa:	2e00      	cmp	r6, #0
    54ac:	d0ec      	beq.n	5488 <tcc_init+0x214>
			if (i >= ow_num) {
    54ae:	4293      	cmp	r3, r2
    54b0:	d800      	bhi.n	54b4 <tcc_init+0x240>
    54b2:	e0d5      	b.n	5660 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    54b4:	4646      	mov	r6, r8
    54b6:	4096      	lsls	r6, r2
    54b8:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    54ba:	7806      	ldrb	r6, [r0, #0]
    54bc:	2e00      	cmp	r6, #0
    54be:	d1e9      	bne.n	5494 <tcc_init+0x220>
    54c0:	e7ed      	b.n	549e <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    54c2:	465e      	mov	r6, fp
    54c4:	4096      	lsls	r6, r2
    54c6:	4337      	orrs	r7, r6
    54c8:	e7e9      	b.n	549e <tcc_init+0x22a>
    54ca:	4699      	mov	r9, r3
    54cc:	0023      	movs	r3, r4
    54ce:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    54d0:	7e6a      	ldrb	r2, [r5, #25]
    54d2:	0112      	lsls	r2, r2, #4
    54d4:	2130      	movs	r1, #48	; 0x30
    54d6:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    54d8:	7e28      	ldrb	r0, [r5, #24]
    54da:	2207      	movs	r2, #7
    54dc:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    54de:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    54e0:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    54e2:	2080      	movs	r0, #128	; 0x80
    54e4:	0240      	lsls	r0, r0, #9
    54e6:	000e      	movs	r6, r1
    54e8:	e002      	b.n	54f0 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    54ea:	3201      	adds	r2, #1
    54ec:	2a04      	cmp	r2, #4
    54ee:	d00b      	beq.n	5508 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    54f0:	18a9      	adds	r1, r5, r2
    54f2:	7d09      	ldrb	r1, [r1, #20]
    54f4:	2900      	cmp	r1, #0
    54f6:	d0f8      	beq.n	54ea <tcc_init+0x276>
			if (n >= cc_num) {
    54f8:	9905      	ldr	r1, [sp, #20]
    54fa:	4291      	cmp	r1, r2
    54fc:	dc00      	bgt.n	5500 <tcc_init+0x28c>
    54fe:	e0b3      	b.n	5668 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    5500:	0001      	movs	r1, r0
    5502:	4091      	lsls	r1, r2
    5504:	430e      	orrs	r6, r1
    5506:	e7f0      	b.n	54ea <tcc_init+0x276>
    5508:	46b2      	mov	sl, r6
    550a:	9801      	ldr	r0, [sp, #4]
    550c:	0002      	movs	r2, r0
    550e:	3204      	adds	r2, #4
    5510:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    5512:	2100      	movs	r1, #0
    5514:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5516:	4282      	cmp	r2, r0
    5518:	d1fc      	bne.n	5514 <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    551a:	2200      	movs	r2, #0
    551c:	9801      	ldr	r0, [sp, #4]
    551e:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    5520:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5522:	0099      	lsls	r1, r3, #2
    5524:	4a22      	ldr	r2, [pc, #136]	; (55b0 <tcc_init+0x33c>)
    5526:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    5528:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    552a:	22a0      	movs	r2, #160	; 0xa0
    552c:	5ca9      	ldrb	r1, [r5, r2]
    552e:	3a64      	subs	r2, #100	; 0x64
    5530:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    5532:	a90d      	add	r1, sp, #52	; 0x34
    5534:	7aaa      	ldrb	r2, [r5, #10]
    5536:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5538:	4a1e      	ldr	r2, [pc, #120]	; (55b4 <tcc_init+0x340>)
    553a:	5cd6      	ldrb	r6, [r2, r3]
    553c:	0030      	movs	r0, r6
    553e:	4b1e      	ldr	r3, [pc, #120]	; (55b8 <tcc_init+0x344>)
    5540:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    5542:	0030      	movs	r0, r6
    5544:	4b1d      	ldr	r3, [pc, #116]	; (55bc <tcc_init+0x348>)
    5546:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    5548:	464b      	mov	r3, r9
    554a:	2b00      	cmp	r3, #0
    554c:	dd3c      	ble.n	55c8 <tcc_init+0x354>
    554e:	002e      	movs	r6, r5
    5550:	3658      	adds	r6, #88	; 0x58
    5552:	3398      	adds	r3, #152	; 0x98
    5554:	4698      	mov	r8, r3
    5556:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5558:	2301      	movs	r3, #1
    555a:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    555c:	46ab      	mov	fp, r5
    555e:	4645      	mov	r5, r8
    5560:	46a0      	mov	r8, r4
    5562:	9c08      	ldr	r4, [sp, #32]
    5564:	e003      	b.n	556e <tcc_init+0x2fa>
    5566:	3401      	adds	r4, #1
    5568:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    556a:	42ac      	cmp	r4, r5
    556c:	d02a      	beq.n	55c4 <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    556e:	7823      	ldrb	r3, [r4, #0]
    5570:	2b00      	cmp	r3, #0
    5572:	d0f8      	beq.n	5566 <tcc_init+0x2f2>
    5574:	ab0c      	add	r3, sp, #48	; 0x30
    5576:	464a      	mov	r2, r9
    5578:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    557a:	2300      	movs	r3, #0
    557c:	aa0c      	add	r2, sp, #48	; 0x30
    557e:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    5580:	0013      	movs	r3, r2
    5582:	2220      	movs	r2, #32
    5584:	18b2      	adds	r2, r6, r2
    5586:	7812      	ldrb	r2, [r2, #0]
    5588:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    558a:	464a      	mov	r2, r9
    558c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    558e:	7830      	ldrb	r0, [r6, #0]
    5590:	0019      	movs	r1, r3
    5592:	4b0b      	ldr	r3, [pc, #44]	; (55c0 <tcc_init+0x34c>)
    5594:	4798      	blx	r3
    5596:	e7e6      	b.n	5566 <tcc_init+0x2f2>
    5598:	000050f5 	.word	0x000050f5
    559c:	40000400 	.word	0x40000400
    55a0:	0000acb0 	.word	0x0000acb0
    55a4:	0000acc4 	.word	0x0000acc4
    55a8:	0000acd0 	.word	0x0000acd0
    55ac:	0000acbc 	.word	0x0000acbc
    55b0:	20000418 	.word	0x20000418
    55b4:	0000acc0 	.word	0x0000acc0
    55b8:	00004f9d 	.word	0x00004f9d
    55bc:	00004f11 	.word	0x00004f11
    55c0:	00005095 	.word	0x00005095
    55c4:	4644      	mov	r4, r8
    55c6:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    55c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    55ca:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    55cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    55ce:	0212      	lsls	r2, r2, #8
    55d0:	4313      	orrs	r3, r2
    55d2:	9a02      	ldr	r2, [sp, #8]
    55d4:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    55d6:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    55d8:	2204      	movs	r2, #4
    55da:	68a3      	ldr	r3, [r4, #8]
    55dc:	421a      	tst	r2, r3
    55de:	d1fc      	bne.n	55da <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    55e0:	23ff      	movs	r3, #255	; 0xff
    55e2:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    55e4:	2204      	movs	r2, #4
    55e6:	68a3      	ldr	r3, [r4, #8]
    55e8:	421a      	tst	r2, r3
    55ea:	d1fc      	bne.n	55e6 <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    55ec:	466b      	mov	r3, sp
    55ee:	7e1b      	ldrb	r3, [r3, #24]
    55f0:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    55f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    55f4:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    55f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    55f8:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    55fa:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    55fc:	4a1d      	ldr	r2, [pc, #116]	; (5674 <tcc_init+0x400>)
    55fe:	68a3      	ldr	r3, [r4, #8]
    5600:	4213      	tst	r3, r2
    5602:	d1fc      	bne.n	55fe <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    5604:	4653      	mov	r3, sl
    5606:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5608:	2210      	movs	r2, #16
    560a:	68a3      	ldr	r3, [r4, #8]
    560c:	421a      	tst	r2, r3
    560e:	d1fc      	bne.n	560a <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    5610:	682b      	ldr	r3, [r5, #0]
    5612:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5614:	4a18      	ldr	r2, [pc, #96]	; (5678 <tcc_init+0x404>)
    5616:	68a3      	ldr	r3, [r4, #8]
    5618:	4213      	tst	r3, r2
    561a:	d1fc      	bne.n	5616 <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    561c:	686b      	ldr	r3, [r5, #4]
    561e:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5620:	9805      	ldr	r0, [sp, #20]
    5622:	2800      	cmp	r0, #0
    5624:	dd22      	ble.n	566c <tcc_init+0x3f8>
    5626:	351c      	adds	r5, #28
    5628:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    562a:	4e14      	ldr	r6, [pc, #80]	; (567c <tcc_init+0x408>)
    562c:	0032      	movs	r2, r6
    562e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    5630:	68a3      	ldr	r3, [r4, #8]
    5632:	421a      	tst	r2, r3
    5634:	d1fc      	bne.n	5630 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    5636:	cd04      	ldmia	r5!, {r2}
    5638:	000b      	movs	r3, r1
    563a:	3310      	adds	r3, #16
    563c:	009b      	lsls	r3, r3, #2
    563e:	18e3      	adds	r3, r4, r3
    5640:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5642:	3101      	adds	r1, #1
    5644:	4288      	cmp	r0, r1
    5646:	dcf1      	bgt.n	562c <tcc_init+0x3b8>
	return STATUS_OK;
    5648:	2000      	movs	r0, #0
    564a:	e62d      	b.n	52a8 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    564c:	2017      	movs	r0, #23
    564e:	e62b      	b.n	52a8 <tcc_init+0x34>
    5650:	2017      	movs	r0, #23
    5652:	e629      	b.n	52a8 <tcc_init+0x34>
    5654:	2017      	movs	r0, #23
    5656:	e627      	b.n	52a8 <tcc_init+0x34>
    5658:	2017      	movs	r0, #23
    565a:	e625      	b.n	52a8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    565c:	2017      	movs	r0, #23
    565e:	e623      	b.n	52a8 <tcc_init+0x34>
			if (i >= ow_num) {
    5660:	2017      	movs	r0, #23
    5662:	e621      	b.n	52a8 <tcc_init+0x34>
			if (i >= ow_num) {
    5664:	2017      	movs	r0, #23
    5666:	e61f      	b.n	52a8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5668:	2017      	movs	r0, #23
    566a:	e61d      	b.n	52a8 <tcc_init+0x34>
	return STATUS_OK;
    566c:	2000      	movs	r0, #0
    566e:	e61b      	b.n	52a8 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    5670:	2017      	movs	r0, #23
    5672:	e619      	b.n	52a8 <tcc_init+0x34>
    5674:	00020040 	.word	0x00020040
    5678:	00040080 	.word	0x00040080
    567c:	00080100 	.word	0x00080100

00005680 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5680:	0092      	lsls	r2, r2, #2
    5682:	1883      	adds	r3, r0, r2
    5684:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    5686:	4b03      	ldr	r3, [pc, #12]	; (5694 <tcc_register_callback+0x14>)
    5688:	58d3      	ldr	r3, [r2, r3]
    568a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    568c:	4313      	orrs	r3, r2
    568e:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    5690:	2000      	movs	r0, #0
    5692:	4770      	bx	lr
    5694:	0000acd4 	.word	0x0000acd4

00005698 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5698:	b570      	push	{r4, r5, r6, lr}
    569a:	0004      	movs	r4, r0
    569c:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    569e:	6800      	ldr	r0, [r0, #0]
    56a0:	4b09      	ldr	r3, [pc, #36]	; (56c8 <tcc_enable_callback+0x30>)
    56a2:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    56a4:	4b09      	ldr	r3, [pc, #36]	; (56cc <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    56a6:	5c1b      	ldrb	r3, [r3, r0]
    56a8:	221f      	movs	r2, #31
    56aa:	401a      	ands	r2, r3
    56ac:	2301      	movs	r3, #1
    56ae:	4093      	lsls	r3, r2
    56b0:	4a07      	ldr	r2, [pc, #28]	; (56d0 <tcc_enable_callback+0x38>)
    56b2:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    56b4:	00ad      	lsls	r5, r5, #2
    56b6:	4b07      	ldr	r3, [pc, #28]	; (56d4 <tcc_enable_callback+0x3c>)
    56b8:	58ea      	ldr	r2, [r5, r3]
    56ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    56bc:	4313      	orrs	r3, r2
    56be:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    56c0:	6823      	ldr	r3, [r4, #0]
    56c2:	629a      	str	r2, [r3, #40]	; 0x28
}
    56c4:	bd70      	pop	{r4, r5, r6, pc}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	000050f5 	.word	0x000050f5
    56cc:	0000ad04 	.word	0x0000ad04
    56d0:	e000e100 	.word	0xe000e100
    56d4:	0000acd4 	.word	0x0000acd4

000056d8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    56d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56da:	46c6      	mov	lr, r8
    56dc:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    56de:	0080      	lsls	r0, r0, #2
    56e0:	4b0e      	ldr	r3, [pc, #56]	; (571c <_tcc_interrupt_handler+0x44>)
    56e2:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    56e4:	683b      	ldr	r3, [r7, #0]
    56e6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    56e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    56ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    56ec:	4013      	ands	r3, r2
    56ee:	401e      	ands	r6, r3
    56f0:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    56f2:	4b0b      	ldr	r3, [pc, #44]	; (5720 <_tcc_interrupt_handler+0x48>)
    56f4:	4698      	mov	r8, r3
    56f6:	e002      	b.n	56fe <_tcc_interrupt_handler+0x26>
    56f8:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    56fa:	2c30      	cmp	r4, #48	; 0x30
    56fc:	d00a      	beq.n	5714 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    56fe:	4643      	mov	r3, r8
    5700:	58e5      	ldr	r5, [r4, r3]
    5702:	4235      	tst	r5, r6
    5704:	d0f8      	beq.n	56f8 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5706:	193b      	adds	r3, r7, r4
    5708:	685b      	ldr	r3, [r3, #4]
    570a:	0038      	movs	r0, r7
    570c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    570e:	683b      	ldr	r3, [r7, #0]
    5710:	62dd      	str	r5, [r3, #44]	; 0x2c
    5712:	e7f1      	b.n	56f8 <_tcc_interrupt_handler+0x20>
		}
	}
}
    5714:	bc04      	pop	{r2}
    5716:	4690      	mov	r8, r2
    5718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	20000418 	.word	0x20000418
    5720:	0000acd4 	.word	0x0000acd4

00005724 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5724:	b510      	push	{r4, lr}
    5726:	2000      	movs	r0, #0
    5728:	4b01      	ldr	r3, [pc, #4]	; (5730 <TCC0_Handler+0xc>)
    572a:	4798      	blx	r3
    572c:	bd10      	pop	{r4, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	000056d9 	.word	0x000056d9

00005734 <TCC1_Handler>:
    5734:	b510      	push	{r4, lr}
    5736:	2001      	movs	r0, #1
    5738:	4b01      	ldr	r3, [pc, #4]	; (5740 <TCC1_Handler+0xc>)
    573a:	4798      	blx	r3
    573c:	bd10      	pop	{r4, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	000056d9 	.word	0x000056d9

00005744 <TCC2_Handler>:
    5744:	b510      	push	{r4, lr}
    5746:	2002      	movs	r0, #2
    5748:	4b01      	ldr	r3, [pc, #4]	; (5750 <TCC2_Handler+0xc>)
    574a:	4798      	blx	r3
    574c:	bd10      	pop	{r4, pc}
    574e:	46c0      	nop			; (mov r8, r8)
    5750:	000056d9 	.word	0x000056d9

00005754 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5754:	e7fe      	b.n	5754 <Dummy_Handler>
	...

00005758 <Reset_Handler>:
{
    5758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    575a:	4a2a      	ldr	r2, [pc, #168]	; (5804 <Reset_Handler+0xac>)
    575c:	4b2a      	ldr	r3, [pc, #168]	; (5808 <Reset_Handler+0xb0>)
    575e:	429a      	cmp	r2, r3
    5760:	d011      	beq.n	5786 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5762:	001a      	movs	r2, r3
    5764:	4b29      	ldr	r3, [pc, #164]	; (580c <Reset_Handler+0xb4>)
    5766:	429a      	cmp	r2, r3
    5768:	d20d      	bcs.n	5786 <Reset_Handler+0x2e>
    576a:	4a29      	ldr	r2, [pc, #164]	; (5810 <Reset_Handler+0xb8>)
    576c:	3303      	adds	r3, #3
    576e:	1a9b      	subs	r3, r3, r2
    5770:	089b      	lsrs	r3, r3, #2
    5772:	3301      	adds	r3, #1
    5774:	009b      	lsls	r3, r3, #2
    5776:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5778:	4823      	ldr	r0, [pc, #140]	; (5808 <Reset_Handler+0xb0>)
    577a:	4922      	ldr	r1, [pc, #136]	; (5804 <Reset_Handler+0xac>)
    577c:	588c      	ldr	r4, [r1, r2]
    577e:	5084      	str	r4, [r0, r2]
    5780:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5782:	429a      	cmp	r2, r3
    5784:	d1fa      	bne.n	577c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5786:	4a23      	ldr	r2, [pc, #140]	; (5814 <Reset_Handler+0xbc>)
    5788:	4b23      	ldr	r3, [pc, #140]	; (5818 <Reset_Handler+0xc0>)
    578a:	429a      	cmp	r2, r3
    578c:	d20a      	bcs.n	57a4 <Reset_Handler+0x4c>
    578e:	43d3      	mvns	r3, r2
    5790:	4921      	ldr	r1, [pc, #132]	; (5818 <Reset_Handler+0xc0>)
    5792:	185b      	adds	r3, r3, r1
    5794:	2103      	movs	r1, #3
    5796:	438b      	bics	r3, r1
    5798:	3304      	adds	r3, #4
    579a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    579c:	2100      	movs	r1, #0
    579e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    57a0:	4293      	cmp	r3, r2
    57a2:	d1fc      	bne.n	579e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    57a4:	4a1d      	ldr	r2, [pc, #116]	; (581c <Reset_Handler+0xc4>)
    57a6:	21ff      	movs	r1, #255	; 0xff
    57a8:	4b1d      	ldr	r3, [pc, #116]	; (5820 <Reset_Handler+0xc8>)
    57aa:	438b      	bics	r3, r1
    57ac:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    57ae:	39fd      	subs	r1, #253	; 0xfd
    57b0:	2390      	movs	r3, #144	; 0x90
    57b2:	005b      	lsls	r3, r3, #1
    57b4:	4a1b      	ldr	r2, [pc, #108]	; (5824 <Reset_Handler+0xcc>)
    57b6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    57b8:	4a1b      	ldr	r2, [pc, #108]	; (5828 <Reset_Handler+0xd0>)
    57ba:	78d3      	ldrb	r3, [r2, #3]
    57bc:	2503      	movs	r5, #3
    57be:	43ab      	bics	r3, r5
    57c0:	2402      	movs	r4, #2
    57c2:	4323      	orrs	r3, r4
    57c4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    57c6:	78d3      	ldrb	r3, [r2, #3]
    57c8:	270c      	movs	r7, #12
    57ca:	43bb      	bics	r3, r7
    57cc:	2608      	movs	r6, #8
    57ce:	4333      	orrs	r3, r6
    57d0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    57d2:	4b16      	ldr	r3, [pc, #88]	; (582c <Reset_Handler+0xd4>)
    57d4:	7b98      	ldrb	r0, [r3, #14]
    57d6:	2230      	movs	r2, #48	; 0x30
    57d8:	4390      	bics	r0, r2
    57da:	2220      	movs	r2, #32
    57dc:	4310      	orrs	r0, r2
    57de:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    57e0:	7b99      	ldrb	r1, [r3, #14]
    57e2:	43b9      	bics	r1, r7
    57e4:	4331      	orrs	r1, r6
    57e6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    57e8:	7b9a      	ldrb	r2, [r3, #14]
    57ea:	43aa      	bics	r2, r5
    57ec:	4322      	orrs	r2, r4
    57ee:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    57f0:	4a0f      	ldr	r2, [pc, #60]	; (5830 <Reset_Handler+0xd8>)
    57f2:	6853      	ldr	r3, [r2, #4]
    57f4:	2180      	movs	r1, #128	; 0x80
    57f6:	430b      	orrs	r3, r1
    57f8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    57fa:	4b0e      	ldr	r3, [pc, #56]	; (5834 <Reset_Handler+0xdc>)
    57fc:	4798      	blx	r3
        main();
    57fe:	4b0e      	ldr	r3, [pc, #56]	; (5838 <Reset_Handler+0xe0>)
    5800:	4798      	blx	r3
    5802:	e7fe      	b.n	5802 <Reset_Handler+0xaa>
    5804:	0000b080 	.word	0x0000b080
    5808:	20000000 	.word	0x20000000
    580c:	20000080 	.word	0x20000080
    5810:	20000004 	.word	0x20000004
    5814:	20000080 	.word	0x20000080
    5818:	200004b0 	.word	0x200004b0
    581c:	e000ed00 	.word	0xe000ed00
    5820:	00000000 	.word	0x00000000
    5824:	41007000 	.word	0x41007000
    5828:	41005000 	.word	0x41005000
    582c:	41004800 	.word	0x41004800
    5830:	41004000 	.word	0x41004000
    5834:	000087b1 	.word	0x000087b1
    5838:	00005ded 	.word	0x00005ded

0000583c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    583c:	b5f0      	push	{r4, r5, r6, r7, lr}
    583e:	46c6      	mov	lr, r8
    5840:	b500      	push	{lr}
    5842:	000c      	movs	r4, r1
    5844:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5846:	2800      	cmp	r0, #0
    5848:	d10f      	bne.n	586a <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    584a:	2a00      	cmp	r2, #0
    584c:	dd11      	ble.n	5872 <_read+0x36>
    584e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5850:	4e09      	ldr	r6, [pc, #36]	; (5878 <_read+0x3c>)
    5852:	4d0a      	ldr	r5, [pc, #40]	; (587c <_read+0x40>)
    5854:	6830      	ldr	r0, [r6, #0]
    5856:	0021      	movs	r1, r4
    5858:	682b      	ldr	r3, [r5, #0]
    585a:	4798      	blx	r3
		ptr++;
    585c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    585e:	42bc      	cmp	r4, r7
    5860:	d1f8      	bne.n	5854 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    5862:	4640      	mov	r0, r8
    5864:	bc04      	pop	{r2}
    5866:	4690      	mov	r8, r2
    5868:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    586a:	2301      	movs	r3, #1
    586c:	425b      	negs	r3, r3
    586e:	4698      	mov	r8, r3
    5870:	e7f7      	b.n	5862 <_read+0x26>
	for (; len > 0; --len) {
    5872:	4680      	mov	r8, r0
    5874:	e7f5      	b.n	5862 <_read+0x26>
    5876:	46c0      	nop			; (mov r8, r8)
    5878:	2000042c 	.word	0x2000042c
    587c:	20000424 	.word	0x20000424

00005880 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5880:	b5f0      	push	{r4, r5, r6, r7, lr}
    5882:	46c6      	mov	lr, r8
    5884:	b500      	push	{lr}
    5886:	000e      	movs	r6, r1
    5888:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    588a:	3801      	subs	r0, #1
    588c:	2802      	cmp	r0, #2
    588e:	d810      	bhi.n	58b2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    5890:	2a00      	cmp	r2, #0
    5892:	d011      	beq.n	58b8 <_write+0x38>
    5894:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5896:	4b0c      	ldr	r3, [pc, #48]	; (58c8 <_write+0x48>)
    5898:	4698      	mov	r8, r3
    589a:	4f0c      	ldr	r7, [pc, #48]	; (58cc <_write+0x4c>)
    589c:	4643      	mov	r3, r8
    589e:	6818      	ldr	r0, [r3, #0]
    58a0:	5d31      	ldrb	r1, [r6, r4]
    58a2:	683b      	ldr	r3, [r7, #0]
    58a4:	4798      	blx	r3
    58a6:	2800      	cmp	r0, #0
    58a8:	db08      	blt.n	58bc <_write+0x3c>
			return -1;
		}
		++nChars;
    58aa:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    58ac:	42a5      	cmp	r5, r4
    58ae:	d1f5      	bne.n	589c <_write+0x1c>
    58b0:	e006      	b.n	58c0 <_write+0x40>
		return -1;
    58b2:	2401      	movs	r4, #1
    58b4:	4264      	negs	r4, r4
    58b6:	e003      	b.n	58c0 <_write+0x40>
	for (; len != 0; --len) {
    58b8:	0014      	movs	r4, r2
    58ba:	e001      	b.n	58c0 <_write+0x40>
			return -1;
    58bc:	2401      	movs	r4, #1
    58be:	4264      	negs	r4, r4
	}
	return nChars;
}
    58c0:	0020      	movs	r0, r4
    58c2:	bc04      	pop	{r2}
    58c4:	4690      	mov	r8, r2
    58c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58c8:	2000042c 	.word	0x2000042c
    58cc:	20000428 	.word	0x20000428

000058d0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    58d0:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    58d2:	4a06      	ldr	r2, [pc, #24]	; (58ec <_sbrk+0x1c>)
    58d4:	6812      	ldr	r2, [r2, #0]
    58d6:	2a00      	cmp	r2, #0
    58d8:	d004      	beq.n	58e4 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    58da:	4a04      	ldr	r2, [pc, #16]	; (58ec <_sbrk+0x1c>)
    58dc:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    58de:	18c3      	adds	r3, r0, r3
    58e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    58e2:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    58e4:	4902      	ldr	r1, [pc, #8]	; (58f0 <_sbrk+0x20>)
    58e6:	4a01      	ldr	r2, [pc, #4]	; (58ec <_sbrk+0x1c>)
    58e8:	6011      	str	r1, [r2, #0]
    58ea:	e7f6      	b.n	58da <_sbrk+0xa>
    58ec:	200000f0 	.word	0x200000f0
    58f0:	200024b0 	.word	0x200024b0

000058f4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    58f4:	2001      	movs	r0, #1
    58f6:	4240      	negs	r0, r0
    58f8:	4770      	bx	lr

000058fa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    58fa:	2380      	movs	r3, #128	; 0x80
    58fc:	019b      	lsls	r3, r3, #6
    58fe:	604b      	str	r3, [r1, #4]

	return 0;
}
    5900:	2000      	movs	r0, #0
    5902:	4770      	bx	lr

00005904 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5904:	2001      	movs	r0, #1
    5906:	4770      	bx	lr

00005908 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5908:	2000      	movs	r0, #0
    590a:	4770      	bx	lr

0000590c <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    590c:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    590e:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    5910:	2200      	movs	r2, #0
    5912:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    5914:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    5916:	9b00      	ldr	r3, [sp, #0]
    5918:	60c3      	str	r3, [r0, #12]
}
    591a:	4770      	bx	lr

0000591c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    591c:	b510      	push	{r4, lr}
    591e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    5920:	6842      	ldr	r2, [r0, #4]
    5922:	2a00      	cmp	r2, #0
    5924:	d100      	bne.n	5928 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    5926:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    5928:	6901      	ldr	r1, [r0, #16]
    592a:	68c0      	ldr	r0, [r0, #12]
    592c:	68a3      	ldr	r3, [r4, #8]
    592e:	4798      	blx	r3
		writer->written = 0;
    5930:	2300      	movs	r3, #0
    5932:	6063      	str	r3, [r4, #4]
}
    5934:	e7f7      	b.n	5926 <stream_writer_send_remain+0xa>
	...

00005938 <stream_writer_send_8>:
{
    5938:	b570      	push	{r4, r5, r6, lr}
    593a:	0004      	movs	r4, r0
    593c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    593e:	6803      	ldr	r3, [r0, #0]
    5940:	6842      	ldr	r2, [r0, #4]
    5942:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    5944:	2b00      	cmp	r3, #0
    5946:	dd05      	ble.n	5954 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    5948:	6922      	ldr	r2, [r4, #16]
    594a:	6863      	ldr	r3, [r4, #4]
    594c:	1c59      	adds	r1, r3, #1
    594e:	6061      	str	r1, [r4, #4]
    5950:	54d5      	strb	r5, [r2, r3]
}
    5952:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    5954:	4b01      	ldr	r3, [pc, #4]	; (595c <stream_writer_send_8+0x24>)
    5956:	4798      	blx	r3
    5958:	e7f6      	b.n	5948 <stream_writer_send_8+0x10>
    595a:	46c0      	nop			; (mov r8, r8)
    595c:	0000591d 	.word	0x0000591d

00005960 <stream_writer_send_16BE>:
{
    5960:	b570      	push	{r4, r5, r6, lr}
    5962:	0006      	movs	r6, r0
    5964:	000c      	movs	r4, r1
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    5966:	1209      	asrs	r1, r1, #8
    5968:	4d02      	ldr	r5, [pc, #8]	; (5974 <stream_writer_send_16BE+0x14>)
    596a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    596c:	b261      	sxtb	r1, r4
    596e:	0030      	movs	r0, r6
    5970:	47a8      	blx	r5
}
    5972:	bd70      	pop	{r4, r5, r6, pc}
    5974:	00005939 	.word	0x00005939

00005978 <stream_writer_send_buffer>:
{
    5978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    597a:	0006      	movs	r6, r0
    597c:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    597e:	2a00      	cmp	r2, #0
    5980:	d008      	beq.n	5994 <stream_writer_send_buffer+0x1c>
    5982:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    5984:	4f04      	ldr	r7, [pc, #16]	; (5998 <stream_writer_send_buffer+0x20>)
    5986:	2100      	movs	r1, #0
    5988:	5661      	ldrsb	r1, [r4, r1]
    598a:	0030      	movs	r0, r6
    598c:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    598e:	3401      	adds	r4, #1
    5990:	42a5      	cmp	r5, r4
    5992:	d1f8      	bne.n	5986 <stream_writer_send_buffer+0xe>
}
    5994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5996:	46c0      	nop			; (mov r8, r8)
    5998:	00005939 	.word	0x00005939

0000599c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    599c:	4a02      	ldr	r2, [pc, #8]	; (59a8 <sw_timer_tcc_callback+0xc>)
    599e:	6813      	ldr	r3, [r2, #0]
    59a0:	3301      	adds	r3, #1
    59a2:	6013      	str	r3, [r2, #0]
}
    59a4:	4770      	bx	lr
    59a6:	46c0      	nop			; (mov r8, r8)
    59a8:	200000f4 	.word	0x200000f4

000059ac <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    59ac:	2364      	movs	r3, #100	; 0x64
    59ae:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    59b0:	2300      	movs	r3, #0
    59b2:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    59b4:	7043      	strb	r3, [r0, #1]
}
    59b6:	4770      	bx	lr

000059b8 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    59b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ba:	46c6      	mov	lr, r8
    59bc:	b500      	push	{lr}
    59be:	b0ac      	sub	sp, #176	; 0xb0
    59c0:	000d      	movs	r5, r1
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    59c2:	466e      	mov	r6, sp
    59c4:	4b1d      	ldr	r3, [pc, #116]	; (5a3c <sw_timer_init+0x84>)
    59c6:	466a      	mov	r2, sp
    59c8:	cb92      	ldmia	r3!, {r1, r4, r7}
    59ca:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    59cc:	886b      	ldrh	r3, [r5, #2]
    59ce:	6543      	str	r3, [r0, #84]	; 0x54

	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    59d0:	3014      	adds	r0, #20
    59d2:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    59d4:	782b      	ldrb	r3, [r5, #0]
    59d6:	009b      	lsls	r3, r3, #2
    59d8:	5999      	ldr	r1, [r3, r6]
    59da:	0017      	movs	r7, r2
    59dc:	0010      	movs	r0, r2
    59de:	4b18      	ldr	r3, [pc, #96]	; (5a40 <sw_timer_init+0x88>)
    59e0:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    59e2:	2000      	movs	r0, #0
    59e4:	4b17      	ldr	r3, [pc, #92]	; (5a44 <sw_timer_init+0x8c>)
    59e6:	4798      	blx	r3
    59e8:	4b17      	ldr	r3, [pc, #92]	; (5a48 <sw_timer_init+0x90>)
    59ea:	7a1b      	ldrb	r3, [r3, #8]
    59ec:	b2db      	uxtb	r3, r3
    59ee:	40d8      	lsrs	r0, r3
    59f0:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    59f2:	8869      	ldrh	r1, [r5, #2]
    59f4:	20fa      	movs	r0, #250	; 0xfa
    59f6:	0200      	lsls	r0, r0, #8
    59f8:	4b14      	ldr	r3, [pc, #80]	; (5a4c <sw_timer_init+0x94>)
    59fa:	4798      	blx	r3
    59fc:	0001      	movs	r1, r0
    59fe:	4640      	mov	r0, r8
    5a00:	4b13      	ldr	r3, [pc, #76]	; (5a50 <sw_timer_init+0x98>)
    5a02:	4798      	blx	r3
    5a04:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    5a06:	2305      	movs	r3, #5
    5a08:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    5a0a:	782b      	ldrb	r3, [r5, #0]
    5a0c:	009b      	lsls	r3, r3, #2
    5a0e:	5999      	ldr	r1, [r3, r6]
    5a10:	003a      	movs	r2, r7
    5a12:	0020      	movs	r0, r4
    5a14:	4b0f      	ldr	r3, [pc, #60]	; (5a54 <sw_timer_init+0x9c>)
    5a16:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5a18:	786a      	ldrb	r2, [r5, #1]
    5a1a:	3208      	adds	r2, #8
    5a1c:	b2d2      	uxtb	r2, r2
    5a1e:	490e      	ldr	r1, [pc, #56]	; (5a58 <sw_timer_init+0xa0>)
    5a20:	0020      	movs	r0, r4
    5a22:	4b0e      	ldr	r3, [pc, #56]	; (5a5c <sw_timer_init+0xa4>)
    5a24:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    5a26:	7869      	ldrb	r1, [r5, #1]
    5a28:	3108      	adds	r1, #8
    5a2a:	b2c9      	uxtb	r1, r1
    5a2c:	0020      	movs	r0, r4
    5a2e:	4b0c      	ldr	r3, [pc, #48]	; (5a60 <sw_timer_init+0xa8>)
    5a30:	4798      	blx	r3
}
    5a32:	b02c      	add	sp, #176	; 0xb0
    5a34:	bc04      	pop	{r2}
    5a36:	4690      	mov	r8, r2
    5a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a3a:	46c0      	nop			; (mov r8, r8)
    5a3c:	0000ad08 	.word	0x0000ad08
    5a40:	00005129 	.word	0x00005129
    5a44:	00004e85 	.word	0x00004e85
    5a48:	40000400 	.word	0x40000400
    5a4c:	00007059 	.word	0x00007059
    5a50:	00006f45 	.word	0x00006f45
    5a54:	00005275 	.word	0x00005275
    5a58:	0000599d 	.word	0x0000599d
    5a5c:	00005681 	.word	0x00005681
    5a60:	00005699 	.word	0x00005699

00005a64 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    5a64:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    5a66:	2102      	movs	r1, #2
    5a68:	6893      	ldr	r3, [r2, #8]
    5a6a:	4219      	tst	r1, r3
    5a6c:	d1fc      	bne.n	5a68 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    5a6e:	6813      	ldr	r3, [r2, #0]
    5a70:	2102      	movs	r1, #2
    5a72:	430b      	orrs	r3, r1
    5a74:	6013      	str	r3, [r2, #0]
	Assert(module_inst);

	tcc_module = &module_inst->tcc_inst;

	tcc_enable(tcc_module);
}
    5a76:	4770      	bx	lr

00005a78 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    5a78:	b570      	push	{r4, r5, r6, lr}
    5a7a:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    5a7c:	7805      	ldrb	r5, [r0, #0]
    5a7e:	07e8      	lsls	r0, r5, #31
    5a80:	d502      	bpl.n	5a88 <sw_timer_register_callback+0x10>
			handler->used = 1;
			return index;
		}
	}

	return -1;
    5a82:	2001      	movs	r0, #1
    5a84:	4240      	negs	r0, r0
}
    5a86:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    5a88:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    5a8a:	0029      	movs	r1, r5
    5a8c:	2002      	movs	r0, #2
    5a8e:	4381      	bics	r1, r0
    5a90:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    5a92:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    5a94:	6d61      	ldr	r1, [r4, #84]	; 0x54
    5a96:	0018      	movs	r0, r3
    5a98:	4b04      	ldr	r3, [pc, #16]	; (5aac <sw_timer_register_callback+0x34>)
    5a9a:	4798      	blx	r3
    5a9c:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    5a9e:	7823      	ldrb	r3, [r4, #0]
    5aa0:	2201      	movs	r2, #1
    5aa2:	4313      	orrs	r3, r2
    5aa4:	7023      	strb	r3, [r4, #0]
			return index;
    5aa6:	2000      	movs	r0, #0
    5aa8:	e7ed      	b.n	5a86 <sw_timer_register_callback+0xe>
    5aaa:	46c0      	nop			; (mov r8, r8)
    5aac:	00006f45 	.word	0x00006f45

00005ab0 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    5ab0:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    5ab2:	008b      	lsls	r3, r1, #2
    5ab4:	185d      	adds	r5, r3, r1
    5ab6:	00ad      	lsls	r5, r5, #2
    5ab8:	5c29      	ldrb	r1, [r5, r0]
    5aba:	2602      	movs	r6, #2
    5abc:	4331      	orrs	r1, r6
    5abe:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    5ac0:	1944      	adds	r4, r0, r5
    5ac2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    5ac4:	0010      	movs	r0, r2
    5ac6:	4b03      	ldr	r3, [pc, #12]	; (5ad4 <sw_timer_enable_callback+0x24>)
    5ac8:	4798      	blx	r3
    5aca:	4b03      	ldr	r3, [pc, #12]	; (5ad8 <sw_timer_enable_callback+0x28>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	18c0      	adds	r0, r0, r3
    5ad0:	6120      	str	r0, [r4, #16]
}
    5ad2:	bd70      	pop	{r4, r5, r6, pc}
    5ad4:	00006f45 	.word	0x00006f45
    5ad8:	200000f4 	.word	0x200000f4

00005adc <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    5adc:	008b      	lsls	r3, r1, #2
    5ade:	1859      	adds	r1, r3, r1
    5ae0:	0089      	lsls	r1, r1, #2
    5ae2:	5c0b      	ldrb	r3, [r1, r0]
    5ae4:	2202      	movs	r2, #2
    5ae6:	4393      	bics	r3, r2
    5ae8:	540b      	strb	r3, [r1, r0]
}
    5aea:	4770      	bx	lr

00005aec <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    5aec:	b570      	push	{r4, r5, r6, lr}
    5aee:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    5af0:	7803      	ldrb	r3, [r0, #0]
    5af2:	07db      	lsls	r3, r3, #31
    5af4:	d507      	bpl.n	5b06 <sw_timer_task+0x1a>
    5af6:	7803      	ldrb	r3, [r0, #0]
    5af8:	079b      	lsls	r3, r3, #30
    5afa:	d504      	bpl.n	5b06 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    5afc:	4b11      	ldr	r3, [pc, #68]	; (5b44 <sw_timer_task+0x58>)
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	6902      	ldr	r2, [r0, #16]
    5b02:	1ad3      	subs	r3, r2, r3
    5b04:	d400      	bmi.n	5b08 <sw_timer_task+0x1c>
				handler->busy = 0;
			}
		}
	}

}
    5b06:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    5b08:	7803      	ldrb	r3, [r0, #0]
    5b0a:	075b      	lsls	r3, r3, #29
    5b0c:	d4fb      	bmi.n	5b06 <sw_timer_task+0x1a>
				handler->busy = 1;
    5b0e:	7803      	ldrb	r3, [r0, #0]
    5b10:	2204      	movs	r2, #4
    5b12:	4313      	orrs	r3, r2
    5b14:	7003      	strb	r3, [r0, #0]
				handler->callback(module_inst, index, handler->context, handler->period);
    5b16:	68c3      	ldr	r3, [r0, #12]
    5b18:	6882      	ldr	r2, [r0, #8]
    5b1a:	2100      	movs	r1, #0
    5b1c:	6845      	ldr	r5, [r0, #4]
    5b1e:	47a8      	blx	r5
				if (handler->period > 0) {
    5b20:	68e3      	ldr	r3, [r4, #12]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d008      	beq.n	5b38 <sw_timer_task+0x4c>
					handler->expire_time = sw_timer_tick + handler->period;
    5b26:	4a07      	ldr	r2, [pc, #28]	; (5b44 <sw_timer_task+0x58>)
    5b28:	6812      	ldr	r2, [r2, #0]
    5b2a:	18d3      	adds	r3, r2, r3
    5b2c:	6123      	str	r3, [r4, #16]
				handler->busy = 0;
    5b2e:	7823      	ldrb	r3, [r4, #0]
    5b30:	2204      	movs	r2, #4
    5b32:	4393      	bics	r3, r2
    5b34:	7023      	strb	r3, [r4, #0]
}
    5b36:	e7e6      	b.n	5b06 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    5b38:	7823      	ldrb	r3, [r4, #0]
    5b3a:	2202      	movs	r2, #2
    5b3c:	4393      	bics	r3, r2
    5b3e:	7023      	strb	r3, [r4, #0]
    5b40:	e7f5      	b.n	5b2e <sw_timer_task+0x42>
    5b42:	46c0      	nop			; (mov r8, r8)
    5b44:	200000f4 	.word	0x200000f4

00005b48 <uart_callback>:
 * \param[in] module USART module structure.
 */
static void uart_callback(const struct usart_module *const module)
{
	/* If input string is bigger than buffer size limit, ignore the excess part. */
	if (uart_buffer_written < MAIN_CHAT_BUFFER_SIZE) {
    5b48:	4b03      	ldr	r3, [pc, #12]	; (5b58 <uart_callback+0x10>)
    5b4a:	681b      	ldr	r3, [r3, #0]
    5b4c:	2b3f      	cmp	r3, #63	; 0x3f
    5b4e:	dc02      	bgt.n	5b56 <uart_callback+0xe>
		uart_buffer[uart_buffer_written++] = uart_ch_buffer & 0xFF;
    5b50:	3301      	adds	r3, #1
    5b52:	4a01      	ldr	r2, [pc, #4]	; (5b58 <uart_callback+0x10>)
    5b54:	6013      	str	r3, [r2, #0]
	}
}
    5b56:	4770      	bx	lr
    5b58:	20000260 	.word	0x20000260

00005b5c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
    5b5c:	b510      	push	{r4, lr}
	mqtt_socket_resolve_handler(doamin_name, server_ip);
    5b5e:	4b01      	ldr	r3, [pc, #4]	; (5b64 <socket_resolve_handler+0x8>)
    5b60:	4798      	blx	r3
}
    5b62:	bd10      	pop	{r4, pc}
    5b64:	00006291 	.word	0x00006291

00005b68 <socket_event_handler>:
{
    5b68:	b510      	push	{r4, lr}
	mqtt_socket_event_handler(sock, msg_type, msg_data);
    5b6a:	4b01      	ldr	r3, [pc, #4]	; (5b70 <socket_event_handler+0x8>)
    5b6c:	4798      	blx	r3
}
    5b6e:	bd10      	pop	{r4, pc}
    5b70:	00006e31 	.word	0x00006e31

00005b74 <wifi_callback>:
{
    5b74:	b510      	push	{r4, lr}
    5b76:	b082      	sub	sp, #8
	switch (msg_type) {
    5b78:	282c      	cmp	r0, #44	; 0x2c
    5b7a:	d003      	beq.n	5b84 <wifi_callback+0x10>
    5b7c:	2832      	cmp	r0, #50	; 0x32
    5b7e:	d01c      	beq.n	5bba <wifi_callback+0x46>
}
    5b80:	b002      	add	sp, #8
    5b82:	bd10      	pop	{r4, pc}
		if (msg_wifi_state->u8CurrState == M2M_WIFI_CONNECTED) {
    5b84:	780b      	ldrb	r3, [r1, #0]
    5b86:	2b01      	cmp	r3, #1
    5b88:	d011      	beq.n	5bae <wifi_callback+0x3a>
		} else if (msg_wifi_state->u8CurrState == M2M_WIFI_DISCONNECTED) {
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d1f8      	bne.n	5b80 <wifi_callback+0xc>
			printf("Wi-Fi disconnected\r\n");
    5b8e:	4812      	ldr	r0, [pc, #72]	; (5bd8 <wifi_callback+0x64>)
    5b90:	4b12      	ldr	r3, [pc, #72]	; (5bdc <wifi_callback+0x68>)
    5b92:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5b94:	23ff      	movs	r3, #255	; 0xff
    5b96:	9300      	str	r3, [sp, #0]
    5b98:	4b11      	ldr	r3, [pc, #68]	; (5be0 <wifi_callback+0x6c>)
    5b9a:	2202      	movs	r2, #2
    5b9c:	210b      	movs	r1, #11
    5b9e:	4811      	ldr	r0, [pc, #68]	; (5be4 <wifi_callback+0x70>)
    5ba0:	4c11      	ldr	r4, [pc, #68]	; (5be8 <wifi_callback+0x74>)
    5ba2:	47a0      	blx	r4
			mqtt_disconnect(&mqtt_inst, 1);
    5ba4:	2101      	movs	r1, #1
    5ba6:	4811      	ldr	r0, [pc, #68]	; (5bec <wifi_callback+0x78>)
    5ba8:	4b11      	ldr	r3, [pc, #68]	; (5bf0 <wifi_callback+0x7c>)
    5baa:	4798      	blx	r3
    5bac:	e7e8      	b.n	5b80 <wifi_callback+0xc>
			printf("Wi-Fi connected\r\n");
    5bae:	4811      	ldr	r0, [pc, #68]	; (5bf4 <wifi_callback+0x80>)
    5bb0:	4b0a      	ldr	r3, [pc, #40]	; (5bdc <wifi_callback+0x68>)
    5bb2:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    5bb4:	4b10      	ldr	r3, [pc, #64]	; (5bf8 <wifi_callback+0x84>)
    5bb6:	4798      	blx	r3
    5bb8:	e7e2      	b.n	5b80 <wifi_callback+0xc>
		printf("Wi-Fi IP is %u.%u.%u.%u\r\n",
    5bba:	788b      	ldrb	r3, [r1, #2]
    5bbc:	784a      	ldrb	r2, [r1, #1]
    5bbe:	7808      	ldrb	r0, [r1, #0]
    5bc0:	78c9      	ldrb	r1, [r1, #3]
    5bc2:	9100      	str	r1, [sp, #0]
    5bc4:	0001      	movs	r1, r0
    5bc6:	480d      	ldr	r0, [pc, #52]	; (5bfc <wifi_callback+0x88>)
    5bc8:	4c0d      	ldr	r4, [pc, #52]	; (5c00 <wifi_callback+0x8c>)
    5bca:	47a0      	blx	r4
		mqtt_connect(&mqtt_inst, main_mqtt_broker);
    5bcc:	490d      	ldr	r1, [pc, #52]	; (5c04 <wifi_callback+0x90>)
    5bce:	4807      	ldr	r0, [pc, #28]	; (5bec <wifi_callback+0x78>)
    5bd0:	4b0d      	ldr	r3, [pc, #52]	; (5c08 <wifi_callback+0x94>)
    5bd2:	4798      	blx	r3
}
    5bd4:	e7d4      	b.n	5b80 <wifi_callback+0xc>
    5bd6:	46c0      	nop			; (mov r8, r8)
    5bd8:	0000af38 	.word	0x0000af38
    5bdc:	00008ac1 	.word	0x00008ac1
    5be0:	0000af4c 	.word	0x0000af4c
    5be4:	0000af58 	.word	0x0000af58
    5be8:	000014e5 	.word	0x000014e5
    5bec:	200001ac 	.word	0x200001ac
    5bf0:	00006af1 	.word	0x00006af1
    5bf4:	0000af24 	.word	0x0000af24
    5bf8:	00001501 	.word	0x00001501
    5bfc:	0000af64 	.word	0x0000af64
    5c00:	000089a5 	.word	0x000089a5
    5c04:	0000ae30 	.word	0x0000ae30
    5c08:	000062e5 	.word	0x000062e5

00005c0c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    5c0c:	b570      	push	{r4, r5, r6, lr}
    5c0e:	b082      	sub	sp, #8
    5c10:	0005      	movs	r5, r0
    5c12:	000e      	movs	r6, r1
	uint16_t temp = 0;
    5c14:	2200      	movs	r2, #0
    5c16:	466b      	mov	r3, sp
    5c18:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    5c1a:	4c06      	ldr	r4, [pc, #24]	; (5c34 <usart_serial_getchar+0x28>)
    5c1c:	466b      	mov	r3, sp
    5c1e:	1d99      	adds	r1, r3, #6
    5c20:	0028      	movs	r0, r5
    5c22:	47a0      	blx	r4
    5c24:	2800      	cmp	r0, #0
    5c26:	d1f9      	bne.n	5c1c <usart_serial_getchar+0x10>

	*c = temp;
    5c28:	466b      	mov	r3, sp
    5c2a:	3306      	adds	r3, #6
    5c2c:	881b      	ldrh	r3, [r3, #0]
    5c2e:	7033      	strb	r3, [r6, #0]
}
    5c30:	b002      	add	sp, #8
    5c32:	bd70      	pop	{r4, r5, r6, pc}
    5c34:	00004721 	.word	0x00004721

00005c38 <usart_serial_putchar>:
{
    5c38:	b570      	push	{r4, r5, r6, lr}
    5c3a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    5c3c:	b28c      	uxth	r4, r1
    5c3e:	4e03      	ldr	r6, [pc, #12]	; (5c4c <usart_serial_putchar+0x14>)
    5c40:	0021      	movs	r1, r4
    5c42:	0028      	movs	r0, r5
    5c44:	47b0      	blx	r6
    5c46:	2800      	cmp	r0, #0
    5c48:	d1fa      	bne.n	5c40 <usart_serial_putchar+0x8>
}
    5c4a:	bd70      	pop	{r4, r5, r6, pc}
    5c4c:	000046f5 	.word	0x000046f5

00005c50 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5c50:	b570      	push	{r4, r5, r6, lr}
    5c52:	b086      	sub	sp, #24
    5c54:	0004      	movs	r4, r0
    5c56:	0015      	movs	r5, r2
	switch (type) {
    5c58:	2901      	cmp	r1, #1
    5c5a:	d045      	beq.n	5ce8 <mqtt_callback+0x98>
    5c5c:	dd22      	ble.n	5ca4 <mqtt_callback+0x54>
    5c5e:	2905      	cmp	r1, #5
    5c60:	d05d      	beq.n	5d1e <mqtt_callback+0xce>
    5c62:	2906      	cmp	r1, #6
    5c64:	d164      	bne.n	5d30 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    5c66:	6810      	ldr	r0, [r2, #0]
    5c68:	2800      	cmp	r0, #0
    5c6a:	d061      	beq.n	5d30 <mqtt_callback+0xe0>
    5c6c:	6893      	ldr	r3, [r2, #8]
    5c6e:	2b00      	cmp	r3, #0
    5c70:	d05e      	beq.n	5d30 <mqtt_callback+0xe0>
			if (!strncmp(data->recv_publish.topic, SENSOR_TOPIC, strlen(SENSOR_TOPIC))) {
    5c72:	220e      	movs	r2, #14
    5c74:	492f      	ldr	r1, [pc, #188]	; (5d34 <mqtt_callback+0xe4>)
    5c76:	4b30      	ldr	r3, [pc, #192]	; (5d38 <mqtt_callback+0xe8>)
    5c78:	4798      	blx	r3
    5c7a:	1e04      	subs	r4, r0, #0
    5c7c:	d158      	bne.n	5d30 <mqtt_callback+0xe0>
				/* Print user name and message */
				/*for (int i = strlen(MAIN_CHAT_TOPIC); i < data->recv_publish.topic_size; i++) {
					printf("%c", data->recv_publish.topic[i]);
				}*/
				printf(" >> ", SENSOR_TOPIC);
    5c7e:	492d      	ldr	r1, [pc, #180]	; (5d34 <mqtt_callback+0xe4>)
    5c80:	482e      	ldr	r0, [pc, #184]	; (5d3c <mqtt_callback+0xec>)
    5c82:	4b2f      	ldr	r3, [pc, #188]	; (5d40 <mqtt_callback+0xf0>)
    5c84:	4798      	blx	r3
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    5c86:	68eb      	ldr	r3, [r5, #12]
    5c88:	2b00      	cmp	r3, #0
    5c8a:	dd07      	ble.n	5c9c <mqtt_callback+0x4c>
					printf("%c", data->recv_publish.msg[i]);
    5c8c:	4e2d      	ldr	r6, [pc, #180]	; (5d44 <mqtt_callback+0xf4>)
    5c8e:	68ab      	ldr	r3, [r5, #8]
    5c90:	5d18      	ldrb	r0, [r3, r4]
    5c92:	47b0      	blx	r6
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    5c94:	3401      	adds	r4, #1
    5c96:	68eb      	ldr	r3, [r5, #12]
    5c98:	42a3      	cmp	r3, r4
    5c9a:	dcf8      	bgt.n	5c8e <mqtt_callback+0x3e>
				}
				printf("\r\n");
    5c9c:	482a      	ldr	r0, [pc, #168]	; (5d48 <mqtt_callback+0xf8>)
    5c9e:	4b2b      	ldr	r3, [pc, #172]	; (5d4c <mqtt_callback+0xfc>)
    5ca0:	4798      	blx	r3
    5ca2:	e045      	b.n	5d30 <mqtt_callback+0xe0>
	switch (type) {
    5ca4:	2900      	cmp	r1, #0
    5ca6:	d143      	bne.n	5d30 <mqtt_callback+0xe0>
		if (data->sock_connected.result >= 0) {
    5ca8:	6813      	ldr	r3, [r2, #0]
    5caa:	2b00      	cmp	r3, #0
    5cac:	db12      	blt.n	5cd4 <mqtt_callback+0x84>
			status = mqtt_connect_broker(module_inst, 1, mqtt_user, mqtt_pass, mqtt_user, NULL, NULL, 0, 0, 0);
    5cae:	4a28      	ldr	r2, [pc, #160]	; (5d50 <mqtt_callback+0x100>)
    5cb0:	2300      	movs	r3, #0
    5cb2:	9305      	str	r3, [sp, #20]
    5cb4:	9304      	str	r3, [sp, #16]
    5cb6:	9303      	str	r3, [sp, #12]
    5cb8:	9302      	str	r3, [sp, #8]
    5cba:	9301      	str	r3, [sp, #4]
    5cbc:	9200      	str	r2, [sp, #0]
    5cbe:	4b25      	ldr	r3, [pc, #148]	; (5d54 <mqtt_callback+0x104>)
    5cc0:	2101      	movs	r1, #1
    5cc2:	4c25      	ldr	r4, [pc, #148]	; (5d58 <mqtt_callback+0x108>)
    5cc4:	47a0      	blx	r4
    5cc6:	4b25      	ldr	r3, [pc, #148]	; (5d5c <mqtt_callback+0x10c>)
    5cc8:	6018      	str	r0, [r3, #0]
			printf("%d\n", status);
    5cca:	6819      	ldr	r1, [r3, #0]
    5ccc:	4824      	ldr	r0, [pc, #144]	; (5d60 <mqtt_callback+0x110>)
    5cce:	4b1c      	ldr	r3, [pc, #112]	; (5d40 <mqtt_callback+0xf0>)
    5cd0:	4798      	blx	r3
    5cd2:	e02d      	b.n	5d30 <mqtt_callback+0xe0>
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    5cd4:	4d23      	ldr	r5, [pc, #140]	; (5d64 <mqtt_callback+0x114>)
    5cd6:	0029      	movs	r1, r5
    5cd8:	4823      	ldr	r0, [pc, #140]	; (5d68 <mqtt_callback+0x118>)
    5cda:	4b19      	ldr	r3, [pc, #100]	; (5d40 <mqtt_callback+0xf0>)
    5cdc:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    5cde:	0029      	movs	r1, r5
    5ce0:	0020      	movs	r0, r4
    5ce2:	4b22      	ldr	r3, [pc, #136]	; (5d6c <mqtt_callback+0x11c>)
    5ce4:	4798      	blx	r3
    5ce6:	e023      	b.n	5d30 <mqtt_callback+0xe0>
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    5ce8:	7811      	ldrb	r1, [r2, #0]
    5cea:	2900      	cmp	r1, #0
    5cec:	d113      	bne.n	5d16 <mqtt_callback+0xc6>
			   status = mqtt_subscribe(module_inst, SENSOR_TOPIC, 2);
    5cee:	2202      	movs	r2, #2
    5cf0:	4910      	ldr	r1, [pc, #64]	; (5d34 <mqtt_callback+0xe4>)
    5cf2:	4b1f      	ldr	r3, [pc, #124]	; (5d70 <mqtt_callback+0x120>)
    5cf4:	4798      	blx	r3
    5cf6:	4b19      	ldr	r3, [pc, #100]	; (5d5c <mqtt_callback+0x10c>)
    5cf8:	6018      	str	r0, [r3, #0]
			printf("mqtt_subscribe:%d\n", status);
    5cfa:	6819      	ldr	r1, [r3, #0]
    5cfc:	481d      	ldr	r0, [pc, #116]	; (5d74 <mqtt_callback+0x124>)
    5cfe:	4b10      	ldr	r3, [pc, #64]	; (5d40 <mqtt_callback+0xf0>)
    5d00:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    5d02:	491d      	ldr	r1, [pc, #116]	; (5d78 <mqtt_callback+0x128>)
    5d04:	2231      	movs	r2, #49	; 0x31
    5d06:	5c8b      	ldrb	r3, [r1, r2]
    5d08:	2002      	movs	r0, #2
    5d0a:	4303      	orrs	r3, r0
    5d0c:	548b      	strb	r3, [r1, r2]
			printf("Preparation of the chat has been completed.\r\n");
    5d0e:	481b      	ldr	r0, [pc, #108]	; (5d7c <mqtt_callback+0x12c>)
    5d10:	4b0e      	ldr	r3, [pc, #56]	; (5d4c <mqtt_callback+0xfc>)
    5d12:	4798      	blx	r3
    5d14:	e00c      	b.n	5d30 <mqtt_callback+0xe0>
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    5d16:	481a      	ldr	r0, [pc, #104]	; (5d80 <mqtt_callback+0x130>)
    5d18:	4b09      	ldr	r3, [pc, #36]	; (5d40 <mqtt_callback+0xf0>)
    5d1a:	4798      	blx	r3
    5d1c:	e008      	b.n	5d30 <mqtt_callback+0xe0>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    5d1e:	4819      	ldr	r0, [pc, #100]	; (5d84 <mqtt_callback+0x134>)
    5d20:	4b0a      	ldr	r3, [pc, #40]	; (5d4c <mqtt_callback+0xfc>)
    5d22:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    5d24:	4914      	ldr	r1, [pc, #80]	; (5d78 <mqtt_callback+0x128>)
    5d26:	2231      	movs	r2, #49	; 0x31
    5d28:	5c8b      	ldrb	r3, [r1, r2]
    5d2a:	2002      	movs	r0, #2
    5d2c:	4383      	bics	r3, r0
    5d2e:	548b      	strb	r3, [r1, r2]
		usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    5d30:	b006      	add	sp, #24
    5d32:	bd70      	pop	{r4, r5, r6, pc}
    5d34:	0000ae7c 	.word	0x0000ae7c
    5d38:	00008cdb 	.word	0x00008cdb
    5d3c:	0000af04 	.word	0x0000af04
    5d40:	000089a5 	.word	0x000089a5
    5d44:	000089d9 	.word	0x000089d9
    5d48:	0000af0c 	.word	0x0000af0c
    5d4c:	00008ac1 	.word	0x00008ac1
    5d50:	20000014 	.word	0x20000014
    5d54:	2000000c 	.word	0x2000000c
    5d58:	000063f9 	.word	0x000063f9
    5d5c:	200004a8 	.word	0x200004a8
    5d60:	0000a118 	.word	0x0000a118
    5d64:	0000ae30 	.word	0x0000ae30
    5d68:	0000ae44 	.word	0x0000ae44
    5d6c:	000062e5 	.word	0x000062e5
    5d70:	00006851 	.word	0x00006851
    5d74:	0000ae8c 	.word	0x0000ae8c
    5d78:	200000f8 	.word	0x200000f8
    5d7c:	0000aea0 	.word	0x0000aea0
    5d80:	0000aed0 	.word	0x0000aed0
    5d84:	0000af10 	.word	0x0000af10

00005d88 <configure_adc>:
		}
	}
}

void configure_adc(void)
{
    5d88:	b510      	push	{r4, lr}
    5d8a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;

	adc_get_config_defaults(&conf_adc);
    5d8c:	4668      	mov	r0, sp
    5d8e:	4b12      	ldr	r3, [pc, #72]	; (5dd8 <configure_adc+0x50>)
    5d90:	4798      	blx	r3

	//conf_adc.clock_source = GCLK_GENERATOR_1;
	//conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
	//conf_adc.reference = ADC_REFCTRL_REFSEL_INTVCC1;
	conf_adc.positive_input = ADC_POSITIVE_INPUT_PIN16;
    5d92:	2310      	movs	r3, #16
    5d94:	466a      	mov	r2, sp
    5d96:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    5d98:	23c0      	movs	r3, #192	; 0xc0
    5d9a:	015b      	lsls	r3, r3, #5
    5d9c:	81d3      	strh	r3, [r2, #14]
	//conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;

	adc_init(&adc_instance, ADC, &conf_adc);
    5d9e:	4c0f      	ldr	r4, [pc, #60]	; (5ddc <configure_adc+0x54>)
    5da0:	490f      	ldr	r1, [pc, #60]	; (5de0 <configure_adc+0x58>)
    5da2:	0020      	movs	r0, r4
    5da4:	4b0f      	ldr	r3, [pc, #60]	; (5de4 <configure_adc+0x5c>)
    5da6:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    5da8:	6822      	ldr	r2, [r4, #0]
    5daa:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5dac:	b25b      	sxtb	r3, r3
    5dae:	2b00      	cmp	r3, #0
    5db0:	dbfb      	blt.n	5daa <configure_adc+0x22>
    5db2:	2180      	movs	r1, #128	; 0x80
    5db4:	0409      	lsls	r1, r1, #16
    5db6:	4b0c      	ldr	r3, [pc, #48]	; (5de8 <configure_adc+0x60>)
    5db8:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    5dba:	230f      	movs	r3, #15
    5dbc:	7593      	strb	r3, [r2, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    5dbe:	7613      	strb	r3, [r2, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    5dc0:	7813      	ldrb	r3, [r2, #0]
    5dc2:	2102      	movs	r1, #2
    5dc4:	430b      	orrs	r3, r1
    5dc6:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    5dc8:	4b04      	ldr	r3, [pc, #16]	; (5ddc <configure_adc+0x54>)
    5dca:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    5dcc:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
    5dce:	b25b      	sxtb	r3, r3
    5dd0:	2b00      	cmp	r3, #0
    5dd2:	dbfb      	blt.n	5dcc <configure_adc+0x44>

	//ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;

	adc_enable(&adc_instance);
}
    5dd4:	b00c      	add	sp, #48	; 0x30
    5dd6:	bd10      	pop	{r4, pc}
    5dd8:	000033ad 	.word	0x000033ad
    5ddc:	20000488 	.word	0x20000488
    5de0:	42004000 	.word	0x42004000
    5de4:	000033f5 	.word	0x000033f5
    5de8:	e000e100 	.word	0xe000e100

00005dec <main>:
 * Application entry point.
 *
 * \return program return value.
 */
int main(void)
{
    5dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dee:	46c6      	mov	lr, r8
    5df0:	b500      	push	{lr}
    5df2:	b098      	sub	sp, #96	; 0x60
	tstrWifiInitParam param;
	int8_t ret;
	char topic[strlen(SENSOR_TOPIC) + MAIN_CHAT_USER_NAME_SIZE + 1];

	/* Initialize the board. */
	system_init();
    5df4:	4b89      	ldr	r3, [pc, #548]	; (601c <main+0x230>)
    5df6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    5df8:	aa02      	add	r2, sp, #8
    5dfa:	2380      	movs	r3, #128	; 0x80
    5dfc:	05db      	lsls	r3, r3, #23
    5dfe:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    5e00:	2300      	movs	r3, #0
    5e02:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    5e04:	21ff      	movs	r1, #255	; 0xff
    5e06:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    5e08:	2100      	movs	r1, #0
    5e0a:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    5e0c:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    5e0e:	2501      	movs	r5, #1
    5e10:	2024      	movs	r0, #36	; 0x24
    5e12:	5415      	strb	r5, [r2, r0]
	config->transmitter_enable = true;
    5e14:	3001      	adds	r0, #1
    5e16:	5415      	strb	r5, [r2, r0]
	config->clock_polarity_inverted = false;
    5e18:	3001      	adds	r0, #1
    5e1a:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    5e1c:	3001      	adds	r0, #1
    5e1e:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    5e20:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    5e22:	3005      	adds	r0, #5
    5e24:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    5e26:	3001      	adds	r0, #1
    5e28:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    5e2a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    5e2c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    5e2e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    5e30:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    5e32:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    5e34:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    5e36:	2313      	movs	r3, #19
    5e38:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    5e3a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    5e3c:	2380      	movs	r3, #128	; 0x80
    5e3e:	025b      	lsls	r3, r3, #9
    5e40:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    5e42:	4b77      	ldr	r3, [pc, #476]	; (6020 <main+0x234>)
    5e44:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    5e46:	2301      	movs	r3, #1
    5e48:	425b      	negs	r3, r3
    5e4a:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    5e4c:	4975      	ldr	r1, [pc, #468]	; (6024 <main+0x238>)
    5e4e:	6391      	str	r1, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    5e50:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    5e52:	23e1      	movs	r3, #225	; 0xe1
    5e54:	025b      	lsls	r3, r3, #9
    5e56:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    5e58:	4c73      	ldr	r4, [pc, #460]	; (6028 <main+0x23c>)
    5e5a:	4b74      	ldr	r3, [pc, #464]	; (602c <main+0x240>)
    5e5c:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    5e5e:	4974      	ldr	r1, [pc, #464]	; (6030 <main+0x244>)
    5e60:	4b74      	ldr	r3, [pc, #464]	; (6034 <main+0x248>)
    5e62:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    5e64:	4974      	ldr	r1, [pc, #464]	; (6038 <main+0x24c>)
    5e66:	4b75      	ldr	r3, [pc, #468]	; (603c <main+0x250>)
    5e68:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    5e6a:	4975      	ldr	r1, [pc, #468]	; (6040 <main+0x254>)
    5e6c:	0020      	movs	r0, r4
    5e6e:	4b75      	ldr	r3, [pc, #468]	; (6044 <main+0x258>)
    5e70:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    5e72:	4f75      	ldr	r7, [pc, #468]	; (6048 <main+0x25c>)
    5e74:	683b      	ldr	r3, [r7, #0]
    5e76:	6898      	ldr	r0, [r3, #8]
    5e78:	2100      	movs	r1, #0
    5e7a:	4e74      	ldr	r6, [pc, #464]	; (604c <main+0x260>)
    5e7c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    5e7e:	683b      	ldr	r3, [r7, #0]
    5e80:	6858      	ldr	r0, [r3, #4]
    5e82:	2100      	movs	r1, #0
    5e84:	47b0      	blx	r6
	usart_register_callback(&cdc_uart_module, (usart_callback_t)uart_callback, USART_CALLBACK_BUFFER_RECEIVED);
    5e86:	2201      	movs	r2, #1
    5e88:	4971      	ldr	r1, [pc, #452]	; (6050 <main+0x264>)
    5e8a:	0020      	movs	r0, r4
    5e8c:	4b71      	ldr	r3, [pc, #452]	; (6054 <main+0x268>)
    5e8e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5e90:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5e92:	0030      	movs	r0, r6
    5e94:	4b70      	ldr	r3, [pc, #448]	; (6058 <main+0x26c>)
    5e96:	4798      	blx	r3
    5e98:	231f      	movs	r3, #31
    5e9a:	4018      	ands	r0, r3
    5e9c:	4085      	lsls	r5, r0
    5e9e:	4b6f      	ldr	r3, [pc, #444]	; (605c <main+0x270>)
    5ea0:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    5ea2:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    5ea4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    5ea6:	2a00      	cmp	r2, #0
    5ea8:	d1fc      	bne.n	5ea4 <main+0xb8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    5eaa:	6833      	ldr	r3, [r6, #0]
    5eac:	3202      	adds	r2, #2
    5eae:	4313      	orrs	r3, r2
    5eb0:	6033      	str	r3, [r6, #0]

	/* Initialize the UART console. */
	configure_console();

	/* Output example information */
	printf(STRING_HEADER);
    5eb2:	486b      	ldr	r0, [pc, #428]	; (6060 <main+0x274>)
    5eb4:	4b6b      	ldr	r3, [pc, #428]	; (6064 <main+0x278>)
    5eb6:	4798      	blx	r3
	sw_timer_get_config_defaults(&swt_conf);
    5eb8:	ac02      	add	r4, sp, #8
    5eba:	0020      	movs	r0, r4
    5ebc:	4b6a      	ldr	r3, [pc, #424]	; (6068 <main+0x27c>)
    5ebe:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    5ec0:	4d6a      	ldr	r5, [pc, #424]	; (606c <main+0x280>)
    5ec2:	0021      	movs	r1, r4
    5ec4:	0028      	movs	r0, r5
    5ec6:	4b6a      	ldr	r3, [pc, #424]	; (6070 <main+0x284>)
    5ec8:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    5eca:	0028      	movs	r0, r5
    5ecc:	4b69      	ldr	r3, [pc, #420]	; (6074 <main+0x288>)
    5ece:	4798      	blx	r3
	mqtt_get_config_defaults(&mqtt_conf);
    5ed0:	0020      	movs	r0, r4
    5ed2:	4b69      	ldr	r3, [pc, #420]	; (6078 <main+0x28c>)
    5ed4:	4798      	blx	r3
	mqtt_conf.timer_inst = &swt_module_inst;
    5ed6:	6065      	str	r5, [r4, #4]
	mqtt_conf.recv_buffer = mqtt_buffer;
    5ed8:	4b68      	ldr	r3, [pc, #416]	; (607c <main+0x290>)
    5eda:	60e3      	str	r3, [r4, #12]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    5edc:	2380      	movs	r3, #128	; 0x80
    5ede:	6123      	str	r3, [r4, #16]
	mqtt_conf.port = MQTT_PORT;
    5ee0:	4b67      	ldr	r3, [pc, #412]	; (6080 <main+0x294>)
    5ee2:	8023      	strh	r3, [r4, #0]
	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    5ee4:	0021      	movs	r1, r4
    5ee6:	4867      	ldr	r0, [pc, #412]	; (6084 <main+0x298>)
    5ee8:	4b67      	ldr	r3, [pc, #412]	; (6088 <main+0x29c>)
    5eea:	4798      	blx	r3
    5eec:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5eee:	da03      	bge.n	5ef8 <main+0x10c>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    5ef0:	4866      	ldr	r0, [pc, #408]	; (608c <main+0x2a0>)
    5ef2:	4b67      	ldr	r3, [pc, #412]	; (6090 <main+0x2a4>)
    5ef4:	4798      	blx	r3
    5ef6:	e7fe      	b.n	5ef6 <main+0x10a>
	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    5ef8:	4966      	ldr	r1, [pc, #408]	; (6094 <main+0x2a8>)
    5efa:	4862      	ldr	r0, [pc, #392]	; (6084 <main+0x298>)
    5efc:	4b66      	ldr	r3, [pc, #408]	; (6098 <main+0x2ac>)
    5efe:	4798      	blx	r3
    5f00:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    5f02:	da03      	bge.n	5f0c <main+0x120>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    5f04:	4865      	ldr	r0, [pc, #404]	; (609c <main+0x2b0>)
    5f06:	4b62      	ldr	r3, [pc, #392]	; (6090 <main+0x2a4>)
    5f08:	4798      	blx	r3
    5f0a:	e7fe      	b.n	5f0a <main+0x11e>

	/* Initialize the MQTT service. */
	configure_mqtt();

	/* Initialize the BSP. */
	nm_bsp_init();
    5f0c:	4b64      	ldr	r3, [pc, #400]	; (60a0 <main+0x2b4>)
    5f0e:	4798      	blx	r3

	/* Setup user name first */
		printf("User : %s\r\n", mqtt_user);
    5f10:	4d64      	ldr	r5, [pc, #400]	; (60a4 <main+0x2b8>)
    5f12:	0029      	movs	r1, r5
    5f14:	4864      	ldr	r0, [pc, #400]	; (60a8 <main+0x2bc>)
    5f16:	4c5e      	ldr	r4, [pc, #376]	; (6090 <main+0x2a4>)
    5f18:	47a0      	blx	r4
		printf("Password : %s\r\n", mqtt_user);
    5f1a:	0029      	movs	r1, r5
    5f1c:	4863      	ldr	r0, [pc, #396]	; (60ac <main+0x2c0>)
    5f1e:	47a0      	blx	r4
	//sprintf(topic, "%s%s", MAIN_CHAT_TOPIC, mqtt_user);

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    5f20:	2218      	movs	r2, #24
    5f22:	2100      	movs	r1, #0
    5f24:	a812      	add	r0, sp, #72	; 0x48
    5f26:	4b62      	ldr	r3, [pc, #392]	; (60b0 <main+0x2c4>)
    5f28:	4798      	blx	r3

	/* Initialize Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_callback; /* Set Wi-Fi event callback. */
    5f2a:	4b62      	ldr	r3, [pc, #392]	; (60b4 <main+0x2c8>)
    5f2c:	9312      	str	r3, [sp, #72]	; 0x48
	ret = m2m_wifi_init(&param);
    5f2e:	a812      	add	r0, sp, #72	; 0x48
    5f30:	4b61      	ldr	r3, [pc, #388]	; (60b8 <main+0x2cc>)
    5f32:	4798      	blx	r3
    5f34:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    5f36:	d003      	beq.n	5f40 <main+0x154>
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret);
    5f38:	4860      	ldr	r0, [pc, #384]	; (60bc <main+0x2d0>)
    5f3a:	4b55      	ldr	r3, [pc, #340]	; (6090 <main+0x2a4>)
    5f3c:	4798      	blx	r3
    5f3e:	e7fe      	b.n	5f3e <main+0x152>
		while (1) { /* Loop forever. */
		}
	}

	/* Initialize socket interface. */
	socketInit();
    5f40:	4b5f      	ldr	r3, [pc, #380]	; (60c0 <main+0x2d4>)
    5f42:	4798      	blx	r3
	registerSocketCallback(socket_event_handler, socket_resolve_handler);
    5f44:	495f      	ldr	r1, [pc, #380]	; (60c4 <main+0x2d8>)
    5f46:	4860      	ldr	r0, [pc, #384]	; (60c8 <main+0x2dc>)
    5f48:	4b60      	ldr	r3, [pc, #384]	; (60cc <main+0x2e0>)
    5f4a:	4798      	blx	r3

	/* Connect to router. */
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    5f4c:	23ff      	movs	r3, #255	; 0xff
    5f4e:	9300      	str	r3, [sp, #0]
    5f50:	4b5f      	ldr	r3, [pc, #380]	; (60d0 <main+0x2e4>)
    5f52:	2202      	movs	r2, #2
    5f54:	210b      	movs	r1, #11
    5f56:	485f      	ldr	r0, [pc, #380]	; (60d4 <main+0x2e8>)
    5f58:	4c5f      	ldr	r4, [pc, #380]	; (60d8 <main+0x2ec>)
    5f5a:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			
	//setup lm34 sensor
	configure_adc();
    5f5c:	4b5f      	ldr	r3, [pc, #380]	; (60dc <main+0x2f0>)
    5f5e:	4798      	blx	r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5f60:	2601      	movs	r6, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    5f62:	2404      	movs	r4, #4
		status_flags |= ADC_STATUS_WINDOW;
    5f64:	2502      	movs	r5, #2
    5f66:	46a8      	mov	r8, r5
    5f68:	e03e      	b.n	5fe8 <main+0x1fc>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    5f6a:	4216      	tst	r6, r2
    5f6c:	d10a      	bne.n	5f84 <main+0x198>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5f6e:	7e0b      	ldrb	r3, [r1, #24]
    5f70:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5f72:	0032      	movs	r2, r6
    5f74:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5f76:	421c      	tst	r4, r3
    5f78:	d000      	beq.n	5f7c <main+0x190>
		status_flags |= ADC_STATUS_WINDOW;
    5f7a:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5f7c:	421d      	tst	r5, r3
    5f7e:	d0f4      	beq.n	5f6a <main+0x17e>
		status_flags |= ADC_STATUS_OVERRUN;
    5f80:	4322      	orrs	r2, r4
    5f82:	e7f2      	b.n	5f6a <main+0x17e>
    5f84:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    5f86:	b25b      	sxtb	r3, r3
    5f88:	2b00      	cmp	r3, #0
    5f8a:	dbfb      	blt.n	5f84 <main+0x198>
	*result = adc_module->RESULT.reg;
    5f8c:	8b48      	ldrh	r0, [r1, #26]
    5f8e:	b280      	uxth	r0, r0
	adc_module->INTFLAG.reg = int_flags;
    5f90:	760e      	strb	r6, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    5f92:	7e0b      	ldrb	r3, [r1, #24]
    5f94:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    5f96:	0032      	movs	r2, r6
    5f98:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    5f9a:	421c      	tst	r4, r3
    5f9c:	d000      	beq.n	5fa0 <main+0x1b4>
		status_flags |= ADC_STATUS_WINDOW;
    5f9e:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    5fa0:	421d      	tst	r5, r3
    5fa2:	d000      	beq.n	5fa6 <main+0x1ba>
		status_flags |= ADC_STATUS_OVERRUN;
    5fa4:	4322      	orrs	r2, r4
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    5fa6:	4214      	tst	r4, r2
    5fa8:	d000      	beq.n	5fac <main+0x1c0>
	adc_module->INTFLAG.reg = int_flags;
    5faa:	760d      	strb	r5, [r1, #24]
			
			/* Wait for conversion to be done and read out result */
		} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
		
		
		float millivolts= (result/4096.0) * 1000;
    5fac:	4b4c      	ldr	r3, [pc, #304]	; (60e0 <main+0x2f4>)
    5fae:	4798      	blx	r3
		//float fahrenheit= millivolts/10;
		uint16_t fahrenheit = (2.0 * result * 100)/4096.0;
    5fb0:	0002      	movs	r2, r0
    5fb2:	000b      	movs	r3, r1
    5fb4:	4f4b      	ldr	r7, [pc, #300]	; (60e4 <main+0x2f8>)
    5fb6:	47b8      	blx	r7
    5fb8:	4f4b      	ldr	r7, [pc, #300]	; (60e8 <main+0x2fc>)
    5fba:	2200      	movs	r2, #0
    5fbc:	4b4b      	ldr	r3, [pc, #300]	; (60ec <main+0x300>)
    5fbe:	47b8      	blx	r7
    5fc0:	2200      	movs	r2, #0
    5fc2:	4b4b      	ldr	r3, [pc, #300]	; (60f0 <main+0x304>)
    5fc4:	47b8      	blx	r7
    5fc6:	4b4b      	ldr	r3, [pc, #300]	; (60f4 <main+0x308>)
    5fc8:	4798      	blx	r3
		//int fahrenheit = 89;
		sprintf(pub_text, "%d", fahrenheit);
    5fca:	b282      	uxth	r2, r0
    5fcc:	4f4a      	ldr	r7, [pc, #296]	; (60f8 <main+0x30c>)
    5fce:	494b      	ldr	r1, [pc, #300]	; (60fc <main+0x310>)
    5fd0:	0038      	movs	r0, r7
    5fd2:	4b4b      	ldr	r3, [pc, #300]	; (6100 <main+0x314>)
    5fd4:	4798      	blx	r3
		//printf("Temperature in Fahrenheit:%d\r\n", fahrenheit);
		mqtt_publish(&mqtt_inst, SENSOR_TOPIC, pub_text, 2, 2, 1); 
    5fd6:	9601      	str	r6, [sp, #4]
    5fd8:	4643      	mov	r3, r8
    5fda:	9300      	str	r3, [sp, #0]
    5fdc:	002b      	movs	r3, r5
    5fde:	003a      	movs	r2, r7
    5fe0:	4948      	ldr	r1, [pc, #288]	; (6104 <main+0x318>)
    5fe2:	4828      	ldr	r0, [pc, #160]	; (6084 <main+0x298>)
    5fe4:	4f48      	ldr	r7, [pc, #288]	; (6108 <main+0x31c>)
    5fe6:	47b8      	blx	r7
		m2m_wifi_handle_events(NULL);
    5fe8:	2000      	movs	r0, #0
    5fea:	4b48      	ldr	r3, [pc, #288]	; (610c <main+0x320>)
    5fec:	4798      	blx	r3
		usart_read_job(&cdc_uart_module, &uart_ch_buffer);
    5fee:	4948      	ldr	r1, [pc, #288]	; (6110 <main+0x324>)
    5ff0:	480d      	ldr	r0, [pc, #52]	; (6028 <main+0x23c>)
    5ff2:	4b48      	ldr	r3, [pc, #288]	; (6114 <main+0x328>)
    5ff4:	4798      	blx	r3
		sw_timer_task(&swt_module_inst);
    5ff6:	481d      	ldr	r0, [pc, #116]	; (606c <main+0x280>)
    5ff8:	4b47      	ldr	r3, [pc, #284]	; (6118 <main+0x32c>)
    5ffa:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    5ffc:	4b47      	ldr	r3, [pc, #284]	; (611c <main+0x330>)
    5ffe:	6819      	ldr	r1, [r3, #0]
    6000:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6002:	b25b      	sxtb	r3, r3
    6004:	2b00      	cmp	r3, #0
    6006:	dbfb      	blt.n	6000 <main+0x214>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    6008:	7b0b      	ldrb	r3, [r1, #12]
    600a:	2202      	movs	r2, #2
    600c:	4313      	orrs	r3, r2
    600e:	730b      	strb	r3, [r1, #12]
    6010:	7e4b      	ldrb	r3, [r1, #25]
	while (adc_is_syncing(module_inst)) {
    6012:	b25b      	sxtb	r3, r3
    6014:	2b00      	cmp	r3, #0
    6016:	dbfb      	blt.n	6010 <main+0x224>
    6018:	e7a9      	b.n	5f6e <main+0x182>
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	000050c9 	.word	0x000050c9
    6020:	00160002 	.word	0x00160002
    6024:	00180002 	.word	0x00180002
    6028:	200000f8 	.word	0x200000f8
    602c:	2000042c 	.word	0x2000042c
    6030:	00005c39 	.word	0x00005c39
    6034:	20000428 	.word	0x20000428
    6038:	00005c0d 	.word	0x00005c0d
    603c:	20000424 	.word	0x20000424
    6040:	42001400 	.word	0x42001400
    6044:	000043b1 	.word	0x000043b1
    6048:	2000001c 	.word	0x2000001c
    604c:	00008af9 	.word	0x00008af9
    6050:	00005b49 	.word	0x00005b49
    6054:	000047e1 	.word	0x000047e1
    6058:	00003e85 	.word	0x00003e85
    605c:	e000e100 	.word	0xe000e100
    6060:	0000ad14 	.word	0x0000ad14
    6064:	00008ac1 	.word	0x00008ac1
    6068:	000059ad 	.word	0x000059ad
    606c:	20000430 	.word	0x20000430
    6070:	000059b9 	.word	0x000059b9
    6074:	00005a65 	.word	0x00005a65
    6078:	000061d1 	.word	0x000061d1
    607c:	2000012c 	.word	0x2000012c
    6080:	000029ec 	.word	0x000029ec
    6084:	200001ac 	.word	0x200001ac
    6088:	000061f5 	.word	0x000061f5
    608c:	0000ad80 	.word	0x0000ad80
    6090:	000089a5 	.word	0x000089a5
    6094:	00005c51 	.word	0x00005c51
    6098:	00006281 	.word	0x00006281
    609c:	0000adb4 	.word	0x0000adb4
    60a0:	000001d9 	.word	0x000001d9
    60a4:	20000014 	.word	0x20000014
    60a8:	0000ade8 	.word	0x0000ade8
    60ac:	0000adf4 	.word	0x0000adf4
    60b0:	00008843 	.word	0x00008843
    60b4:	00005b75 	.word	0x00005b75
    60b8:	00001115 	.word	0x00001115
    60bc:	0000ae04 	.word	0x0000ae04
    60c0:	00002d41 	.word	0x00002d41
    60c4:	00005b5d 	.word	0x00005b5d
    60c8:	00005b69 	.word	0x00005b69
    60cc:	00002d85 	.word	0x00002d85
    60d0:	0000af4c 	.word	0x0000af4c
    60d4:	0000af58 	.word	0x0000af58
    60d8:	000014e5 	.word	0x000014e5
    60dc:	00005d89 	.word	0x00005d89
    60e0:	00008475 	.word	0x00008475
    60e4:	000072c1 	.word	0x000072c1
    60e8:	000078e1 	.word	0x000078e1
    60ec:	40590000 	.word	0x40590000
    60f0:	3f300000 	.word	0x3f300000
    60f4:	00007285 	.word	0x00007285
    60f8:	20000220 	.word	0x20000220
    60fc:	0000ae2c 	.word	0x0000ae2c
    6100:	00008c65 	.word	0x00008c65
    6104:	0000ae7c 	.word	0x0000ae7c
    6108:	000066a9 	.word	0x000066a9
    610c:	00001249 	.word	0x00001249
    6110:	20000264 	.word	0x20000264
    6114:	000047f9 	.word	0x000047f9
    6118:	00005aed 	.word	0x00005aed
    611c:	20000488 	.word	0x20000488

00006120 <_hwerr_to_stderr>:
    6120:	1c03      	adds	r3, r0, #0
    6122:	300e      	adds	r0, #14
    6124:	b500      	push	{lr}
    6126:	280e      	cmp	r0, #14
    6128:	d819      	bhi.n	615e <_hwerr_to_stderr+0x3e>
    612a:	f000 ff01 	bl	6f30 <__gnu_thumb1_case_uqi>
    612e:	1416      	.short	0x1416
    6130:	1b181012 	.word	0x1b181012
    6134:	180c0e18 	.word	0x180c0e18
    6138:	1d0a0e0e 	.word	0x1d0a0e0e
    613c:	08          	.byte	0x08
    613d:	00          	.byte	0x00
    613e:	2000      	movs	r0, #0
    6140:	e014      	b.n	616c <_hwerr_to_stderr+0x4c>
    6142:	2070      	movs	r0, #112	; 0x70
    6144:	e011      	b.n	616a <_hwerr_to_stderr+0x4a>
    6146:	2016      	movs	r0, #22
    6148:	e00f      	b.n	616a <_hwerr_to_stderr+0x4a>
    614a:	200c      	movs	r0, #12
    614c:	e00d      	b.n	616a <_hwerr_to_stderr+0x4a>
    614e:	2079      	movs	r0, #121	; 0x79
    6150:	e00b      	b.n	616a <_hwerr_to_stderr+0x4a>
    6152:	2068      	movs	r0, #104	; 0x68
    6154:	e009      	b.n	616a <_hwerr_to_stderr+0x4a>
    6156:	200b      	movs	r0, #11
    6158:	e007      	b.n	616a <_hwerr_to_stderr+0x4a>
    615a:	2010      	movs	r0, #16
    615c:	e005      	b.n	616a <_hwerr_to_stderr+0x4a>
    615e:	2000      	movs	r0, #0
    6160:	4283      	cmp	r3, r0
    6162:	da03      	bge.n	616c <_hwerr_to_stderr+0x4c>
    6164:	2005      	movs	r0, #5
    6166:	e000      	b.n	616a <_hwerr_to_stderr+0x4a>
    6168:	2002      	movs	r0, #2
    616a:	4240      	negs	r0, r0
    616c:	bd00      	pop	{pc}
	...

00006170 <_mqtt_send_wait>:
    6170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6172:	1c04      	adds	r4, r0, #0
    6174:	3443      	adds	r4, #67	; 0x43
    6176:	7823      	ldrb	r3, [r4, #0]
    6178:	1c05      	adds	r5, r0, #0
    617a:	07d8      	lsls	r0, r3, #31
    617c:	d51c      	bpl.n	61b8 <_mqtt_send_wait+0x48>
    617e:	2604      	movs	r6, #4
    6180:	4333      	orrs	r3, r6
    6182:	7023      	strb	r3, [r4, #0]
    6184:	2002      	movs	r0, #2
    6186:	5628      	ldrsb	r0, [r5, r0]
    6188:	b292      	uxth	r2, r2
    618a:	2300      	movs	r3, #0
    618c:	4f0c      	ldr	r7, [pc, #48]	; (61c0 <_mqtt_send_wait+0x50>)
    618e:	47b8      	blx	r7
    6190:	2800      	cmp	r0, #0
    6192:	da05      	bge.n	61a0 <_mqtt_send_wait+0x30>
    6194:	7823      	ldrb	r3, [r4, #0]
    6196:	43b3      	bics	r3, r6
    6198:	7023      	strb	r3, [r4, #0]
    619a:	4b0a      	ldr	r3, [pc, #40]	; (61c4 <_mqtt_send_wait+0x54>)
    619c:	4798      	blx	r3
    619e:	e00d      	b.n	61bc <_mqtt_send_wait+0x4c>
    61a0:	7822      	ldrb	r2, [r4, #0]
    61a2:	2314      	movs	r3, #20
    61a4:	4013      	ands	r3, r2
    61a6:	2000      	movs	r0, #0
    61a8:	2b04      	cmp	r3, #4
    61aa:	d107      	bne.n	61bc <_mqtt_send_wait+0x4c>
    61ac:	4b06      	ldr	r3, [pc, #24]	; (61c8 <_mqtt_send_wait+0x58>)
    61ae:	4798      	blx	r3
    61b0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    61b2:	4b06      	ldr	r3, [pc, #24]	; (61cc <_mqtt_send_wait+0x5c>)
    61b4:	4798      	blx	r3
    61b6:	e7f3      	b.n	61a0 <_mqtt_send_wait+0x30>
    61b8:	2001      	movs	r0, #1
    61ba:	4240      	negs	r0, r0
    61bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	00002fad 	.word	0x00002fad
    61c4:	00006121 	.word	0x00006121
    61c8:	00001249 	.word	0x00001249
    61cc:	00005aed 	.word	0x00005aed

000061d0 <mqtt_get_config_defaults>:
    61d0:	4b07      	ldr	r3, [pc, #28]	; (61f0 <mqtt_get_config_defaults+0x20>)
    61d2:	2240      	movs	r2, #64	; 0x40
    61d4:	8003      	strh	r3, [r0, #0]
    61d6:	2396      	movs	r3, #150	; 0x96
    61d8:	009b      	lsls	r3, r3, #2
    61da:	8103      	strh	r3, [r0, #8]
    61dc:	6102      	str	r2, [r0, #16]
    61de:	2300      	movs	r3, #0
    61e0:	2220      	movs	r2, #32
    61e2:	7083      	strb	r3, [r0, #2]
    61e4:	6043      	str	r3, [r0, #4]
    61e6:	60c3      	str	r3, [r0, #12]
    61e8:	6142      	str	r2, [r0, #20]
    61ea:	7603      	strb	r3, [r0, #24]
    61ec:	4770      	bx	lr
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	0000075b 	.word	0x0000075b

000061f4 <mqtt_init>:
    61f4:	b538      	push	{r3, r4, r5, lr}
    61f6:	1c04      	adds	r4, r0, #0
    61f8:	1c0d      	adds	r5, r1, #0
    61fa:	2800      	cmp	r0, #0
    61fc:	d030      	beq.n	6260 <mqtt_init+0x6c>
    61fe:	2900      	cmp	r1, #0
    6200:	d02e      	beq.n	6260 <mqtt_init+0x6c>
    6202:	690b      	ldr	r3, [r1, #16]
    6204:	2b00      	cmp	r3, #0
    6206:	d02b      	beq.n	6260 <mqtt_init+0x6c>
    6208:	684b      	ldr	r3, [r1, #4]
    620a:	2b00      	cmp	r3, #0
    620c:	d028      	beq.n	6260 <mqtt_init+0x6c>
    620e:	2100      	movs	r1, #0
    6210:	2274      	movs	r2, #116	; 0x74
    6212:	4b16      	ldr	r3, [pc, #88]	; (626c <mqtt_init+0x78>)
    6214:	4798      	blx	r3
    6216:	1c20      	adds	r0, r4, #0
    6218:	4b15      	ldr	r3, [pc, #84]	; (6270 <mqtt_init+0x7c>)
    621a:	3058      	adds	r0, #88	; 0x58
    621c:	1c29      	adds	r1, r5, #0
    621e:	221c      	movs	r2, #28
    6220:	4798      	blx	r3
    6222:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6224:	2b00      	cmp	r3, #0
    6226:	d10b      	bne.n	6240 <mqtt_init+0x4c>
    6228:	6928      	ldr	r0, [r5, #16]
    622a:	4b12      	ldr	r3, [pc, #72]	; (6274 <mqtt_init+0x80>)
    622c:	4798      	blx	r3
    622e:	6660      	str	r0, [r4, #100]	; 0x64
    6230:	2800      	cmp	r0, #0
    6232:	d017      	beq.n	6264 <mqtt_init+0x70>
    6234:	1c23      	adds	r3, r4, #0
    6236:	3343      	adds	r3, #67	; 0x43
    6238:	781a      	ldrb	r2, [r3, #0]
    623a:	2120      	movs	r1, #32
    623c:	430a      	orrs	r2, r1
    623e:	701a      	strb	r2, [r3, #0]
    6240:	892a      	ldrh	r2, [r5, #8]
    6242:	23fa      	movs	r3, #250	; 0xfa
    6244:	005b      	lsls	r3, r3, #1
    6246:	4353      	muls	r3, r2
    6248:	6868      	ldr	r0, [r5, #4]
    624a:	490b      	ldr	r1, [pc, #44]	; (6278 <mqtt_init+0x84>)
    624c:	1c22      	adds	r2, r4, #0
    624e:	4d0b      	ldr	r5, [pc, #44]	; (627c <mqtt_init+0x88>)
    6250:	47a8      	blx	r5
    6252:	1c03      	adds	r3, r0, #0
    6254:	6520      	str	r0, [r4, #80]	; 0x50
    6256:	2000      	movs	r0, #0
    6258:	4283      	cmp	r3, r0
    625a:	da05      	bge.n	6268 <mqtt_init+0x74>
    625c:	201c      	movs	r0, #28
    625e:	e002      	b.n	6266 <mqtt_init+0x72>
    6260:	2016      	movs	r0, #22
    6262:	e000      	b.n	6266 <mqtt_init+0x72>
    6264:	200c      	movs	r0, #12
    6266:	4240      	negs	r0, r0
    6268:	bd38      	pop	{r3, r4, r5, pc}
    626a:	46c0      	nop			; (mov r8, r8)
    626c:	00008843 	.word	0x00008843
    6270:	0000880d 	.word	0x0000880d
    6274:	000087f9 	.word	0x000087f9
    6278:	000069fd 	.word	0x000069fd
    627c:	00005a79 	.word	0x00005a79

00006280 <mqtt_register_callback>:
    6280:	2800      	cmp	r0, #0
    6282:	d002      	beq.n	628a <mqtt_register_callback+0xa>
    6284:	6541      	str	r1, [r0, #84]	; 0x54
    6286:	2000      	movs	r0, #0
    6288:	e001      	b.n	628e <mqtt_register_callback+0xe>
    628a:	2016      	movs	r0, #22
    628c:	4240      	negs	r0, r0
    628e:	4770      	bx	lr

00006290 <mqtt_socket_resolve_handler>:
    6290:	b5f0      	push	{r4, r5, r6, r7, lr}
    6292:	1c06      	adds	r6, r0, #0
    6294:	b085      	sub	sp, #20
    6296:	1c0f      	adds	r7, r1, #0
    6298:	2400      	movs	r4, #0
    629a:	4b0f      	ldr	r3, [pc, #60]	; (62d8 <mqtt_socket_resolve_handler+0x48>)
    629c:	58e5      	ldr	r5, [r4, r3]
    629e:	2d00      	cmp	r5, #0
    62a0:	d015      	beq.n	62ce <mqtt_socket_resolve_handler+0x3e>
    62a2:	1ce9      	adds	r1, r5, #3
    62a4:	1c30      	adds	r0, r6, #0
    62a6:	4b0d      	ldr	r3, [pc, #52]	; (62dc <mqtt_socket_resolve_handler+0x4c>)
    62a8:	4798      	blx	r3
    62aa:	2800      	cmp	r0, #0
    62ac:	d10f      	bne.n	62ce <mqtt_socket_resolve_handler+0x3e>
    62ae:	466a      	mov	r2, sp
    62b0:	2302      	movs	r3, #2
    62b2:	8013      	strh	r3, [r2, #0]
    62b4:	1c2b      	adds	r3, r5, #0
    62b6:	3358      	adds	r3, #88	; 0x58
    62b8:	881b      	ldrh	r3, [r3, #0]
    62ba:	9701      	str	r7, [sp, #4]
    62bc:	ba5b      	rev16	r3, r3
    62be:	8053      	strh	r3, [r2, #2]
    62c0:	2002      	movs	r0, #2
    62c2:	5628      	ldrsb	r0, [r5, r0]
    62c4:	4669      	mov	r1, sp
    62c6:	2210      	movs	r2, #16
    62c8:	4b05      	ldr	r3, [pc, #20]	; (62e0 <mqtt_socket_resolve_handler+0x50>)
    62ca:	4798      	blx	r3
    62cc:	e002      	b.n	62d4 <mqtt_socket_resolve_handler+0x44>
    62ce:	3404      	adds	r4, #4
    62d0:	2c1c      	cmp	r4, #28
    62d2:	d1e2      	bne.n	629a <mqtt_socket_resolve_handler+0xa>
    62d4:	b005      	add	sp, #20
    62d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62d8:	20000268 	.word	0x20000268
    62dc:	00008ca9 	.word	0x00008ca9
    62e0:	00002f1d 	.word	0x00002f1d

000062e4 <mqtt_connect>:
    62e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62e6:	1c04      	adds	r4, r0, #0
    62e8:	b089      	sub	sp, #36	; 0x24
    62ea:	1c0d      	adds	r5, r1, #0
    62ec:	2800      	cmp	r0, #0
    62ee:	d051      	beq.n	6394 <mqtt_connect+0xb0>
    62f0:	2900      	cmp	r1, #0
    62f2:	d04f      	beq.n	6394 <mqtt_connect+0xb0>
    62f4:	1c08      	adds	r0, r1, #0
    62f6:	4b39      	ldr	r3, [pc, #228]	; (63dc <mqtt_connect+0xf8>)
    62f8:	4798      	blx	r3
    62fa:	2840      	cmp	r0, #64	; 0x40
    62fc:	d84c      	bhi.n	6398 <mqtt_connect+0xb4>
    62fe:	1c21      	adds	r1, r4, #0
    6300:	3143      	adds	r1, #67	; 0x43
    6302:	780b      	ldrb	r3, [r1, #0]
    6304:	9101      	str	r1, [sp, #4]
    6306:	07db      	lsls	r3, r3, #31
    6308:	0fd9      	lsrs	r1, r3, #31
    630a:	466a      	mov	r2, sp
    630c:	b2ce      	uxtb	r6, r1
    630e:	1ce0      	adds	r0, r4, #3
    6310:	7211      	strb	r1, [r2, #8]
    6312:	2e00      	cmp	r6, #0
    6314:	d142      	bne.n	639c <mqtt_connect+0xb8>
    6316:	2701      	movs	r7, #1
    6318:	1c29      	adds	r1, r5, #0
    631a:	4b31      	ldr	r3, [pc, #196]	; (63e0 <mqtt_connect+0xfc>)
    631c:	8027      	strh	r7, [r4, #0]
    631e:	4798      	blx	r3
    6320:	9a01      	ldr	r2, [sp, #4]
    6322:	2002      	movs	r0, #2
    6324:	7813      	ldrb	r3, [r2, #0]
    6326:	9901      	ldr	r1, [sp, #4]
    6328:	43bb      	bics	r3, r7
    632a:	4383      	bics	r3, r0
    632c:	22e3      	movs	r2, #227	; 0xe3
    632e:	4013      	ands	r3, r2
    6330:	466a      	mov	r2, sp
    6332:	700b      	strb	r3, [r1, #0]
    6334:	7a12      	ldrb	r2, [r2, #8]
    6336:	1c23      	adds	r3, r4, #0
    6338:	3348      	adds	r3, #72	; 0x48
    633a:	6466      	str	r6, [r4, #68]	; 0x44
    633c:	701a      	strb	r2, [r3, #0]
    633e:	7c9a      	ldrb	r2, [r3, #18]
    6340:	805e      	strh	r6, [r3, #2]
    6342:	1e53      	subs	r3, r2, #1
    6344:	419a      	sbcs	r2, r3
    6346:	b2d2      	uxtb	r2, r2
    6348:	1c39      	adds	r1, r7, #0
    634a:	4b26      	ldr	r3, [pc, #152]	; (63e4 <mqtt_connect+0x100>)
    634c:	4798      	blx	r3
    634e:	70a0      	strb	r0, [r4, #2]
    6350:	2800      	cmp	r0, #0
    6352:	db25      	blt.n	63a0 <mqtt_connect+0xbc>
    6354:	4b24      	ldr	r3, [pc, #144]	; (63e8 <mqtt_connect+0x104>)
    6356:	0080      	lsls	r0, r0, #2
    6358:	50c4      	str	r4, [r0, r3]
    635a:	1c2b      	adds	r3, r5, #0
    635c:	781f      	ldrb	r7, [r3, #0]
    635e:	2f00      	cmp	r7, #0
    6360:	d026      	beq.n	63b0 <mqtt_connect+0xcc>
    6362:	2220      	movs	r2, #32
    6364:	1c39      	adds	r1, r7, #0
    6366:	4391      	bics	r1, r2
    6368:	1c0a      	adds	r2, r1, #0
    636a:	3a41      	subs	r2, #65	; 0x41
    636c:	b2d2      	uxtb	r2, r2
    636e:	3301      	adds	r3, #1
    6370:	2a05      	cmp	r2, #5
    6372:	d90d      	bls.n	6390 <mqtt_connect+0xac>
    6374:	2f3a      	cmp	r7, #58	; 0x3a
    6376:	d00b      	beq.n	6390 <mqtt_connect+0xac>
    6378:	2f2f      	cmp	r7, #47	; 0x2f
    637a:	d009      	beq.n	6390 <mqtt_connect+0xac>
    637c:	2f2e      	cmp	r7, #46	; 0x2e
    637e:	d102      	bne.n	6386 <mqtt_connect+0xa2>
    6380:	2e00      	cmp	r6, #0
    6382:	d0eb      	beq.n	635c <mqtt_connect+0x78>
    6384:	e00f      	b.n	63a6 <mqtt_connect+0xc2>
    6386:	2230      	movs	r2, #48	; 0x30
    6388:	4017      	ands	r7, r2
    638a:	4297      	cmp	r7, r2
    638c:	d0e6      	beq.n	635c <mqtt_connect+0x78>
    638e:	e00a      	b.n	63a6 <mqtt_connect+0xc2>
    6390:	2601      	movs	r6, #1
    6392:	e7e3      	b.n	635c <mqtt_connect+0x78>
    6394:	2016      	movs	r0, #22
    6396:	e004      	b.n	63a2 <mqtt_connect+0xbe>
    6398:	205b      	movs	r0, #91	; 0x5b
    639a:	e002      	b.n	63a2 <mqtt_connect+0xbe>
    639c:	2078      	movs	r0, #120	; 0x78
    639e:	e000      	b.n	63a2 <mqtt_connect+0xbe>
    63a0:	201c      	movs	r0, #28
    63a2:	4240      	negs	r0, r0
    63a4:	e017      	b.n	63d6 <mqtt_connect+0xf2>
    63a6:	1c28      	adds	r0, r5, #0
    63a8:	4b10      	ldr	r3, [pc, #64]	; (63ec <mqtt_connect+0x108>)
    63aa:	4798      	blx	r3
    63ac:	2000      	movs	r0, #0
    63ae:	e012      	b.n	63d6 <mqtt_connect+0xf2>
    63b0:	466a      	mov	r2, sp
    63b2:	2302      	movs	r3, #2
    63b4:	8213      	strh	r3, [r2, #16]
    63b6:	1c23      	adds	r3, r4, #0
    63b8:	3358      	adds	r3, #88	; 0x58
    63ba:	881b      	ldrh	r3, [r3, #0]
    63bc:	1c28      	adds	r0, r5, #0
    63be:	ba5b      	rev16	r3, r3
    63c0:	8253      	strh	r3, [r2, #18]
    63c2:	4b0b      	ldr	r3, [pc, #44]	; (63f0 <mqtt_connect+0x10c>)
    63c4:	4798      	blx	r3
    63c6:	9005      	str	r0, [sp, #20]
    63c8:	2002      	movs	r0, #2
    63ca:	5620      	ldrsb	r0, [r4, r0]
    63cc:	a904      	add	r1, sp, #16
    63ce:	2210      	movs	r2, #16
    63d0:	4b08      	ldr	r3, [pc, #32]	; (63f4 <mqtt_connect+0x110>)
    63d2:	4798      	blx	r3
    63d4:	1c38      	adds	r0, r7, #0
    63d6:	b009      	add	sp, #36	; 0x24
    63d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63da:	46c0      	nop			; (mov r8, r8)
    63dc:	00008ccd 	.word	0x00008ccd
    63e0:	00008cbd 	.word	0x00008cbd
    63e4:	00002d99 	.word	0x00002d99
    63e8:	20000268 	.word	0x20000268
    63ec:	000031e1 	.word	0x000031e1
    63f0:	00003175 	.word	0x00003175
    63f4:	00002f1d 	.word	0x00002f1d

000063f8 <mqtt_connect_broker>:
    63f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    63fa:	b095      	sub	sp, #84	; 0x54
    63fc:	af02      	add	r7, sp, #8
    63fe:	617b      	str	r3, [r7, #20]
    6400:	1c3b      	adds	r3, r7, #0
    6402:	3370      	adds	r3, #112	; 0x70
    6404:	781b      	ldrb	r3, [r3, #0]
    6406:	1c05      	adds	r5, r0, #0
    6408:	60fb      	str	r3, [r7, #12]
    640a:	1c3b      	adds	r3, r7, #0
    640c:	3374      	adds	r3, #116	; 0x74
    640e:	781b      	ldrb	r3, [r3, #0]
    6410:	6139      	str	r1, [r7, #16]
    6412:	61fa      	str	r2, [r7, #28]
    6414:	60bb      	str	r3, [r7, #8]
    6416:	2800      	cmp	r0, #0
    6418:	d101      	bne.n	641e <mqtt_connect_broker+0x26>
    641a:	2016      	movs	r0, #22
    641c:	e129      	b.n	6672 <mqtt_connect_broker+0x27a>
    641e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6420:	4668      	mov	r0, sp
    6422:	3307      	adds	r3, #7
    6424:	08db      	lsrs	r3, r3, #3
    6426:	00db      	lsls	r3, r3, #3
    6428:	1ac0      	subs	r0, r0, r3
    642a:	4685      	mov	sp, r0
    642c:	ac02      	add	r4, sp, #8
    642e:	607c      	str	r4, [r7, #4]
    6430:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    6432:	2c00      	cmp	r4, #0
    6434:	d0f1      	beq.n	641a <mqtt_connect_broker+0x22>
    6436:	1c2b      	adds	r3, r5, #0
    6438:	3343      	adds	r3, #67	; 0x43
    643a:	781b      	ldrb	r3, [r3, #0]
    643c:	07d8      	lsls	r0, r3, #31
    643e:	d400      	bmi.n	6442 <mqtt_connect_broker+0x4a>
    6440:	e112      	b.n	6668 <mqtt_connect_broker+0x270>
    6442:	079a      	lsls	r2, r3, #30
    6444:	d500      	bpl.n	6448 <mqtt_connect_broker+0x50>
    6446:	e111      	b.n	666c <mqtt_connect_broker+0x274>
    6448:	071c      	lsls	r4, r3, #28
    644a:	d40b      	bmi.n	6464 <mqtt_connect_broker+0x6c>
    644c:	4e8b      	ldr	r6, [pc, #556]	; (667c <mqtt_connect_broker+0x284>)
    644e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6450:	47b0      	blx	r6
    6452:	1c03      	adds	r3, r0, #0
    6454:	61b8      	str	r0, [r7, #24]
    6456:	69f8      	ldr	r0, [r7, #28]
    6458:	330e      	adds	r3, #14
    645a:	1c34      	adds	r4, r6, #0
    645c:	2800      	cmp	r0, #0
    645e:	d113      	bne.n	6488 <mqtt_connect_broker+0x90>
    6460:	1c1e      	adds	r6, r3, #0
    6462:	e01d      	b.n	64a0 <mqtt_connect_broker+0xa8>
    6464:	1c2b      	adds	r3, r5, #0
    6466:	3370      	adds	r3, #112	; 0x70
    6468:	781b      	ldrb	r3, [r3, #0]
    646a:	2b00      	cmp	r3, #0
    646c:	d000      	beq.n	6470 <mqtt_connect_broker+0x78>
    646e:	e0ff      	b.n	6670 <mqtt_connect_broker+0x278>
    6470:	1c2b      	adds	r3, r5, #0
    6472:	3343      	adds	r3, #67	; 0x43
    6474:	781b      	ldrb	r3, [r3, #0]
    6476:	071a      	lsls	r2, r3, #28
    6478:	d5e8      	bpl.n	644c <mqtt_connect_broker+0x54>
    647a:	4b81      	ldr	r3, [pc, #516]	; (6680 <mqtt_connect_broker+0x288>)
    647c:	2000      	movs	r0, #0
    647e:	4798      	blx	r3
    6480:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6482:	4b80      	ldr	r3, [pc, #512]	; (6684 <mqtt_connect_broker+0x28c>)
    6484:	4798      	blx	r3
    6486:	e7f3      	b.n	6470 <mqtt_connect_broker+0x78>
    6488:	69f8      	ldr	r0, [r7, #28]
    648a:	47b0      	blx	r6
    648c:	69be      	ldr	r6, [r7, #24]
    648e:	697b      	ldr	r3, [r7, #20]
    6490:	3610      	adds	r6, #16
    6492:	1836      	adds	r6, r6, r0
    6494:	2b00      	cmp	r3, #0
    6496:	d003      	beq.n	64a0 <mqtt_connect_broker+0xa8>
    6498:	1c18      	adds	r0, r3, #0
    649a:	47a0      	blx	r4
    649c:	3602      	adds	r6, #2
    649e:	1836      	adds	r6, r6, r0
    64a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
    64a2:	2800      	cmp	r0, #0
    64a4:	d007      	beq.n	64b6 <mqtt_connect_broker+0xbe>
    64a6:	47a0      	blx	r4
    64a8:	3602      	adds	r6, #2
    64aa:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    64ac:	1830      	adds	r0, r6, r0
    64ae:	1906      	adds	r6, r0, r4
    64b0:	2c00      	cmp	r4, #0
    64b2:	d100      	bne.n	64b6 <mqtt_connect_broker+0xbe>
    64b4:	1c06      	adds	r6, r0, #0
    64b6:	69fc      	ldr	r4, [r7, #28]
    64b8:	2c00      	cmp	r4, #0
    64ba:	d006      	beq.n	64ca <mqtt_connect_broker+0xd2>
    64bc:	24c0      	movs	r4, #192	; 0xc0
    64be:	61bc      	str	r4, [r7, #24]
    64c0:	697c      	ldr	r4, [r7, #20]
    64c2:	2c00      	cmp	r4, #0
    64c4:	d103      	bne.n	64ce <mqtt_connect_broker+0xd6>
    64c6:	2480      	movs	r4, #128	; 0x80
    64c8:	e000      	b.n	64cc <mqtt_connect_broker+0xd4>
    64ca:	69fc      	ldr	r4, [r7, #28]
    64cc:	61bc      	str	r4, [r7, #24]
    64ce:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    64d0:	2c00      	cmp	r4, #0
    64d2:	d00f      	beq.n	64f4 <mqtt_connect_broker+0xfc>
    64d4:	68bc      	ldr	r4, [r7, #8]
    64d6:	2c00      	cmp	r4, #0
    64d8:	d003      	beq.n	64e2 <mqtt_connect_broker+0xea>
    64da:	69bc      	ldr	r4, [r7, #24]
    64dc:	2320      	movs	r3, #32
    64de:	431c      	orrs	r4, r3
    64e0:	61bc      	str	r4, [r7, #24]
    64e2:	68fc      	ldr	r4, [r7, #12]
    64e4:	2303      	movs	r3, #3
    64e6:	4023      	ands	r3, r4
    64e8:	00db      	lsls	r3, r3, #3
    64ea:	69bc      	ldr	r4, [r7, #24]
    64ec:	2204      	movs	r2, #4
    64ee:	4313      	orrs	r3, r2
    64f0:	431c      	orrs	r4, r3
    64f2:	61bc      	str	r4, [r7, #24]
    64f4:	693c      	ldr	r4, [r7, #16]
    64f6:	2c00      	cmp	r4, #0
    64f8:	d003      	beq.n	6502 <mqtt_connect_broker+0x10a>
    64fa:	69bc      	ldr	r4, [r7, #24]
    64fc:	2302      	movs	r3, #2
    64fe:	431c      	orrs	r4, r3
    6500:	61bc      	str	r4, [r7, #24]
    6502:	1c2b      	adds	r3, r5, #0
    6504:	3343      	adds	r3, #67	; 0x43
    6506:	781a      	ldrb	r2, [r3, #0]
    6508:	2108      	movs	r1, #8
    650a:	430a      	orrs	r2, r1
    650c:	701a      	strb	r2, [r3, #0]
    650e:	1c38      	adds	r0, r7, #0
    6510:	9500      	str	r5, [sp, #0]
    6512:	3020      	adds	r0, #32
    6514:	6879      	ldr	r1, [r7, #4]
    6516:	4b5c      	ldr	r3, [pc, #368]	; (6688 <mqtt_connect_broker+0x290>)
    6518:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    651a:	4c5c      	ldr	r4, [pc, #368]	; (668c <mqtt_connect_broker+0x294>)
    651c:	47a0      	blx	r4
    651e:	1c38      	adds	r0, r7, #0
    6520:	3020      	adds	r0, #32
    6522:	2110      	movs	r1, #16
    6524:	4b5a      	ldr	r3, [pc, #360]	; (6690 <mqtt_connect_broker+0x298>)
    6526:	4798      	blx	r3
    6528:	2e80      	cmp	r6, #128	; 0x80
    652a:	dd09      	ble.n	6540 <mqtt_connect_broker+0x148>
    652c:	2180      	movs	r1, #128	; 0x80
    652e:	4249      	negs	r1, r1
    6530:	4331      	orrs	r1, r6
    6532:	1c38      	adds	r0, r7, #0
    6534:	b249      	sxtb	r1, r1
    6536:	3020      	adds	r0, #32
    6538:	4c55      	ldr	r4, [pc, #340]	; (6690 <mqtt_connect_broker+0x298>)
    653a:	47a0      	blx	r4
    653c:	11f6      	asrs	r6, r6, #7
    653e:	e7f3      	b.n	6528 <mqtt_connect_broker+0x130>
    6540:	4b54      	ldr	r3, [pc, #336]	; (6694 <mqtt_connect_broker+0x29c>)
    6542:	401e      	ands	r6, r3
    6544:	d504      	bpl.n	6550 <mqtt_connect_broker+0x158>
    6546:	2380      	movs	r3, #128	; 0x80
    6548:	3e01      	subs	r6, #1
    654a:	425b      	negs	r3, r3
    654c:	431e      	orrs	r6, r3
    654e:	3601      	adds	r6, #1
    6550:	1c38      	adds	r0, r7, #0
    6552:	b271      	sxtb	r1, r6
    6554:	3020      	adds	r0, #32
    6556:	4c4e      	ldr	r4, [pc, #312]	; (6690 <mqtt_connect_broker+0x298>)
    6558:	47a0      	blx	r4
    655a:	1c38      	adds	r0, r7, #0
    655c:	4c4e      	ldr	r4, [pc, #312]	; (6698 <mqtt_connect_broker+0x2a0>)
    655e:	3020      	adds	r0, #32
    6560:	2106      	movs	r1, #6
    6562:	47a0      	blx	r4
    6564:	1c38      	adds	r0, r7, #0
    6566:	4b4d      	ldr	r3, [pc, #308]	; (669c <mqtt_connect_broker+0x2a4>)
    6568:	3020      	adds	r0, #32
    656a:	494d      	ldr	r1, [pc, #308]	; (66a0 <mqtt_connect_broker+0x2a8>)
    656c:	2206      	movs	r2, #6
    656e:	4798      	blx	r3
    6570:	1c38      	adds	r0, r7, #0
    6572:	3020      	adds	r0, #32
    6574:	2103      	movs	r1, #3
    6576:	4a46      	ldr	r2, [pc, #280]	; (6690 <mqtt_connect_broker+0x298>)
    6578:	4790      	blx	r2
    657a:	69bb      	ldr	r3, [r7, #24]
    657c:	1c38      	adds	r0, r7, #0
    657e:	4a44      	ldr	r2, [pc, #272]	; (6690 <mqtt_connect_broker+0x298>)
    6580:	b259      	sxtb	r1, r3
    6582:	3020      	adds	r0, #32
    6584:	4790      	blx	r2
    6586:	1c2b      	adds	r3, r5, #0
    6588:	3360      	adds	r3, #96	; 0x60
    658a:	2000      	movs	r0, #0
    658c:	5e19      	ldrsh	r1, [r3, r0]
    658e:	1c38      	adds	r0, r7, #0
    6590:	3020      	adds	r0, #32
    6592:	47a0      	blx	r4
    6594:	4e39      	ldr	r6, [pc, #228]	; (667c <mqtt_connect_broker+0x284>)
    6596:	6e38      	ldr	r0, [r7, #96]	; 0x60
    6598:	47b0      	blx	r6
    659a:	b201      	sxth	r1, r0
    659c:	1c38      	adds	r0, r7, #0
    659e:	3020      	adds	r0, #32
    65a0:	47a0      	blx	r4
    65a2:	6e38      	ldr	r0, [r7, #96]	; 0x60
    65a4:	47b0      	blx	r6
    65a6:	1c02      	adds	r2, r0, #0
    65a8:	1c38      	adds	r0, r7, #0
    65aa:	3020      	adds	r0, #32
    65ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
    65ae:	4b3b      	ldr	r3, [pc, #236]	; (669c <mqtt_connect_broker+0x2a4>)
    65b0:	4798      	blx	r3
    65b2:	6e78      	ldr	r0, [r7, #100]	; 0x64
    65b4:	2800      	cmp	r0, #0
    65b6:	d015      	beq.n	65e4 <mqtt_connect_broker+0x1ec>
    65b8:	47b0      	blx	r6
    65ba:	b201      	sxth	r1, r0
    65bc:	1c38      	adds	r0, r7, #0
    65be:	3020      	adds	r0, #32
    65c0:	47a0      	blx	r4
    65c2:	6e78      	ldr	r0, [r7, #100]	; 0x64
    65c4:	47b0      	blx	r6
    65c6:	1c02      	adds	r2, r0, #0
    65c8:	1c38      	adds	r0, r7, #0
    65ca:	4c34      	ldr	r4, [pc, #208]	; (669c <mqtt_connect_broker+0x2a4>)
    65cc:	3020      	adds	r0, #32
    65ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
    65d0:	47a0      	blx	r4
    65d2:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    65d4:	2c00      	cmp	r4, #0
    65d6:	d005      	beq.n	65e4 <mqtt_connect_broker+0x1ec>
    65d8:	1c38      	adds	r0, r7, #0
    65da:	1c21      	adds	r1, r4, #0
    65dc:	3020      	adds	r0, #32
    65de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    65e0:	4c2e      	ldr	r4, [pc, #184]	; (669c <mqtt_connect_broker+0x2a4>)
    65e2:	47a0      	blx	r4
    65e4:	69fc      	ldr	r4, [r7, #28]
    65e6:	2c00      	cmp	r4, #0
    65e8:	d01f      	beq.n	662a <mqtt_connect_broker+0x232>
    65ea:	4e24      	ldr	r6, [pc, #144]	; (667c <mqtt_connect_broker+0x284>)
    65ec:	1c20      	adds	r0, r4, #0
    65ee:	47b0      	blx	r6
    65f0:	b201      	sxth	r1, r0
    65f2:	1c38      	adds	r0, r7, #0
    65f4:	3020      	adds	r0, #32
    65f6:	4c28      	ldr	r4, [pc, #160]	; (6698 <mqtt_connect_broker+0x2a0>)
    65f8:	47a0      	blx	r4
    65fa:	69f8      	ldr	r0, [r7, #28]
    65fc:	47b0      	blx	r6
    65fe:	1c02      	adds	r2, r0, #0
    6600:	1c38      	adds	r0, r7, #0
    6602:	3020      	adds	r0, #32
    6604:	69f9      	ldr	r1, [r7, #28]
    6606:	4c25      	ldr	r4, [pc, #148]	; (669c <mqtt_connect_broker+0x2a4>)
    6608:	47a0      	blx	r4
    660a:	6978      	ldr	r0, [r7, #20]
    660c:	2800      	cmp	r0, #0
    660e:	d00c      	beq.n	662a <mqtt_connect_broker+0x232>
    6610:	47b0      	blx	r6
    6612:	b201      	sxth	r1, r0
    6614:	1c38      	adds	r0, r7, #0
    6616:	4a20      	ldr	r2, [pc, #128]	; (6698 <mqtt_connect_broker+0x2a0>)
    6618:	3020      	adds	r0, #32
    661a:	4790      	blx	r2
    661c:	6978      	ldr	r0, [r7, #20]
    661e:	47b0      	blx	r6
    6620:	1c02      	adds	r2, r0, #0
    6622:	1c38      	adds	r0, r7, #0
    6624:	3020      	adds	r0, #32
    6626:	6979      	ldr	r1, [r7, #20]
    6628:	47a0      	blx	r4
    662a:	1c38      	adds	r0, r7, #0
    662c:	1c2c      	adds	r4, r5, #0
    662e:	3020      	adds	r0, #32
    6630:	4b1c      	ldr	r3, [pc, #112]	; (66a4 <mqtt_connect_broker+0x2ac>)
    6632:	3443      	adds	r4, #67	; 0x43
    6634:	4798      	blx	r3
    6636:	7821      	ldrb	r1, [r4, #0]
    6638:	0789      	lsls	r1, r1, #30
    663a:	0fc9      	lsrs	r1, r1, #31
    663c:	2901      	cmp	r1, #1
    663e:	d10b      	bne.n	6658 <mqtt_connect_broker+0x260>
    6640:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    6642:	2a00      	cmp	r2, #0
    6644:	d108      	bne.n	6658 <mqtt_connect_broker+0x260>
    6646:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6648:	2b00      	cmp	r3, #0
    664a:	d005      	beq.n	6658 <mqtt_connect_broker+0x260>
    664c:	2034      	movs	r0, #52	; 0x34
    664e:	55c2      	strb	r2, [r0, r7]
    6650:	1c3a      	adds	r2, r7, #0
    6652:	1c28      	adds	r0, r5, #0
    6654:	3234      	adds	r2, #52	; 0x34
    6656:	4798      	blx	r3
    6658:	7823      	ldrb	r3, [r4, #0]
    665a:	2202      	movs	r2, #2
    665c:	4313      	orrs	r3, r2
    665e:	2208      	movs	r2, #8
    6660:	4393      	bics	r3, r2
    6662:	7023      	strb	r3, [r4, #0]
    6664:	2000      	movs	r0, #0
    6666:	e005      	b.n	6674 <mqtt_connect_broker+0x27c>
    6668:	2080      	movs	r0, #128	; 0x80
    666a:	e002      	b.n	6672 <mqtt_connect_broker+0x27a>
    666c:	2078      	movs	r0, #120	; 0x78
    666e:	e000      	b.n	6672 <mqtt_connect_broker+0x27a>
    6670:	200b      	movs	r0, #11
    6672:	4240      	negs	r0, r0
    6674:	46bd      	mov	sp, r7
    6676:	b013      	add	sp, #76	; 0x4c
    6678:	bdf0      	pop	{r4, r5, r6, r7, pc}
    667a:	46c0      	nop			; (mov r8, r8)
    667c:	00008ccd 	.word	0x00008ccd
    6680:	00001249 	.word	0x00001249
    6684:	00005aed 	.word	0x00005aed
    6688:	00006171 	.word	0x00006171
    668c:	0000590d 	.word	0x0000590d
    6690:	00005939 	.word	0x00005939
    6694:	8000007f 	.word	0x8000007f
    6698:	00005961 	.word	0x00005961
    669c:	00005979 	.word	0x00005979
    66a0:	0000af80 	.word	0x0000af80
    66a4:	0000591d 	.word	0x0000591d

000066a8 <mqtt_publish>:
    66a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66aa:	b093      	sub	sp, #76	; 0x4c
    66ac:	af02      	add	r7, sp, #8
    66ae:	60fb      	str	r3, [r7, #12]
    66b0:	1c3b      	adds	r3, r7, #0
    66b2:	3358      	adds	r3, #88	; 0x58
    66b4:	781b      	ldrb	r3, [r3, #0]
    66b6:	1c04      	adds	r4, r0, #0
    66b8:	613b      	str	r3, [r7, #16]
    66ba:	1c3b      	adds	r3, r7, #0
    66bc:	335c      	adds	r3, #92	; 0x5c
    66be:	781b      	ldrb	r3, [r3, #0]
    66c0:	6179      	str	r1, [r7, #20]
    66c2:	60ba      	str	r2, [r7, #8]
    66c4:	607b      	str	r3, [r7, #4]
    66c6:	2800      	cmp	r0, #0
    66c8:	d101      	bne.n	66ce <mqtt_publish+0x26>
    66ca:	2516      	movs	r5, #22
    66cc:	e0a7      	b.n	681e <mqtt_publish+0x176>
    66ce:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    66d0:	466a      	mov	r2, sp
    66d2:	3307      	adds	r3, #7
    66d4:	08db      	lsrs	r3, r3, #3
    66d6:	00db      	lsls	r3, r3, #3
    66d8:	1ad2      	subs	r2, r2, r3
    66da:	697b      	ldr	r3, [r7, #20]
    66dc:	4695      	mov	sp, r2
    66de:	ae02      	add	r6, sp, #8
    66e0:	2b00      	cmp	r3, #0
    66e2:	d0f2      	beq.n	66ca <mqtt_publish+0x22>
    66e4:	693a      	ldr	r2, [r7, #16]
    66e6:	2a02      	cmp	r2, #2
    66e8:	d8ef      	bhi.n	66ca <mqtt_publish+0x22>
    66ea:	1c05      	adds	r5, r0, #0
    66ec:	3543      	adds	r5, #67	; 0x43
    66ee:	782b      	ldrb	r3, [r5, #0]
    66f0:	079a      	lsls	r2, r3, #30
    66f2:	d400      	bmi.n	66f6 <mqtt_publish+0x4e>
    66f4:	e090      	b.n	6818 <mqtt_publish+0x170>
    66f6:	071a      	lsls	r2, r3, #28
    66f8:	d40a      	bmi.n	6710 <mqtt_publish+0x68>
    66fa:	4b4b      	ldr	r3, [pc, #300]	; (6828 <mqtt_publish+0x180>)
    66fc:	6978      	ldr	r0, [r7, #20]
    66fe:	4798      	blx	r3
    6700:	68fd      	ldr	r5, [r7, #12]
    6702:	693b      	ldr	r3, [r7, #16]
    6704:	3502      	adds	r5, #2
    6706:	182d      	adds	r5, r5, r0
    6708:	2b00      	cmp	r3, #0
    670a:	d011      	beq.n	6730 <mqtt_publish+0x88>
    670c:	3502      	adds	r5, #2
    670e:	e00f      	b.n	6730 <mqtt_publish+0x88>
    6710:	1c03      	adds	r3, r0, #0
    6712:	3370      	adds	r3, #112	; 0x70
    6714:	781b      	ldrb	r3, [r3, #0]
    6716:	2b00      	cmp	r3, #0
    6718:	d000      	beq.n	671c <mqtt_publish+0x74>
    671a:	e07f      	b.n	681c <mqtt_publish+0x174>
    671c:	782b      	ldrb	r3, [r5, #0]
    671e:	071a      	lsls	r2, r3, #28
    6720:	d5eb      	bpl.n	66fa <mqtt_publish+0x52>
    6722:	4b42      	ldr	r3, [pc, #264]	; (682c <mqtt_publish+0x184>)
    6724:	2000      	movs	r0, #0
    6726:	4798      	blx	r3
    6728:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    672a:	4b41      	ldr	r3, [pc, #260]	; (6830 <mqtt_publish+0x188>)
    672c:	4798      	blx	r3
    672e:	e7f5      	b.n	671c <mqtt_publish+0x74>
    6730:	1c23      	adds	r3, r4, #0
    6732:	3343      	adds	r3, #67	; 0x43
    6734:	781a      	ldrb	r2, [r3, #0]
    6736:	2108      	movs	r1, #8
    6738:	430a      	orrs	r2, r1
    673a:	701a      	strb	r2, [r3, #0]
    673c:	1c38      	adds	r0, r7, #0
    673e:	9400      	str	r4, [sp, #0]
    6740:	1c31      	adds	r1, r6, #0
    6742:	302c      	adds	r0, #44	; 0x2c
    6744:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    6746:	4b3b      	ldr	r3, [pc, #236]	; (6834 <mqtt_publish+0x18c>)
    6748:	4e3b      	ldr	r6, [pc, #236]	; (6838 <mqtt_publish+0x190>)
    674a:	47b0      	blx	r6
    674c:	687b      	ldr	r3, [r7, #4]
    674e:	2101      	movs	r1, #1
    6750:	4019      	ands	r1, r3
    6752:	2330      	movs	r3, #48	; 0x30
    6754:	4319      	orrs	r1, r3
    6756:	693b      	ldr	r3, [r7, #16]
    6758:	1c38      	adds	r0, r7, #0
    675a:	005a      	lsls	r2, r3, #1
    675c:	2306      	movs	r3, #6
    675e:	4013      	ands	r3, r2
    6760:	4319      	orrs	r1, r3
    6762:	302c      	adds	r0, #44	; 0x2c
    6764:	4b35      	ldr	r3, [pc, #212]	; (683c <mqtt_publish+0x194>)
    6766:	4798      	blx	r3
    6768:	4b34      	ldr	r3, [pc, #208]	; (683c <mqtt_publish+0x194>)
    676a:	2d80      	cmp	r5, #128	; 0x80
    676c:	dd08      	ble.n	6780 <mqtt_publish+0xd8>
    676e:	2180      	movs	r1, #128	; 0x80
    6770:	4249      	negs	r1, r1
    6772:	4329      	orrs	r1, r5
    6774:	1c38      	adds	r0, r7, #0
    6776:	b249      	sxtb	r1, r1
    6778:	302c      	adds	r0, #44	; 0x2c
    677a:	4798      	blx	r3
    677c:	11ed      	asrs	r5, r5, #7
    677e:	e7f3      	b.n	6768 <mqtt_publish+0xc0>
    6780:	4a2f      	ldr	r2, [pc, #188]	; (6840 <mqtt_publish+0x198>)
    6782:	4015      	ands	r5, r2
    6784:	d504      	bpl.n	6790 <mqtt_publish+0xe8>
    6786:	2280      	movs	r2, #128	; 0x80
    6788:	3d01      	subs	r5, #1
    678a:	4252      	negs	r2, r2
    678c:	4315      	orrs	r5, r2
    678e:	3501      	adds	r5, #1
    6790:	1c38      	adds	r0, r7, #0
    6792:	b269      	sxtb	r1, r5
    6794:	302c      	adds	r0, #44	; 0x2c
    6796:	4798      	blx	r3
    6798:	4e23      	ldr	r6, [pc, #140]	; (6828 <mqtt_publish+0x180>)
    679a:	6978      	ldr	r0, [r7, #20]
    679c:	47b0      	blx	r6
    679e:	b201      	sxth	r1, r0
    67a0:	1c38      	adds	r0, r7, #0
    67a2:	302c      	adds	r0, #44	; 0x2c
    67a4:	4d27      	ldr	r5, [pc, #156]	; (6844 <mqtt_publish+0x19c>)
    67a6:	47a8      	blx	r5
    67a8:	6978      	ldr	r0, [r7, #20]
    67aa:	47b0      	blx	r6
    67ac:	1c02      	adds	r2, r0, #0
    67ae:	1c38      	adds	r0, r7, #0
    67b0:	302c      	adds	r0, #44	; 0x2c
    67b2:	6979      	ldr	r1, [r7, #20]
    67b4:	4e24      	ldr	r6, [pc, #144]	; (6848 <mqtt_publish+0x1a0>)
    67b6:	47b0      	blx	r6
    67b8:	693a      	ldr	r2, [r7, #16]
    67ba:	2a00      	cmp	r2, #0
    67bc:	d006      	beq.n	67cc <mqtt_publish+0x124>
    67be:	8821      	ldrh	r1, [r4, #0]
    67c0:	1c38      	adds	r0, r7, #0
    67c2:	1c4b      	adds	r3, r1, #1
    67c4:	8023      	strh	r3, [r4, #0]
    67c6:	b209      	sxth	r1, r1
    67c8:	302c      	adds	r0, #44	; 0x2c
    67ca:	47a8      	blx	r5
    67cc:	8823      	ldrh	r3, [r4, #0]
    67ce:	2b00      	cmp	r3, #0
    67d0:	d101      	bne.n	67d6 <mqtt_publish+0x12e>
    67d2:	2301      	movs	r3, #1
    67d4:	8023      	strh	r3, [r4, #0]
    67d6:	68bb      	ldr	r3, [r7, #8]
    67d8:	2b00      	cmp	r3, #0
    67da:	d006      	beq.n	67ea <mqtt_publish+0x142>
    67dc:	68fa      	ldr	r2, [r7, #12]
    67de:	2a00      	cmp	r2, #0
    67e0:	d003      	beq.n	67ea <mqtt_publish+0x142>
    67e2:	1c38      	adds	r0, r7, #0
    67e4:	302c      	adds	r0, #44	; 0x2c
    67e6:	1c19      	adds	r1, r3, #0
    67e8:	47b0      	blx	r6
    67ea:	1c38      	adds	r0, r7, #0
    67ec:	4b17      	ldr	r3, [pc, #92]	; (684c <mqtt_publish+0x1a4>)
    67ee:	302c      	adds	r0, #44	; 0x2c
    67f0:	4798      	blx	r3
    67f2:	1c23      	adds	r3, r4, #0
    67f4:	3343      	adds	r3, #67	; 0x43
    67f6:	781a      	ldrb	r2, [r3, #0]
    67f8:	2108      	movs	r1, #8
    67fa:	438a      	bics	r2, r1
    67fc:	701a      	strb	r2, [r3, #0]
    67fe:	693b      	ldr	r3, [r7, #16]
    6800:	2500      	movs	r5, #0
    6802:	42ab      	cmp	r3, r5
    6804:	d10c      	bne.n	6820 <mqtt_publish+0x178>
    6806:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6808:	42ab      	cmp	r3, r5
    680a:	d009      	beq.n	6820 <mqtt_publish+0x178>
    680c:	1c3a      	adds	r2, r7, #0
    680e:	1c20      	adds	r0, r4, #0
    6810:	2102      	movs	r1, #2
    6812:	3218      	adds	r2, #24
    6814:	4798      	blx	r3
    6816:	e003      	b.n	6820 <mqtt_publish+0x178>
    6818:	2580      	movs	r5, #128	; 0x80
    681a:	e000      	b.n	681e <mqtt_publish+0x176>
    681c:	250b      	movs	r5, #11
    681e:	426d      	negs	r5, r5
    6820:	1c28      	adds	r0, r5, #0
    6822:	46bd      	mov	sp, r7
    6824:	b011      	add	sp, #68	; 0x44
    6826:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6828:	00008ccd 	.word	0x00008ccd
    682c:	00001249 	.word	0x00001249
    6830:	00005aed 	.word	0x00005aed
    6834:	00006171 	.word	0x00006171
    6838:	0000590d 	.word	0x0000590d
    683c:	00005939 	.word	0x00005939
    6840:	8000007f 	.word	0x8000007f
    6844:	00005961 	.word	0x00005961
    6848:	00005979 	.word	0x00005979
    684c:	0000591d 	.word	0x0000591d

00006850 <mqtt_subscribe>:
    6850:	b5f0      	push	{r4, r5, r6, r7, lr}
    6852:	b08d      	sub	sp, #52	; 0x34
    6854:	af02      	add	r7, sp, #8
    6856:	1c04      	adds	r4, r0, #0
    6858:	60b9      	str	r1, [r7, #8]
    685a:	607a      	str	r2, [r7, #4]
    685c:	d101      	bne.n	6862 <mqtt_subscribe+0x12>
    685e:	2016      	movs	r0, #22
    6860:	e086      	b.n	6970 <mqtt_subscribe+0x120>
    6862:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6864:	466a      	mov	r2, sp
    6866:	3307      	adds	r3, #7
    6868:	08db      	lsrs	r3, r3, #3
    686a:	00db      	lsls	r3, r3, #3
    686c:	1ad2      	subs	r2, r2, r3
    686e:	4695      	mov	sp, r2
    6870:	ad02      	add	r5, sp, #8
    6872:	603d      	str	r5, [r7, #0]
    6874:	68bd      	ldr	r5, [r7, #8]
    6876:	2d00      	cmp	r5, #0
    6878:	d0f1      	beq.n	685e <mqtt_subscribe+0xe>
    687a:	687d      	ldr	r5, [r7, #4]
    687c:	2d02      	cmp	r5, #2
    687e:	d8ee      	bhi.n	685e <mqtt_subscribe+0xe>
    6880:	1c05      	adds	r5, r0, #0
    6882:	3543      	adds	r5, #67	; 0x43
    6884:	782b      	ldrb	r3, [r5, #0]
    6886:	079a      	lsls	r2, r3, #30
    6888:	d56f      	bpl.n	696a <mqtt_subscribe+0x11a>
    688a:	071a      	lsls	r2, r3, #28
    688c:	d41a      	bmi.n	68c4 <mqtt_subscribe+0x74>
    688e:	68b8      	ldr	r0, [r7, #8]
    6890:	4d39      	ldr	r5, [pc, #228]	; (6978 <mqtt_subscribe+0x128>)
    6892:	47a8      	blx	r5
    6894:	1c25      	adds	r5, r4, #0
    6896:	3543      	adds	r5, #67	; 0x43
    6898:	782b      	ldrb	r3, [r5, #0]
    689a:	2208      	movs	r2, #8
    689c:	4313      	orrs	r3, r2
    689e:	702b      	strb	r3, [r5, #0]
    68a0:	60fd      	str	r5, [r7, #12]
    68a2:	1d46      	adds	r6, r0, #5
    68a4:	9400      	str	r4, [sp, #0]
    68a6:	1c38      	adds	r0, r7, #0
    68a8:	3014      	adds	r0, #20
    68aa:	6839      	ldr	r1, [r7, #0]
    68ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    68ae:	4b33      	ldr	r3, [pc, #204]	; (697c <mqtt_subscribe+0x12c>)
    68b0:	4d33      	ldr	r5, [pc, #204]	; (6980 <mqtt_subscribe+0x130>)
    68b2:	47a8      	blx	r5
    68b4:	1c38      	adds	r0, r7, #0
    68b6:	217e      	movs	r1, #126	; 0x7e
    68b8:	3014      	adds	r0, #20
    68ba:	4249      	negs	r1, r1
    68bc:	4b31      	ldr	r3, [pc, #196]	; (6984 <mqtt_subscribe+0x134>)
    68be:	4798      	blx	r3
    68c0:	4d2d      	ldr	r5, [pc, #180]	; (6978 <mqtt_subscribe+0x128>)
    68c2:	e00e      	b.n	68e2 <mqtt_subscribe+0x92>
    68c4:	1c03      	adds	r3, r0, #0
    68c6:	3370      	adds	r3, #112	; 0x70
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	2b00      	cmp	r3, #0
    68cc:	d14f      	bne.n	696e <mqtt_subscribe+0x11e>
    68ce:	782b      	ldrb	r3, [r5, #0]
    68d0:	071a      	lsls	r2, r3, #28
    68d2:	d5dc      	bpl.n	688e <mqtt_subscribe+0x3e>
    68d4:	4b2c      	ldr	r3, [pc, #176]	; (6988 <mqtt_subscribe+0x138>)
    68d6:	2000      	movs	r0, #0
    68d8:	4798      	blx	r3
    68da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    68dc:	4b2b      	ldr	r3, [pc, #172]	; (698c <mqtt_subscribe+0x13c>)
    68de:	4798      	blx	r3
    68e0:	e7f5      	b.n	68ce <mqtt_subscribe+0x7e>
    68e2:	4b28      	ldr	r3, [pc, #160]	; (6984 <mqtt_subscribe+0x134>)
    68e4:	2e80      	cmp	r6, #128	; 0x80
    68e6:	dd08      	ble.n	68fa <mqtt_subscribe+0xaa>
    68e8:	2180      	movs	r1, #128	; 0x80
    68ea:	4249      	negs	r1, r1
    68ec:	4331      	orrs	r1, r6
    68ee:	1c38      	adds	r0, r7, #0
    68f0:	b249      	sxtb	r1, r1
    68f2:	3014      	adds	r0, #20
    68f4:	4798      	blx	r3
    68f6:	11f6      	asrs	r6, r6, #7
    68f8:	e7f3      	b.n	68e2 <mqtt_subscribe+0x92>
    68fa:	4925      	ldr	r1, [pc, #148]	; (6990 <mqtt_subscribe+0x140>)
    68fc:	4031      	ands	r1, r6
    68fe:	d504      	bpl.n	690a <mqtt_subscribe+0xba>
    6900:	2280      	movs	r2, #128	; 0x80
    6902:	3901      	subs	r1, #1
    6904:	4252      	negs	r2, r2
    6906:	4311      	orrs	r1, r2
    6908:	3101      	adds	r1, #1
    690a:	1c38      	adds	r0, r7, #0
    690c:	b249      	sxtb	r1, r1
    690e:	3014      	adds	r0, #20
    6910:	4798      	blx	r3
    6912:	8821      	ldrh	r1, [r4, #0]
    6914:	1c38      	adds	r0, r7, #0
    6916:	1c4b      	adds	r3, r1, #1
    6918:	8023      	strh	r3, [r4, #0]
    691a:	b209      	sxth	r1, r1
    691c:	3014      	adds	r0, #20
    691e:	4e1d      	ldr	r6, [pc, #116]	; (6994 <mqtt_subscribe+0x144>)
    6920:	47b0      	blx	r6
    6922:	8823      	ldrh	r3, [r4, #0]
    6924:	2b00      	cmp	r3, #0
    6926:	d101      	bne.n	692c <mqtt_subscribe+0xdc>
    6928:	2301      	movs	r3, #1
    692a:	8023      	strh	r3, [r4, #0]
    692c:	68b8      	ldr	r0, [r7, #8]
    692e:	47a8      	blx	r5
    6930:	b201      	sxth	r1, r0
    6932:	1c38      	adds	r0, r7, #0
    6934:	3014      	adds	r0, #20
    6936:	47b0      	blx	r6
    6938:	68b8      	ldr	r0, [r7, #8]
    693a:	47a8      	blx	r5
    693c:	1c02      	adds	r2, r0, #0
    693e:	1c38      	adds	r0, r7, #0
    6940:	3014      	adds	r0, #20
    6942:	68b9      	ldr	r1, [r7, #8]
    6944:	4b14      	ldr	r3, [pc, #80]	; (6998 <mqtt_subscribe+0x148>)
    6946:	4798      	blx	r3
    6948:	687d      	ldr	r5, [r7, #4]
    694a:	1c38      	adds	r0, r7, #0
    694c:	b269      	sxtb	r1, r5
    694e:	3014      	adds	r0, #20
    6950:	4b0c      	ldr	r3, [pc, #48]	; (6984 <mqtt_subscribe+0x134>)
    6952:	4798      	blx	r3
    6954:	1c38      	adds	r0, r7, #0
    6956:	3014      	adds	r0, #20
    6958:	4b10      	ldr	r3, [pc, #64]	; (699c <mqtt_subscribe+0x14c>)
    695a:	4798      	blx	r3
    695c:	68fd      	ldr	r5, [r7, #12]
    695e:	2208      	movs	r2, #8
    6960:	782b      	ldrb	r3, [r5, #0]
    6962:	2000      	movs	r0, #0
    6964:	4393      	bics	r3, r2
    6966:	702b      	strb	r3, [r5, #0]
    6968:	e003      	b.n	6972 <mqtt_subscribe+0x122>
    696a:	2080      	movs	r0, #128	; 0x80
    696c:	e000      	b.n	6970 <mqtt_subscribe+0x120>
    696e:	200b      	movs	r0, #11
    6970:	4240      	negs	r0, r0
    6972:	46bd      	mov	sp, r7
    6974:	b00b      	add	sp, #44	; 0x2c
    6976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6978:	00008ccd 	.word	0x00008ccd
    697c:	00006171 	.word	0x00006171
    6980:	0000590d 	.word	0x0000590d
    6984:	00005939 	.word	0x00005939
    6988:	00001249 	.word	0x00001249
    698c:	00005aed 	.word	0x00005aed
    6990:	8000007f 	.word	0x8000007f
    6994:	00005961 	.word	0x00005961
    6998:	00005979 	.word	0x00005979
    699c:	0000591d 	.word	0x0000591d

000069a0 <_mqtt_ping>:
    69a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    69a2:	23c0      	movs	r3, #192	; 0xc0
    69a4:	a901      	add	r1, sp, #4
    69a6:	2500      	movs	r5, #0
    69a8:	700b      	strb	r3, [r1, #0]
    69aa:	704d      	strb	r5, [r1, #1]
    69ac:	42a8      	cmp	r0, r5
    69ae:	d019      	beq.n	69e4 <_mqtt_ping+0x44>
    69b0:	1c04      	adds	r4, r0, #0
    69b2:	3443      	adds	r4, #67	; 0x43
    69b4:	7823      	ldrb	r3, [r4, #0]
    69b6:	079a      	lsls	r2, r3, #30
    69b8:	d516      	bpl.n	69e8 <_mqtt_ping+0x48>
    69ba:	071a      	lsls	r2, r3, #28
    69bc:	d416      	bmi.n	69ec <_mqtt_ping+0x4c>
    69be:	2608      	movs	r6, #8
    69c0:	4333      	orrs	r3, r6
    69c2:	7023      	strb	r3, [r4, #0]
    69c4:	7880      	ldrb	r0, [r0, #2]
    69c6:	1c2b      	adds	r3, r5, #0
    69c8:	b240      	sxtb	r0, r0
    69ca:	2202      	movs	r2, #2
    69cc:	4f09      	ldr	r7, [pc, #36]	; (69f4 <_mqtt_ping+0x54>)
    69ce:	47b8      	blx	r7
    69d0:	1c2b      	adds	r3, r5, #0
    69d2:	42a8      	cmp	r0, r5
    69d4:	da0c      	bge.n	69f0 <_mqtt_ping+0x50>
    69d6:	7823      	ldrb	r3, [r4, #0]
    69d8:	43b3      	bics	r3, r6
    69da:	7023      	strb	r3, [r4, #0]
    69dc:	4b06      	ldr	r3, [pc, #24]	; (69f8 <_mqtt_ping+0x58>)
    69de:	4798      	blx	r3
    69e0:	1c03      	adds	r3, r0, #0
    69e2:	e005      	b.n	69f0 <_mqtt_ping+0x50>
    69e4:	2316      	movs	r3, #22
    69e6:	e002      	b.n	69ee <_mqtt_ping+0x4e>
    69e8:	2380      	movs	r3, #128	; 0x80
    69ea:	e000      	b.n	69ee <_mqtt_ping+0x4e>
    69ec:	230b      	movs	r3, #11
    69ee:	425b      	negs	r3, r3
    69f0:	1c18      	adds	r0, r3, #0
    69f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    69f4:	00002fad 	.word	0x00002fad
    69f8:	00006121 	.word	0x00006121

000069fc <mqtt_timer_callback>:
    69fc:	b570      	push	{r4, r5, r6, lr}
    69fe:	1c05      	adds	r5, r0, #0
    6a00:	b086      	sub	sp, #24
    6a02:	1c0e      	adds	r6, r1, #0
    6a04:	1c14      	adds	r4, r2, #0
    6a06:	2800      	cmp	r0, #0
    6a08:	d012      	beq.n	6a30 <mqtt_timer_callback+0x34>
    6a0a:	2a00      	cmp	r2, #0
    6a0c:	d010      	beq.n	6a30 <mqtt_timer_callback+0x34>
    6a0e:	1c10      	adds	r0, r2, #0
    6a10:	4b08      	ldr	r3, [pc, #32]	; (6a34 <mqtt_timer_callback+0x38>)
    6a12:	4798      	blx	r3
    6a14:	2800      	cmp	r0, #0
    6a16:	da04      	bge.n	6a22 <mqtt_timer_callback+0x26>
    6a18:	1c28      	adds	r0, r5, #0
    6a1a:	1c31      	adds	r1, r6, #0
    6a1c:	2200      	movs	r2, #0
    6a1e:	4b06      	ldr	r3, [pc, #24]	; (6a38 <mqtt_timer_callback+0x3c>)
    6a20:	e005      	b.n	6a2e <mqtt_timer_callback+0x32>
    6a22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6a24:	2b00      	cmp	r3, #0
    6a26:	d003      	beq.n	6a30 <mqtt_timer_callback+0x34>
    6a28:	1c20      	adds	r0, r4, #0
    6a2a:	2107      	movs	r1, #7
    6a2c:	aa01      	add	r2, sp, #4
    6a2e:	4798      	blx	r3
    6a30:	b006      	add	sp, #24
    6a32:	bd70      	pop	{r4, r5, r6, pc}
    6a34:	000069a1 	.word	0x000069a1
    6a38:	00005ab1 	.word	0x00005ab1

00006a3c <_mqtt_puback>:
    6a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6a3e:	2302      	movs	r3, #2
    6a40:	ac01      	add	r4, sp, #4
    6a42:	2700      	movs	r7, #0
    6a44:	7063      	strb	r3, [r4, #1]
    6a46:	42b8      	cmp	r0, r7
    6a48:	d01e      	beq.n	6a88 <_mqtt_puback+0x4c>
    6a4a:	1c05      	adds	r5, r0, #0
    6a4c:	3543      	adds	r5, #67	; 0x43
    6a4e:	782b      	ldrb	r3, [r5, #0]
    6a50:	079e      	lsls	r6, r3, #30
    6a52:	d51b      	bpl.n	6a8c <_mqtt_puback+0x50>
    6a54:	071e      	lsls	r6, r3, #28
    6a56:	d41b      	bmi.n	6a90 <_mqtt_puback+0x54>
    6a58:	2608      	movs	r6, #8
    6a5a:	4333      	orrs	r3, r6
    6a5c:	702b      	strb	r3, [r5, #0]
    6a5e:	7880      	ldrb	r0, [r0, #2]
    6a60:	7021      	strb	r1, [r4, #0]
    6a62:	0a11      	lsrs	r1, r2, #8
    6a64:	70a1      	strb	r1, [r4, #2]
    6a66:	70e2      	strb	r2, [r4, #3]
    6a68:	1c21      	adds	r1, r4, #0
    6a6a:	1c3b      	adds	r3, r7, #0
    6a6c:	b240      	sxtb	r0, r0
    6a6e:	2204      	movs	r2, #4
    6a70:	4c09      	ldr	r4, [pc, #36]	; (6a98 <_mqtt_puback+0x5c>)
    6a72:	47a0      	blx	r4
    6a74:	1c3b      	adds	r3, r7, #0
    6a76:	42b8      	cmp	r0, r7
    6a78:	da0c      	bge.n	6a94 <_mqtt_puback+0x58>
    6a7a:	782b      	ldrb	r3, [r5, #0]
    6a7c:	43b3      	bics	r3, r6
    6a7e:	702b      	strb	r3, [r5, #0]
    6a80:	4b06      	ldr	r3, [pc, #24]	; (6a9c <_mqtt_puback+0x60>)
    6a82:	4798      	blx	r3
    6a84:	1c03      	adds	r3, r0, #0
    6a86:	e005      	b.n	6a94 <_mqtt_puback+0x58>
    6a88:	2316      	movs	r3, #22
    6a8a:	e002      	b.n	6a92 <_mqtt_puback+0x56>
    6a8c:	2380      	movs	r3, #128	; 0x80
    6a8e:	e000      	b.n	6a92 <_mqtt_puback+0x56>
    6a90:	230b      	movs	r3, #11
    6a92:	425b      	negs	r3, r3
    6a94:	1c18      	adds	r0, r3, #0
    6a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6a98:	00002fad 	.word	0x00002fad
    6a9c:	00006121 	.word	0x00006121

00006aa0 <mqtt_clear_conn>:
    6aa0:	b530      	push	{r4, r5, lr}
    6aa2:	1c04      	adds	r4, r0, #0
    6aa4:	b087      	sub	sp, #28
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d01c      	beq.n	6ae4 <mqtt_clear_conn+0x44>
    6aaa:	2002      	movs	r0, #2
    6aac:	4b0e      	ldr	r3, [pc, #56]	; (6ae8 <mqtt_clear_conn+0x48>)
    6aae:	5620      	ldrsb	r0, [r4, r0]
    6ab0:	4798      	blx	r3
    6ab2:	1c23      	adds	r3, r4, #0
    6ab4:	3343      	adds	r3, #67	; 0x43
    6ab6:	781a      	ldrb	r2, [r3, #0]
    6ab8:	21fc      	movs	r1, #252	; 0xfc
    6aba:	0795      	lsls	r5, r2, #30
    6abc:	400a      	ands	r2, r1
    6abe:	701a      	strb	r2, [r3, #0]
    6ac0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6ac2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6ac4:	9301      	str	r3, [sp, #4]
    6ac6:	2300      	movs	r3, #0
    6ac8:	64e3      	str	r3, [r4, #76]	; 0x4c
    6aca:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6acc:	4b07      	ldr	r3, [pc, #28]	; (6aec <mqtt_clear_conn+0x4c>)
    6ace:	4798      	blx	r3
    6ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6ad2:	0fed      	lsrs	r5, r5, #31
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d005      	beq.n	6ae4 <mqtt_clear_conn+0x44>
    6ad8:	2d00      	cmp	r5, #0
    6ada:	d003      	beq.n	6ae4 <mqtt_clear_conn+0x44>
    6adc:	1c20      	adds	r0, r4, #0
    6ade:	2105      	movs	r1, #5
    6ae0:	aa01      	add	r2, sp, #4
    6ae2:	4798      	blx	r3
    6ae4:	b007      	add	sp, #28
    6ae6:	bd30      	pop	{r4, r5, pc}
    6ae8:	000030d9 	.word	0x000030d9
    6aec:	00005add 	.word	0x00005add

00006af0 <mqtt_disconnect>:
    6af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6af2:	23e0      	movs	r3, #224	; 0xe0
    6af4:	ae01      	add	r6, sp, #4
    6af6:	2700      	movs	r7, #0
    6af8:	1c05      	adds	r5, r0, #0
    6afa:	7033      	strb	r3, [r6, #0]
    6afc:	7077      	strb	r7, [r6, #1]
    6afe:	42b8      	cmp	r0, r7
    6b00:	d036      	beq.n	6b70 <mqtt_disconnect+0x80>
    6b02:	1c04      	adds	r4, r0, #0
    6b04:	3443      	adds	r4, #67	; 0x43
    6b06:	7823      	ldrb	r3, [r4, #0]
    6b08:	079a      	lsls	r2, r3, #30
    6b0a:	d533      	bpl.n	6b74 <mqtt_disconnect+0x84>
    6b0c:	42b9      	cmp	r1, r7
    6b0e:	d12b      	bne.n	6b68 <mqtt_disconnect+0x78>
    6b10:	071a      	lsls	r2, r3, #28
    6b12:	d414      	bmi.n	6b3e <mqtt_disconnect+0x4e>
    6b14:	7823      	ldrb	r3, [r4, #0]
    6b16:	2210      	movs	r2, #16
    6b18:	4313      	orrs	r3, r2
    6b1a:	2708      	movs	r7, #8
    6b1c:	433b      	orrs	r3, r7
    6b1e:	7023      	strb	r3, [r4, #0]
    6b20:	2002      	movs	r0, #2
    6b22:	5628      	ldrsb	r0, [r5, r0]
    6b24:	1c31      	adds	r1, r6, #0
    6b26:	2202      	movs	r2, #2
    6b28:	2300      	movs	r3, #0
    6b2a:	4d15      	ldr	r5, [pc, #84]	; (6b80 <mqtt_disconnect+0x90>)
    6b2c:	47a8      	blx	r5
    6b2e:	2800      	cmp	r0, #0
    6b30:	da14      	bge.n	6b5c <mqtt_disconnect+0x6c>
    6b32:	7823      	ldrb	r3, [r4, #0]
    6b34:	43bb      	bics	r3, r7
    6b36:	7023      	strb	r3, [r4, #0]
    6b38:	4b12      	ldr	r3, [pc, #72]	; (6b84 <mqtt_disconnect+0x94>)
    6b3a:	4798      	blx	r3
    6b3c:	e01e      	b.n	6b7c <mqtt_disconnect+0x8c>
    6b3e:	1c03      	adds	r3, r0, #0
    6b40:	3370      	adds	r3, #112	; 0x70
    6b42:	781b      	ldrb	r3, [r3, #0]
    6b44:	2b00      	cmp	r3, #0
    6b46:	d117      	bne.n	6b78 <mqtt_disconnect+0x88>
    6b48:	7823      	ldrb	r3, [r4, #0]
    6b4a:	071a      	lsls	r2, r3, #28
    6b4c:	d5e2      	bpl.n	6b14 <mqtt_disconnect+0x24>
    6b4e:	4b0e      	ldr	r3, [pc, #56]	; (6b88 <mqtt_disconnect+0x98>)
    6b50:	2000      	movs	r0, #0
    6b52:	4798      	blx	r3
    6b54:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    6b56:	4b0d      	ldr	r3, [pc, #52]	; (6b8c <mqtt_disconnect+0x9c>)
    6b58:	4798      	blx	r3
    6b5a:	e7f5      	b.n	6b48 <mqtt_disconnect+0x58>
    6b5c:	7823      	ldrb	r3, [r4, #0]
    6b5e:	2202      	movs	r2, #2
    6b60:	4393      	bics	r3, r2
    6b62:	7023      	strb	r3, [r4, #0]
    6b64:	2000      	movs	r0, #0
    6b66:	e009      	b.n	6b7c <mqtt_disconnect+0x8c>
    6b68:	4b09      	ldr	r3, [pc, #36]	; (6b90 <mqtt_disconnect+0xa0>)
    6b6a:	4798      	blx	r3
    6b6c:	1c38      	adds	r0, r7, #0
    6b6e:	e005      	b.n	6b7c <mqtt_disconnect+0x8c>
    6b70:	2016      	movs	r0, #22
    6b72:	e002      	b.n	6b7a <mqtt_disconnect+0x8a>
    6b74:	2080      	movs	r0, #128	; 0x80
    6b76:	e000      	b.n	6b7a <mqtt_disconnect+0x8a>
    6b78:	200b      	movs	r0, #11
    6b7a:	4240      	negs	r0, r0
    6b7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6b7e:	46c0      	nop			; (mov r8, r8)
    6b80:	00002fad 	.word	0x00002fad
    6b84:	00006121 	.word	0x00006121
    6b88:	00001249 	.word	0x00001249
    6b8c:	00005aed 	.word	0x00005aed
    6b90:	00006aa1 	.word	0x00006aa1

00006b94 <_mqtt_recv_handler>:
    6b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b96:	1c04      	adds	r4, r0, #0
    6b98:	6e40      	ldr	r0, [r0, #100]	; 0x64
    6b9a:	230f      	movs	r3, #15
    6b9c:	7802      	ldrb	r2, [r0, #0]
    6b9e:	b087      	sub	sp, #28
    6ba0:	1c15      	adds	r5, r2, #0
    6ba2:	439d      	bics	r5, r3
    6ba4:	2d50      	cmp	r5, #80	; 0x50
    6ba6:	d100      	bne.n	6baa <_mqtt_recv_handler+0x16>
    6ba8:	e098      	b.n	6cdc <_mqtt_recv_handler+0x148>
    6baa:	d808      	bhi.n	6bbe <_mqtt_recv_handler+0x2a>
    6bac:	2d30      	cmp	r5, #48	; 0x30
    6bae:	d03f      	beq.n	6c30 <_mqtt_recv_handler+0x9c>
    6bb0:	2d40      	cmp	r5, #64	; 0x40
    6bb2:	d100      	bne.n	6bb6 <_mqtt_recv_handler+0x22>
    6bb4:	e0b3      	b.n	6d1e <_mqtt_recv_handler+0x18a>
    6bb6:	2d20      	cmp	r5, #32
    6bb8:	d000      	beq.n	6bbc <_mqtt_recv_handler+0x28>
    6bba:	e0c3      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6bbc:	e00e      	b.n	6bdc <_mqtt_recv_handler+0x48>
    6bbe:	2d70      	cmp	r5, #112	; 0x70
    6bc0:	d100      	bne.n	6bc4 <_mqtt_recv_handler+0x30>
    6bc2:	e0ac      	b.n	6d1e <_mqtt_recv_handler+0x18a>
    6bc4:	d803      	bhi.n	6bce <_mqtt_recv_handler+0x3a>
    6bc6:	2d60      	cmp	r5, #96	; 0x60
    6bc8:	d100      	bne.n	6bcc <_mqtt_recv_handler+0x38>
    6bca:	e096      	b.n	6cfa <_mqtt_recv_handler+0x166>
    6bcc:	e0ba      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6bce:	2d90      	cmp	r5, #144	; 0x90
    6bd0:	d100      	bne.n	6bd4 <_mqtt_recv_handler+0x40>
    6bd2:	e0aa      	b.n	6d2a <_mqtt_recv_handler+0x196>
    6bd4:	2db0      	cmp	r5, #176	; 0xb0
    6bd6:	d100      	bne.n	6bda <_mqtt_recv_handler+0x46>
    6bd8:	e0ad      	b.n	6d36 <_mqtt_recv_handler+0x1a2>
    6bda:	e0b3      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6bdc:	aa01      	add	r2, sp, #4
    6bde:	2303      	movs	r3, #3
    6be0:	2901      	cmp	r1, #1
    6be2:	d900      	bls.n	6be6 <_mqtt_recv_handler+0x52>
    6be4:	78c3      	ldrb	r3, [r0, #3]
    6be6:	7013      	strb	r3, [r2, #0]
    6be8:	7813      	ldrb	r3, [r2, #0]
    6bea:	2b00      	cmp	r3, #0
    6bec:	d00d      	beq.n	6c0a <_mqtt_recv_handler+0x76>
    6bee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d002      	beq.n	6bfa <_mqtt_recv_handler+0x66>
    6bf4:	1c20      	adds	r0, r4, #0
    6bf6:	2101      	movs	r1, #1
    6bf8:	4798      	blx	r3
    6bfa:	236f      	movs	r3, #111	; 0x6f
    6bfc:	425b      	negs	r3, r3
    6bfe:	64e3      	str	r3, [r4, #76]	; 0x4c
    6c00:	1c20      	adds	r0, r4, #0
    6c02:	2100      	movs	r1, #0
    6c04:	4b50      	ldr	r3, [pc, #320]	; (6d48 <_mqtt_recv_handler+0x1b4>)
    6c06:	4798      	blx	r3
    6c08:	e09c      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6c0a:	1c23      	adds	r3, r4, #0
    6c0c:	3343      	adds	r3, #67	; 0x43
    6c0e:	7819      	ldrb	r1, [r3, #0]
    6c10:	0789      	lsls	r1, r1, #30
    6c12:	0fc9      	lsrs	r1, r1, #31
    6c14:	d105      	bne.n	6c22 <_mqtt_recv_handler+0x8e>
    6c16:	781a      	ldrb	r2, [r3, #0]
    6c18:	64e1      	str	r1, [r4, #76]	; 0x4c
    6c1a:	2102      	movs	r1, #2
    6c1c:	430a      	orrs	r2, r1
    6c1e:	701a      	strb	r2, [r3, #0]
    6c20:	e090      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6c22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6c24:	2b00      	cmp	r3, #0
    6c26:	d100      	bne.n	6c2a <_mqtt_recv_handler+0x96>
    6c28:	e08c      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6c2a:	1c20      	adds	r0, r4, #0
    6c2c:	2101      	movs	r1, #1
    6c2e:	e088      	b.n	6d42 <_mqtt_recv_handler+0x1ae>
    6c30:	ad01      	add	r5, sp, #4
    6c32:	0713      	lsls	r3, r2, #28
    6c34:	7c2a      	ldrb	r2, [r5, #16]
    6c36:	0fdb      	lsrs	r3, r3, #31
    6c38:	2604      	movs	r6, #4
    6c3a:	009b      	lsls	r3, r3, #2
    6c3c:	43b2      	bics	r2, r6
    6c3e:	431a      	orrs	r2, r3
    6c40:	742a      	strb	r2, [r5, #16]
    6c42:	7807      	ldrb	r7, [r0, #0]
    6c44:	2303      	movs	r3, #3
    6c46:	b2d2      	uxtb	r2, r2
    6c48:	087f      	lsrs	r7, r7, #1
    6c4a:	439a      	bics	r2, r3
    6c4c:	401f      	ands	r7, r3
    6c4e:	1c13      	adds	r3, r2, #0
    6c50:	433b      	orrs	r3, r7
    6c52:	742b      	strb	r3, [r5, #16]
    6c54:	1c43      	adds	r3, r0, #1
    6c56:	7818      	ldrb	r0, [r3, #0]
    6c58:	1c5a      	adds	r2, r3, #1
    6c5a:	287f      	cmp	r0, #127	; 0x7f
    6c5c:	d901      	bls.n	6c62 <_mqtt_recv_handler+0xce>
    6c5e:	1c13      	adds	r3, r2, #0
    6c60:	e7f9      	b.n	6c56 <_mqtt_recv_handler+0xc2>
    6c62:	7858      	ldrb	r0, [r3, #1]
    6c64:	789e      	ldrb	r6, [r3, #2]
    6c66:	0200      	lsls	r0, r0, #8
    6c68:	4330      	orrs	r0, r6
    6c6a:	3303      	adds	r3, #3
    6c6c:	2600      	movs	r6, #0
    6c6e:	6068      	str	r0, [r5, #4]
    6c70:	9301      	str	r3, [sp, #4]
    6c72:	1818      	adds	r0, r3, r0
    6c74:	42b7      	cmp	r7, r6
    6c76:	d004      	beq.n	6c82 <_mqtt_recv_handler+0xee>
    6c78:	7806      	ldrb	r6, [r0, #0]
    6c7a:	7843      	ldrb	r3, [r0, #1]
    6c7c:	0236      	lsls	r6, r6, #8
    6c7e:	431e      	orrs	r6, r3
    6c80:	3002      	adds	r0, #2
    6c82:	1851      	adds	r1, r2, r1
    6c84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6c86:	60a8      	str	r0, [r5, #8]
    6c88:	1a08      	subs	r0, r1, r0
    6c8a:	60e8      	str	r0, [r5, #12]
    6c8c:	2b00      	cmp	r3, #0
    6c8e:	d003      	beq.n	6c98 <_mqtt_recv_handler+0x104>
    6c90:	1c20      	adds	r0, r4, #0
    6c92:	2106      	movs	r1, #6
    6c94:	1c2a      	adds	r2, r5, #0
    6c96:	4798      	blx	r3
    6c98:	7c2b      	ldrb	r3, [r5, #16]
    6c9a:	079b      	lsls	r3, r3, #30
    6c9c:	0f9b      	lsrs	r3, r3, #30
    6c9e:	2b01      	cmp	r3, #1
    6ca0:	d10b      	bne.n	6cba <_mqtt_recv_handler+0x126>
    6ca2:	b2b6      	uxth	r6, r6
    6ca4:	1c20      	adds	r0, r4, #0
    6ca6:	2140      	movs	r1, #64	; 0x40
    6ca8:	1c32      	adds	r2, r6, #0
    6caa:	4b28      	ldr	r3, [pc, #160]	; (6d4c <_mqtt_recv_handler+0x1b8>)
    6cac:	4798      	blx	r3
    6cae:	2800      	cmp	r0, #0
    6cb0:	d048      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6cb2:	1c23      	adds	r3, r4, #0
    6cb4:	3348      	adds	r3, #72	; 0x48
    6cb6:	2240      	movs	r2, #64	; 0x40
    6cb8:	e00c      	b.n	6cd4 <_mqtt_recv_handler+0x140>
    6cba:	2b02      	cmp	r3, #2
    6cbc:	d142      	bne.n	6d44 <_mqtt_recv_handler+0x1b0>
    6cbe:	b2b6      	uxth	r6, r6
    6cc0:	1c20      	adds	r0, r4, #0
    6cc2:	2150      	movs	r1, #80	; 0x50
    6cc4:	1c32      	adds	r2, r6, #0
    6cc6:	4b21      	ldr	r3, [pc, #132]	; (6d4c <_mqtt_recv_handler+0x1b8>)
    6cc8:	4798      	blx	r3
    6cca:	2800      	cmp	r0, #0
    6ccc:	d03a      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6cce:	1c23      	adds	r3, r4, #0
    6cd0:	3348      	adds	r3, #72	; 0x48
    6cd2:	2250      	movs	r2, #80	; 0x50
    6cd4:	344a      	adds	r4, #74	; 0x4a
    6cd6:	701a      	strb	r2, [r3, #0]
    6cd8:	8026      	strh	r6, [r4, #0]
    6cda:	e033      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6cdc:	7885      	ldrb	r5, [r0, #2]
    6cde:	78c3      	ldrb	r3, [r0, #3]
    6ce0:	022d      	lsls	r5, r5, #8
    6ce2:	431d      	orrs	r5, r3
    6ce4:	1c20      	adds	r0, r4, #0
    6ce6:	2162      	movs	r1, #98	; 0x62
    6ce8:	1c2a      	adds	r2, r5, #0
    6cea:	4b18      	ldr	r3, [pc, #96]	; (6d4c <_mqtt_recv_handler+0x1b8>)
    6cec:	4798      	blx	r3
    6cee:	2800      	cmp	r0, #0
    6cf0:	d028      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6cf2:	1c23      	adds	r3, r4, #0
    6cf4:	3348      	adds	r3, #72	; 0x48
    6cf6:	2260      	movs	r2, #96	; 0x60
    6cf8:	e00d      	b.n	6d16 <_mqtt_recv_handler+0x182>
    6cfa:	7885      	ldrb	r5, [r0, #2]
    6cfc:	78c3      	ldrb	r3, [r0, #3]
    6cfe:	022d      	lsls	r5, r5, #8
    6d00:	431d      	orrs	r5, r3
    6d02:	1c20      	adds	r0, r4, #0
    6d04:	2170      	movs	r1, #112	; 0x70
    6d06:	1c2a      	adds	r2, r5, #0
    6d08:	4b10      	ldr	r3, [pc, #64]	; (6d4c <_mqtt_recv_handler+0x1b8>)
    6d0a:	4798      	blx	r3
    6d0c:	2800      	cmp	r0, #0
    6d0e:	d019      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6d10:	1c23      	adds	r3, r4, #0
    6d12:	3348      	adds	r3, #72	; 0x48
    6d14:	2270      	movs	r2, #112	; 0x70
    6d16:	344a      	adds	r4, #74	; 0x4a
    6d18:	701a      	strb	r2, [r3, #0]
    6d1a:	8025      	strh	r5, [r4, #0]
    6d1c:	e012      	b.n	6d44 <_mqtt_recv_handler+0x1b0>
    6d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6d20:	2b00      	cmp	r3, #0
    6d22:	d00f      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6d24:	1c20      	adds	r0, r4, #0
    6d26:	2102      	movs	r1, #2
    6d28:	e00a      	b.n	6d40 <_mqtt_recv_handler+0x1ac>
    6d2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d009      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6d30:	1c20      	adds	r0, r4, #0
    6d32:	2103      	movs	r1, #3
    6d34:	e004      	b.n	6d40 <_mqtt_recv_handler+0x1ac>
    6d36:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6d38:	2b00      	cmp	r3, #0
    6d3a:	d003      	beq.n	6d44 <_mqtt_recv_handler+0x1b0>
    6d3c:	1c20      	adds	r0, r4, #0
    6d3e:	2104      	movs	r1, #4
    6d40:	aa01      	add	r2, sp, #4
    6d42:	4798      	blx	r3
    6d44:	b007      	add	sp, #28
    6d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d48:	00006af1 	.word	0x00006af1
    6d4c:	00006a3d 	.word	0x00006a3d

00006d50 <mqtt_recv_packet>:
    6d50:	b538      	push	{r3, r4, r5, lr}
    6d52:	1e04      	subs	r4, r0, #0
    6d54:	d017      	beq.n	6d86 <mqtt_recv_packet+0x36>
    6d56:	6c42      	ldr	r2, [r0, #68]	; 0x44
    6d58:	6e83      	ldr	r3, [r0, #104]	; 0x68
    6d5a:	429a      	cmp	r2, r3
    6d5c:	d906      	bls.n	6d6c <mqtt_recv_packet+0x1c>
    6d5e:	238b      	movs	r3, #139	; 0x8b
    6d60:	425b      	negs	r3, r3
    6d62:	64c3      	str	r3, [r0, #76]	; 0x4c
    6d64:	2100      	movs	r1, #0
    6d66:	4b08      	ldr	r3, [pc, #32]	; (6d88 <mqtt_recv_packet+0x38>)
    6d68:	4798      	blx	r3
    6d6a:	e00c      	b.n	6d86 <mqtt_recv_packet+0x36>
    6d6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6d70:	2002      	movs	r0, #2
    6d72:	1899      	adds	r1, r3, r2
    6d74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6d76:	5620      	ldrsb	r0, [r4, r0]
    6d78:	1a9a      	subs	r2, r3, r2
    6d7a:	b292      	uxth	r2, r2
    6d7c:	2300      	movs	r3, #0
    6d7e:	4d03      	ldr	r5, [pc, #12]	; (6d8c <mqtt_recv_packet+0x3c>)
    6d80:	47a8      	blx	r5
    6d82:	2800      	cmp	r0, #0
    6d84:	d1f2      	bne.n	6d6c <mqtt_recv_packet+0x1c>
    6d86:	bd38      	pop	{r3, r4, r5, pc}
    6d88:	00006af1 	.word	0x00006af1
    6d8c:	00003045 	.word	0x00003045

00006d90 <mqtt_recved_packet>:
    6d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6d92:	1e04      	subs	r4, r0, #0
    6d94:	d042      	beq.n	6e1c <mqtt_recved_packet+0x8c>
    6d96:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6d98:	6e67      	ldr	r7, [r4, #100]	; 0x64
    6d9a:	18ca      	adds	r2, r1, r3
    6d9c:	2301      	movs	r3, #1
    6d9e:	9701      	str	r7, [sp, #4]
    6da0:	6462      	str	r2, [r4, #68]	; 0x44
    6da2:	2600      	movs	r6, #0
    6da4:	1c1d      	adds	r5, r3, #0
    6da6:	42a9      	cmp	r1, r5
    6da8:	dc03      	bgt.n	6db2 <mqtt_recved_packet+0x22>
    6daa:	1c20      	adds	r0, r4, #0
    6dac:	4b1c      	ldr	r3, [pc, #112]	; (6e20 <mqtt_recved_packet+0x90>)
    6dae:	4798      	blx	r3
    6db0:	e034      	b.n	6e1c <mqtt_recved_packet+0x8c>
    6db2:	9f01      	ldr	r7, [sp, #4]
    6db4:	5d78      	ldrb	r0, [r7, r5]
    6db6:	01df      	lsls	r7, r3, #7
    6db8:	46bc      	mov	ip, r7
    6dba:	2d03      	cmp	r5, #3
    6dbc:	d101      	bne.n	6dc2 <mqtt_recved_packet+0x32>
    6dbe:	234d      	movs	r3, #77	; 0x4d
    6dc0:	e00e      	b.n	6de0 <mqtt_recved_packet+0x50>
    6dc2:	277f      	movs	r7, #127	; 0x7f
    6dc4:	4007      	ands	r7, r0
    6dc6:	437b      	muls	r3, r7
    6dc8:	b240      	sxtb	r0, r0
    6dca:	3501      	adds	r5, #1
    6dcc:	18f6      	adds	r6, r6, r3
    6dce:	2800      	cmp	r0, #0
    6dd0:	da01      	bge.n	6dd6 <mqtt_recved_packet+0x46>
    6dd2:	4663      	mov	r3, ip
    6dd4:	e7e7      	b.n	6da6 <mqtt_recved_packet+0x16>
    6dd6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6dd8:	19af      	adds	r7, r5, r6
    6dda:	429f      	cmp	r7, r3
    6ddc:	d907      	bls.n	6dee <mqtt_recved_packet+0x5e>
    6dde:	238b      	movs	r3, #139	; 0x8b
    6de0:	425b      	negs	r3, r3
    6de2:	64e3      	str	r3, [r4, #76]	; 0x4c
    6de4:	1c20      	adds	r0, r4, #0
    6de6:	2100      	movs	r1, #0
    6de8:	4b0e      	ldr	r3, [pc, #56]	; (6e24 <mqtt_recved_packet+0x94>)
    6dea:	4798      	blx	r3
    6dec:	e016      	b.n	6e1c <mqtt_recved_packet+0x8c>
    6dee:	42ba      	cmp	r2, r7
    6df0:	d314      	bcc.n	6e1c <mqtt_recved_packet+0x8c>
    6df2:	4b0d      	ldr	r3, [pc, #52]	; (6e28 <mqtt_recved_packet+0x98>)
    6df4:	1c20      	adds	r0, r4, #0
    6df6:	1c31      	adds	r1, r6, #0
    6df8:	4798      	blx	r3
    6dfa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6dfc:	42bb      	cmp	r3, r7
    6dfe:	d102      	bne.n	6e06 <mqtt_recved_packet+0x76>
    6e00:	2300      	movs	r3, #0
    6e02:	6463      	str	r3, [r4, #68]	; 0x44
    6e04:	e00a      	b.n	6e1c <mqtt_recved_packet+0x8c>
    6e06:	1b9e      	subs	r6, r3, r6
    6e08:	9b01      	ldr	r3, [sp, #4]
    6e0a:	1b75      	subs	r5, r6, r5
    6e0c:	19d9      	adds	r1, r3, r7
    6e0e:	1c18      	adds	r0, r3, #0
    6e10:	1c2a      	adds	r2, r5, #0
    6e12:	4b06      	ldr	r3, [pc, #24]	; (6e2c <mqtt_recved_packet+0x9c>)
    6e14:	4798      	blx	r3
    6e16:	6465      	str	r5, [r4, #68]	; 0x44
    6e18:	2100      	movs	r1, #0
    6e1a:	e7bc      	b.n	6d96 <mqtt_recved_packet+0x6>
    6e1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    6e1e:	46c0      	nop			; (mov r8, r8)
    6e20:	00006d51 	.word	0x00006d51
    6e24:	00006af1 	.word	0x00006af1
    6e28:	00006b95 	.word	0x00006b95
    6e2c:	0000881f 	.word	0x0000881f

00006e30 <mqtt_socket_event_handler>:
    6e30:	b570      	push	{r4, r5, r6, lr}
    6e32:	4d37      	ldr	r5, [pc, #220]	; (6f10 <mqtt_socket_event_handler+0xe0>)
    6e34:	0086      	lsls	r6, r0, #2
    6e36:	5974      	ldr	r4, [r6, r5]
    6e38:	b086      	sub	sp, #24
    6e3a:	2c00      	cmp	r4, #0
    6e3c:	d066      	beq.n	6f0c <mqtt_socket_event_handler+0xdc>
    6e3e:	2906      	cmp	r1, #6
    6e40:	d02b      	beq.n	6e9a <mqtt_socket_event_handler+0x6a>
    6e42:	2907      	cmp	r1, #7
    6e44:	d039      	beq.n	6eba <mqtt_socket_event_handler+0x8a>
    6e46:	2905      	cmp	r1, #5
    6e48:	d160      	bne.n	6f0c <mqtt_socket_event_handler+0xdc>
    6e4a:	2001      	movs	r0, #1
    6e4c:	5610      	ldrsb	r0, [r2, r0]
    6e4e:	4b31      	ldr	r3, [pc, #196]	; (6f14 <mqtt_socket_event_handler+0xe4>)
    6e50:	4798      	blx	r3
    6e52:	9001      	str	r0, [sp, #4]
    6e54:	2800      	cmp	r0, #0
    6e56:	da06      	bge.n	6e66 <mqtt_socket_event_handler+0x36>
    6e58:	2002      	movs	r0, #2
    6e5a:	4b2f      	ldr	r3, [pc, #188]	; (6f18 <mqtt_socket_event_handler+0xe8>)
    6e5c:	5620      	ldrsb	r0, [r4, r0]
    6e5e:	4798      	blx	r3
    6e60:	2300      	movs	r3, #0
    6e62:	5173      	str	r3, [r6, r5]
    6e64:	e011      	b.n	6e8a <mqtt_socket_event_handler+0x5a>
    6e66:	1c23      	adds	r3, r4, #0
    6e68:	3343      	adds	r3, #67	; 0x43
    6e6a:	781a      	ldrb	r2, [r3, #0]
    6e6c:	2101      	movs	r1, #1
    6e6e:	430a      	orrs	r2, r1
    6e70:	701a      	strb	r2, [r3, #0]
    6e72:	331d      	adds	r3, #29
    6e74:	881b      	ldrh	r3, [r3, #0]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d004      	beq.n	6e84 <mqtt_socket_event_handler+0x54>
    6e7a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    6e7c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    6e7e:	2200      	movs	r2, #0
    6e80:	4b26      	ldr	r3, [pc, #152]	; (6f1c <mqtt_socket_event_handler+0xec>)
    6e82:	4798      	blx	r3
    6e84:	1c20      	adds	r0, r4, #0
    6e86:	4b26      	ldr	r3, [pc, #152]	; (6f20 <mqtt_socket_event_handler+0xf0>)
    6e88:	4798      	blx	r3
    6e8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d03d      	beq.n	6f0c <mqtt_socket_event_handler+0xdc>
    6e90:	1c20      	adds	r0, r4, #0
    6e92:	2100      	movs	r1, #0
    6e94:	aa01      	add	r2, sp, #4
    6e96:	4798      	blx	r3
    6e98:	e038      	b.n	6f0c <mqtt_socket_event_handler+0xdc>
    6e9a:	2304      	movs	r3, #4
    6e9c:	5ed1      	ldrsh	r1, [r2, r3]
    6e9e:	2900      	cmp	r1, #0
    6ea0:	dd03      	ble.n	6eaa <mqtt_socket_event_handler+0x7a>
    6ea2:	1c20      	adds	r0, r4, #0
    6ea4:	4b1f      	ldr	r3, [pc, #124]	; (6f24 <mqtt_socket_event_handler+0xf4>)
    6ea6:	4798      	blx	r3
    6ea8:	e003      	b.n	6eb2 <mqtt_socket_event_handler+0x82>
    6eaa:	1c0b      	adds	r3, r1, #0
    6eac:	1c08      	adds	r0, r1, #0
    6eae:	330d      	adds	r3, #13
    6eb0:	d11a      	bne.n	6ee8 <mqtt_socket_event_handler+0xb8>
    6eb2:	4b1b      	ldr	r3, [pc, #108]	; (6f20 <mqtt_socket_event_handler+0xf0>)
    6eb4:	1c20      	adds	r0, r4, #0
    6eb6:	4798      	blx	r3
    6eb8:	e028      	b.n	6f0c <mqtt_socket_event_handler+0xdc>
    6eba:	1c23      	adds	r3, r4, #0
    6ebc:	3343      	adds	r3, #67	; 0x43
    6ebe:	8810      	ldrh	r0, [r2, #0]
    6ec0:	781a      	ldrb	r2, [r3, #0]
    6ec2:	0751      	lsls	r1, r2, #29
    6ec4:	d402      	bmi.n	6ecc <mqtt_socket_event_handler+0x9c>
    6ec6:	2108      	movs	r1, #8
    6ec8:	438a      	bics	r2, r1
    6eca:	701a      	strb	r2, [r3, #0]
    6ecc:	781a      	ldrb	r2, [r3, #0]
    6ece:	2104      	movs	r1, #4
    6ed0:	438a      	bics	r2, r1
    6ed2:	701a      	strb	r2, [r3, #0]
    6ed4:	06d3      	lsls	r3, r2, #27
    6ed6:	0fde      	lsrs	r6, r3, #31
    6ed8:	b200      	sxth	r0, r0
    6eda:	2b00      	cmp	r3, #0
    6edc:	db02      	blt.n	6ee4 <mqtt_socket_event_handler+0xb4>
    6ede:	2800      	cmp	r0, #0
    6ee0:	da08      	bge.n	6ef4 <mqtt_socket_event_handler+0xc4>
    6ee2:	e001      	b.n	6ee8 <mqtt_socket_event_handler+0xb8>
    6ee4:	2800      	cmp	r0, #0
    6ee6:	da02      	bge.n	6eee <mqtt_socket_event_handler+0xbe>
    6ee8:	4b0a      	ldr	r3, [pc, #40]	; (6f14 <mqtt_socket_event_handler+0xe4>)
    6eea:	4798      	blx	r3
    6eec:	64e0      	str	r0, [r4, #76]	; 0x4c
    6eee:	1c20      	adds	r0, r4, #0
    6ef0:	4b0d      	ldr	r3, [pc, #52]	; (6f28 <mqtt_socket_event_handler+0xf8>)
    6ef2:	e7e0      	b.n	6eb6 <mqtt_socket_event_handler+0x86>
    6ef4:	1c25      	adds	r5, r4, #0
    6ef6:	3548      	adds	r5, #72	; 0x48
    6ef8:	7829      	ldrb	r1, [r5, #0]
    6efa:	2900      	cmp	r1, #0
    6efc:	d006      	beq.n	6f0c <mqtt_socket_event_handler+0xdc>
    6efe:	1c23      	adds	r3, r4, #0
    6f00:	334a      	adds	r3, #74	; 0x4a
    6f02:	881a      	ldrh	r2, [r3, #0]
    6f04:	1c20      	adds	r0, r4, #0
    6f06:	4b09      	ldr	r3, [pc, #36]	; (6f2c <mqtt_socket_event_handler+0xfc>)
    6f08:	4798      	blx	r3
    6f0a:	702e      	strb	r6, [r5, #0]
    6f0c:	b006      	add	sp, #24
    6f0e:	bd70      	pop	{r4, r5, r6, pc}
    6f10:	20000268 	.word	0x20000268
    6f14:	00006121 	.word	0x00006121
    6f18:	000030d9 	.word	0x000030d9
    6f1c:	00005ab1 	.word	0x00005ab1
    6f20:	00006d51 	.word	0x00006d51
    6f24:	00006d91 	.word	0x00006d91
    6f28:	00006aa1 	.word	0x00006aa1
    6f2c:	00006a3d 	.word	0x00006a3d

00006f30 <__gnu_thumb1_case_uqi>:
    6f30:	b402      	push	{r1}
    6f32:	4671      	mov	r1, lr
    6f34:	0849      	lsrs	r1, r1, #1
    6f36:	0049      	lsls	r1, r1, #1
    6f38:	5c09      	ldrb	r1, [r1, r0]
    6f3a:	0049      	lsls	r1, r1, #1
    6f3c:	448e      	add	lr, r1
    6f3e:	bc02      	pop	{r1}
    6f40:	4770      	bx	lr
    6f42:	46c0      	nop			; (mov r8, r8)

00006f44 <__udivsi3>:
    6f44:	2200      	movs	r2, #0
    6f46:	0843      	lsrs	r3, r0, #1
    6f48:	428b      	cmp	r3, r1
    6f4a:	d374      	bcc.n	7036 <__udivsi3+0xf2>
    6f4c:	0903      	lsrs	r3, r0, #4
    6f4e:	428b      	cmp	r3, r1
    6f50:	d35f      	bcc.n	7012 <__udivsi3+0xce>
    6f52:	0a03      	lsrs	r3, r0, #8
    6f54:	428b      	cmp	r3, r1
    6f56:	d344      	bcc.n	6fe2 <__udivsi3+0x9e>
    6f58:	0b03      	lsrs	r3, r0, #12
    6f5a:	428b      	cmp	r3, r1
    6f5c:	d328      	bcc.n	6fb0 <__udivsi3+0x6c>
    6f5e:	0c03      	lsrs	r3, r0, #16
    6f60:	428b      	cmp	r3, r1
    6f62:	d30d      	bcc.n	6f80 <__udivsi3+0x3c>
    6f64:	22ff      	movs	r2, #255	; 0xff
    6f66:	0209      	lsls	r1, r1, #8
    6f68:	ba12      	rev	r2, r2
    6f6a:	0c03      	lsrs	r3, r0, #16
    6f6c:	428b      	cmp	r3, r1
    6f6e:	d302      	bcc.n	6f76 <__udivsi3+0x32>
    6f70:	1212      	asrs	r2, r2, #8
    6f72:	0209      	lsls	r1, r1, #8
    6f74:	d065      	beq.n	7042 <__udivsi3+0xfe>
    6f76:	0b03      	lsrs	r3, r0, #12
    6f78:	428b      	cmp	r3, r1
    6f7a:	d319      	bcc.n	6fb0 <__udivsi3+0x6c>
    6f7c:	e000      	b.n	6f80 <__udivsi3+0x3c>
    6f7e:	0a09      	lsrs	r1, r1, #8
    6f80:	0bc3      	lsrs	r3, r0, #15
    6f82:	428b      	cmp	r3, r1
    6f84:	d301      	bcc.n	6f8a <__udivsi3+0x46>
    6f86:	03cb      	lsls	r3, r1, #15
    6f88:	1ac0      	subs	r0, r0, r3
    6f8a:	4152      	adcs	r2, r2
    6f8c:	0b83      	lsrs	r3, r0, #14
    6f8e:	428b      	cmp	r3, r1
    6f90:	d301      	bcc.n	6f96 <__udivsi3+0x52>
    6f92:	038b      	lsls	r3, r1, #14
    6f94:	1ac0      	subs	r0, r0, r3
    6f96:	4152      	adcs	r2, r2
    6f98:	0b43      	lsrs	r3, r0, #13
    6f9a:	428b      	cmp	r3, r1
    6f9c:	d301      	bcc.n	6fa2 <__udivsi3+0x5e>
    6f9e:	034b      	lsls	r3, r1, #13
    6fa0:	1ac0      	subs	r0, r0, r3
    6fa2:	4152      	adcs	r2, r2
    6fa4:	0b03      	lsrs	r3, r0, #12
    6fa6:	428b      	cmp	r3, r1
    6fa8:	d301      	bcc.n	6fae <__udivsi3+0x6a>
    6faa:	030b      	lsls	r3, r1, #12
    6fac:	1ac0      	subs	r0, r0, r3
    6fae:	4152      	adcs	r2, r2
    6fb0:	0ac3      	lsrs	r3, r0, #11
    6fb2:	428b      	cmp	r3, r1
    6fb4:	d301      	bcc.n	6fba <__udivsi3+0x76>
    6fb6:	02cb      	lsls	r3, r1, #11
    6fb8:	1ac0      	subs	r0, r0, r3
    6fba:	4152      	adcs	r2, r2
    6fbc:	0a83      	lsrs	r3, r0, #10
    6fbe:	428b      	cmp	r3, r1
    6fc0:	d301      	bcc.n	6fc6 <__udivsi3+0x82>
    6fc2:	028b      	lsls	r3, r1, #10
    6fc4:	1ac0      	subs	r0, r0, r3
    6fc6:	4152      	adcs	r2, r2
    6fc8:	0a43      	lsrs	r3, r0, #9
    6fca:	428b      	cmp	r3, r1
    6fcc:	d301      	bcc.n	6fd2 <__udivsi3+0x8e>
    6fce:	024b      	lsls	r3, r1, #9
    6fd0:	1ac0      	subs	r0, r0, r3
    6fd2:	4152      	adcs	r2, r2
    6fd4:	0a03      	lsrs	r3, r0, #8
    6fd6:	428b      	cmp	r3, r1
    6fd8:	d301      	bcc.n	6fde <__udivsi3+0x9a>
    6fda:	020b      	lsls	r3, r1, #8
    6fdc:	1ac0      	subs	r0, r0, r3
    6fde:	4152      	adcs	r2, r2
    6fe0:	d2cd      	bcs.n	6f7e <__udivsi3+0x3a>
    6fe2:	09c3      	lsrs	r3, r0, #7
    6fe4:	428b      	cmp	r3, r1
    6fe6:	d301      	bcc.n	6fec <__udivsi3+0xa8>
    6fe8:	01cb      	lsls	r3, r1, #7
    6fea:	1ac0      	subs	r0, r0, r3
    6fec:	4152      	adcs	r2, r2
    6fee:	0983      	lsrs	r3, r0, #6
    6ff0:	428b      	cmp	r3, r1
    6ff2:	d301      	bcc.n	6ff8 <__udivsi3+0xb4>
    6ff4:	018b      	lsls	r3, r1, #6
    6ff6:	1ac0      	subs	r0, r0, r3
    6ff8:	4152      	adcs	r2, r2
    6ffa:	0943      	lsrs	r3, r0, #5
    6ffc:	428b      	cmp	r3, r1
    6ffe:	d301      	bcc.n	7004 <__udivsi3+0xc0>
    7000:	014b      	lsls	r3, r1, #5
    7002:	1ac0      	subs	r0, r0, r3
    7004:	4152      	adcs	r2, r2
    7006:	0903      	lsrs	r3, r0, #4
    7008:	428b      	cmp	r3, r1
    700a:	d301      	bcc.n	7010 <__udivsi3+0xcc>
    700c:	010b      	lsls	r3, r1, #4
    700e:	1ac0      	subs	r0, r0, r3
    7010:	4152      	adcs	r2, r2
    7012:	08c3      	lsrs	r3, r0, #3
    7014:	428b      	cmp	r3, r1
    7016:	d301      	bcc.n	701c <__udivsi3+0xd8>
    7018:	00cb      	lsls	r3, r1, #3
    701a:	1ac0      	subs	r0, r0, r3
    701c:	4152      	adcs	r2, r2
    701e:	0883      	lsrs	r3, r0, #2
    7020:	428b      	cmp	r3, r1
    7022:	d301      	bcc.n	7028 <__udivsi3+0xe4>
    7024:	008b      	lsls	r3, r1, #2
    7026:	1ac0      	subs	r0, r0, r3
    7028:	4152      	adcs	r2, r2
    702a:	0843      	lsrs	r3, r0, #1
    702c:	428b      	cmp	r3, r1
    702e:	d301      	bcc.n	7034 <__udivsi3+0xf0>
    7030:	004b      	lsls	r3, r1, #1
    7032:	1ac0      	subs	r0, r0, r3
    7034:	4152      	adcs	r2, r2
    7036:	1a41      	subs	r1, r0, r1
    7038:	d200      	bcs.n	703c <__udivsi3+0xf8>
    703a:	4601      	mov	r1, r0
    703c:	4152      	adcs	r2, r2
    703e:	4610      	mov	r0, r2
    7040:	4770      	bx	lr
    7042:	e7ff      	b.n	7044 <__udivsi3+0x100>
    7044:	b501      	push	{r0, lr}
    7046:	2000      	movs	r0, #0
    7048:	f000 f8f0 	bl	722c <__aeabi_idiv0>
    704c:	bd02      	pop	{r1, pc}
    704e:	46c0      	nop			; (mov r8, r8)

00007050 <__aeabi_uidivmod>:
    7050:	2900      	cmp	r1, #0
    7052:	d0f7      	beq.n	7044 <__udivsi3+0x100>
    7054:	e776      	b.n	6f44 <__udivsi3>
    7056:	4770      	bx	lr

00007058 <__divsi3>:
    7058:	4603      	mov	r3, r0
    705a:	430b      	orrs	r3, r1
    705c:	d47f      	bmi.n	715e <__divsi3+0x106>
    705e:	2200      	movs	r2, #0
    7060:	0843      	lsrs	r3, r0, #1
    7062:	428b      	cmp	r3, r1
    7064:	d374      	bcc.n	7150 <__divsi3+0xf8>
    7066:	0903      	lsrs	r3, r0, #4
    7068:	428b      	cmp	r3, r1
    706a:	d35f      	bcc.n	712c <__divsi3+0xd4>
    706c:	0a03      	lsrs	r3, r0, #8
    706e:	428b      	cmp	r3, r1
    7070:	d344      	bcc.n	70fc <__divsi3+0xa4>
    7072:	0b03      	lsrs	r3, r0, #12
    7074:	428b      	cmp	r3, r1
    7076:	d328      	bcc.n	70ca <__divsi3+0x72>
    7078:	0c03      	lsrs	r3, r0, #16
    707a:	428b      	cmp	r3, r1
    707c:	d30d      	bcc.n	709a <__divsi3+0x42>
    707e:	22ff      	movs	r2, #255	; 0xff
    7080:	0209      	lsls	r1, r1, #8
    7082:	ba12      	rev	r2, r2
    7084:	0c03      	lsrs	r3, r0, #16
    7086:	428b      	cmp	r3, r1
    7088:	d302      	bcc.n	7090 <__divsi3+0x38>
    708a:	1212      	asrs	r2, r2, #8
    708c:	0209      	lsls	r1, r1, #8
    708e:	d065      	beq.n	715c <__divsi3+0x104>
    7090:	0b03      	lsrs	r3, r0, #12
    7092:	428b      	cmp	r3, r1
    7094:	d319      	bcc.n	70ca <__divsi3+0x72>
    7096:	e000      	b.n	709a <__divsi3+0x42>
    7098:	0a09      	lsrs	r1, r1, #8
    709a:	0bc3      	lsrs	r3, r0, #15
    709c:	428b      	cmp	r3, r1
    709e:	d301      	bcc.n	70a4 <__divsi3+0x4c>
    70a0:	03cb      	lsls	r3, r1, #15
    70a2:	1ac0      	subs	r0, r0, r3
    70a4:	4152      	adcs	r2, r2
    70a6:	0b83      	lsrs	r3, r0, #14
    70a8:	428b      	cmp	r3, r1
    70aa:	d301      	bcc.n	70b0 <__divsi3+0x58>
    70ac:	038b      	lsls	r3, r1, #14
    70ae:	1ac0      	subs	r0, r0, r3
    70b0:	4152      	adcs	r2, r2
    70b2:	0b43      	lsrs	r3, r0, #13
    70b4:	428b      	cmp	r3, r1
    70b6:	d301      	bcc.n	70bc <__divsi3+0x64>
    70b8:	034b      	lsls	r3, r1, #13
    70ba:	1ac0      	subs	r0, r0, r3
    70bc:	4152      	adcs	r2, r2
    70be:	0b03      	lsrs	r3, r0, #12
    70c0:	428b      	cmp	r3, r1
    70c2:	d301      	bcc.n	70c8 <__divsi3+0x70>
    70c4:	030b      	lsls	r3, r1, #12
    70c6:	1ac0      	subs	r0, r0, r3
    70c8:	4152      	adcs	r2, r2
    70ca:	0ac3      	lsrs	r3, r0, #11
    70cc:	428b      	cmp	r3, r1
    70ce:	d301      	bcc.n	70d4 <__divsi3+0x7c>
    70d0:	02cb      	lsls	r3, r1, #11
    70d2:	1ac0      	subs	r0, r0, r3
    70d4:	4152      	adcs	r2, r2
    70d6:	0a83      	lsrs	r3, r0, #10
    70d8:	428b      	cmp	r3, r1
    70da:	d301      	bcc.n	70e0 <__divsi3+0x88>
    70dc:	028b      	lsls	r3, r1, #10
    70de:	1ac0      	subs	r0, r0, r3
    70e0:	4152      	adcs	r2, r2
    70e2:	0a43      	lsrs	r3, r0, #9
    70e4:	428b      	cmp	r3, r1
    70e6:	d301      	bcc.n	70ec <__divsi3+0x94>
    70e8:	024b      	lsls	r3, r1, #9
    70ea:	1ac0      	subs	r0, r0, r3
    70ec:	4152      	adcs	r2, r2
    70ee:	0a03      	lsrs	r3, r0, #8
    70f0:	428b      	cmp	r3, r1
    70f2:	d301      	bcc.n	70f8 <__divsi3+0xa0>
    70f4:	020b      	lsls	r3, r1, #8
    70f6:	1ac0      	subs	r0, r0, r3
    70f8:	4152      	adcs	r2, r2
    70fa:	d2cd      	bcs.n	7098 <__divsi3+0x40>
    70fc:	09c3      	lsrs	r3, r0, #7
    70fe:	428b      	cmp	r3, r1
    7100:	d301      	bcc.n	7106 <__divsi3+0xae>
    7102:	01cb      	lsls	r3, r1, #7
    7104:	1ac0      	subs	r0, r0, r3
    7106:	4152      	adcs	r2, r2
    7108:	0983      	lsrs	r3, r0, #6
    710a:	428b      	cmp	r3, r1
    710c:	d301      	bcc.n	7112 <__divsi3+0xba>
    710e:	018b      	lsls	r3, r1, #6
    7110:	1ac0      	subs	r0, r0, r3
    7112:	4152      	adcs	r2, r2
    7114:	0943      	lsrs	r3, r0, #5
    7116:	428b      	cmp	r3, r1
    7118:	d301      	bcc.n	711e <__divsi3+0xc6>
    711a:	014b      	lsls	r3, r1, #5
    711c:	1ac0      	subs	r0, r0, r3
    711e:	4152      	adcs	r2, r2
    7120:	0903      	lsrs	r3, r0, #4
    7122:	428b      	cmp	r3, r1
    7124:	d301      	bcc.n	712a <__divsi3+0xd2>
    7126:	010b      	lsls	r3, r1, #4
    7128:	1ac0      	subs	r0, r0, r3
    712a:	4152      	adcs	r2, r2
    712c:	08c3      	lsrs	r3, r0, #3
    712e:	428b      	cmp	r3, r1
    7130:	d301      	bcc.n	7136 <__divsi3+0xde>
    7132:	00cb      	lsls	r3, r1, #3
    7134:	1ac0      	subs	r0, r0, r3
    7136:	4152      	adcs	r2, r2
    7138:	0883      	lsrs	r3, r0, #2
    713a:	428b      	cmp	r3, r1
    713c:	d301      	bcc.n	7142 <__divsi3+0xea>
    713e:	008b      	lsls	r3, r1, #2
    7140:	1ac0      	subs	r0, r0, r3
    7142:	4152      	adcs	r2, r2
    7144:	0843      	lsrs	r3, r0, #1
    7146:	428b      	cmp	r3, r1
    7148:	d301      	bcc.n	714e <__divsi3+0xf6>
    714a:	004b      	lsls	r3, r1, #1
    714c:	1ac0      	subs	r0, r0, r3
    714e:	4152      	adcs	r2, r2
    7150:	1a41      	subs	r1, r0, r1
    7152:	d200      	bcs.n	7156 <__divsi3+0xfe>
    7154:	4601      	mov	r1, r0
    7156:	4152      	adcs	r2, r2
    7158:	4610      	mov	r0, r2
    715a:	4770      	bx	lr
    715c:	e05d      	b.n	721a <__divsi3+0x1c2>
    715e:	0fca      	lsrs	r2, r1, #31
    7160:	d000      	beq.n	7164 <__divsi3+0x10c>
    7162:	4249      	negs	r1, r1
    7164:	1003      	asrs	r3, r0, #32
    7166:	d300      	bcc.n	716a <__divsi3+0x112>
    7168:	4240      	negs	r0, r0
    716a:	4053      	eors	r3, r2
    716c:	2200      	movs	r2, #0
    716e:	469c      	mov	ip, r3
    7170:	0903      	lsrs	r3, r0, #4
    7172:	428b      	cmp	r3, r1
    7174:	d32d      	bcc.n	71d2 <__divsi3+0x17a>
    7176:	0a03      	lsrs	r3, r0, #8
    7178:	428b      	cmp	r3, r1
    717a:	d312      	bcc.n	71a2 <__divsi3+0x14a>
    717c:	22fc      	movs	r2, #252	; 0xfc
    717e:	0189      	lsls	r1, r1, #6
    7180:	ba12      	rev	r2, r2
    7182:	0a03      	lsrs	r3, r0, #8
    7184:	428b      	cmp	r3, r1
    7186:	d30c      	bcc.n	71a2 <__divsi3+0x14a>
    7188:	0189      	lsls	r1, r1, #6
    718a:	1192      	asrs	r2, r2, #6
    718c:	428b      	cmp	r3, r1
    718e:	d308      	bcc.n	71a2 <__divsi3+0x14a>
    7190:	0189      	lsls	r1, r1, #6
    7192:	1192      	asrs	r2, r2, #6
    7194:	428b      	cmp	r3, r1
    7196:	d304      	bcc.n	71a2 <__divsi3+0x14a>
    7198:	0189      	lsls	r1, r1, #6
    719a:	d03a      	beq.n	7212 <__divsi3+0x1ba>
    719c:	1192      	asrs	r2, r2, #6
    719e:	e000      	b.n	71a2 <__divsi3+0x14a>
    71a0:	0989      	lsrs	r1, r1, #6
    71a2:	09c3      	lsrs	r3, r0, #7
    71a4:	428b      	cmp	r3, r1
    71a6:	d301      	bcc.n	71ac <__divsi3+0x154>
    71a8:	01cb      	lsls	r3, r1, #7
    71aa:	1ac0      	subs	r0, r0, r3
    71ac:	4152      	adcs	r2, r2
    71ae:	0983      	lsrs	r3, r0, #6
    71b0:	428b      	cmp	r3, r1
    71b2:	d301      	bcc.n	71b8 <__divsi3+0x160>
    71b4:	018b      	lsls	r3, r1, #6
    71b6:	1ac0      	subs	r0, r0, r3
    71b8:	4152      	adcs	r2, r2
    71ba:	0943      	lsrs	r3, r0, #5
    71bc:	428b      	cmp	r3, r1
    71be:	d301      	bcc.n	71c4 <__divsi3+0x16c>
    71c0:	014b      	lsls	r3, r1, #5
    71c2:	1ac0      	subs	r0, r0, r3
    71c4:	4152      	adcs	r2, r2
    71c6:	0903      	lsrs	r3, r0, #4
    71c8:	428b      	cmp	r3, r1
    71ca:	d301      	bcc.n	71d0 <__divsi3+0x178>
    71cc:	010b      	lsls	r3, r1, #4
    71ce:	1ac0      	subs	r0, r0, r3
    71d0:	4152      	adcs	r2, r2
    71d2:	08c3      	lsrs	r3, r0, #3
    71d4:	428b      	cmp	r3, r1
    71d6:	d301      	bcc.n	71dc <__divsi3+0x184>
    71d8:	00cb      	lsls	r3, r1, #3
    71da:	1ac0      	subs	r0, r0, r3
    71dc:	4152      	adcs	r2, r2
    71de:	0883      	lsrs	r3, r0, #2
    71e0:	428b      	cmp	r3, r1
    71e2:	d301      	bcc.n	71e8 <__divsi3+0x190>
    71e4:	008b      	lsls	r3, r1, #2
    71e6:	1ac0      	subs	r0, r0, r3
    71e8:	4152      	adcs	r2, r2
    71ea:	d2d9      	bcs.n	71a0 <__divsi3+0x148>
    71ec:	0843      	lsrs	r3, r0, #1
    71ee:	428b      	cmp	r3, r1
    71f0:	d301      	bcc.n	71f6 <__divsi3+0x19e>
    71f2:	004b      	lsls	r3, r1, #1
    71f4:	1ac0      	subs	r0, r0, r3
    71f6:	4152      	adcs	r2, r2
    71f8:	1a41      	subs	r1, r0, r1
    71fa:	d200      	bcs.n	71fe <__divsi3+0x1a6>
    71fc:	4601      	mov	r1, r0
    71fe:	4663      	mov	r3, ip
    7200:	4152      	adcs	r2, r2
    7202:	105b      	asrs	r3, r3, #1
    7204:	4610      	mov	r0, r2
    7206:	d301      	bcc.n	720c <__divsi3+0x1b4>
    7208:	4240      	negs	r0, r0
    720a:	2b00      	cmp	r3, #0
    720c:	d500      	bpl.n	7210 <__divsi3+0x1b8>
    720e:	4249      	negs	r1, r1
    7210:	4770      	bx	lr
    7212:	4663      	mov	r3, ip
    7214:	105b      	asrs	r3, r3, #1
    7216:	d300      	bcc.n	721a <__divsi3+0x1c2>
    7218:	4240      	negs	r0, r0
    721a:	b501      	push	{r0, lr}
    721c:	2000      	movs	r0, #0
    721e:	f000 f805 	bl	722c <__aeabi_idiv0>
    7222:	bd02      	pop	{r1, pc}

00007224 <__aeabi_idivmod>:
    7224:	2900      	cmp	r1, #0
    7226:	d0f8      	beq.n	721a <__divsi3+0x1c2>
    7228:	e716      	b.n	7058 <__divsi3>
    722a:	4770      	bx	lr

0000722c <__aeabi_idiv0>:
    722c:	4770      	bx	lr
    722e:	46c0      	nop			; (mov r8, r8)

00007230 <__aeabi_lmul>:
    7230:	b5f0      	push	{r4, r5, r6, r7, lr}
    7232:	46ce      	mov	lr, r9
    7234:	4647      	mov	r7, r8
    7236:	0415      	lsls	r5, r2, #16
    7238:	0c2d      	lsrs	r5, r5, #16
    723a:	002e      	movs	r6, r5
    723c:	b580      	push	{r7, lr}
    723e:	0407      	lsls	r7, r0, #16
    7240:	0c14      	lsrs	r4, r2, #16
    7242:	0c3f      	lsrs	r7, r7, #16
    7244:	4699      	mov	r9, r3
    7246:	0c03      	lsrs	r3, r0, #16
    7248:	437e      	muls	r6, r7
    724a:	435d      	muls	r5, r3
    724c:	4367      	muls	r7, r4
    724e:	4363      	muls	r3, r4
    7250:	197f      	adds	r7, r7, r5
    7252:	0c34      	lsrs	r4, r6, #16
    7254:	19e4      	adds	r4, r4, r7
    7256:	469c      	mov	ip, r3
    7258:	42a5      	cmp	r5, r4
    725a:	d903      	bls.n	7264 <__aeabi_lmul+0x34>
    725c:	2380      	movs	r3, #128	; 0x80
    725e:	025b      	lsls	r3, r3, #9
    7260:	4698      	mov	r8, r3
    7262:	44c4      	add	ip, r8
    7264:	464b      	mov	r3, r9
    7266:	4351      	muls	r1, r2
    7268:	4343      	muls	r3, r0
    726a:	0436      	lsls	r6, r6, #16
    726c:	0c36      	lsrs	r6, r6, #16
    726e:	0c25      	lsrs	r5, r4, #16
    7270:	0424      	lsls	r4, r4, #16
    7272:	4465      	add	r5, ip
    7274:	19a4      	adds	r4, r4, r6
    7276:	1859      	adds	r1, r3, r1
    7278:	1949      	adds	r1, r1, r5
    727a:	0020      	movs	r0, r4
    727c:	bc0c      	pop	{r2, r3}
    727e:	4690      	mov	r8, r2
    7280:	4699      	mov	r9, r3
    7282:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007284 <__aeabi_d2uiz>:
    7284:	b570      	push	{r4, r5, r6, lr}
    7286:	2200      	movs	r2, #0
    7288:	4b0c      	ldr	r3, [pc, #48]	; (72bc <__aeabi_d2uiz+0x38>)
    728a:	0004      	movs	r4, r0
    728c:	000d      	movs	r5, r1
    728e:	f001 f967 	bl	8560 <__aeabi_dcmpge>
    7292:	2800      	cmp	r0, #0
    7294:	d104      	bne.n	72a0 <__aeabi_d2uiz+0x1c>
    7296:	0020      	movs	r0, r4
    7298:	0029      	movs	r1, r5
    729a:	f001 f8b7 	bl	840c <__aeabi_d2iz>
    729e:	bd70      	pop	{r4, r5, r6, pc}
    72a0:	4b06      	ldr	r3, [pc, #24]	; (72bc <__aeabi_d2uiz+0x38>)
    72a2:	2200      	movs	r2, #0
    72a4:	0020      	movs	r0, r4
    72a6:	0029      	movs	r1, r5
    72a8:	f000 fd9a 	bl	7de0 <__aeabi_dsub>
    72ac:	f001 f8ae 	bl	840c <__aeabi_d2iz>
    72b0:	2380      	movs	r3, #128	; 0x80
    72b2:	061b      	lsls	r3, r3, #24
    72b4:	469c      	mov	ip, r3
    72b6:	4460      	add	r0, ip
    72b8:	e7f1      	b.n	729e <__aeabi_d2uiz+0x1a>
    72ba:	46c0      	nop			; (mov r8, r8)
    72bc:	41e00000 	.word	0x41e00000

000072c0 <__aeabi_dadd>:
    72c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72c2:	4645      	mov	r5, r8
    72c4:	46de      	mov	lr, fp
    72c6:	4657      	mov	r7, sl
    72c8:	464e      	mov	r6, r9
    72ca:	030c      	lsls	r4, r1, #12
    72cc:	b5e0      	push	{r5, r6, r7, lr}
    72ce:	004e      	lsls	r6, r1, #1
    72d0:	0fc9      	lsrs	r1, r1, #31
    72d2:	4688      	mov	r8, r1
    72d4:	000d      	movs	r5, r1
    72d6:	0a61      	lsrs	r1, r4, #9
    72d8:	0f44      	lsrs	r4, r0, #29
    72da:	430c      	orrs	r4, r1
    72dc:	00c7      	lsls	r7, r0, #3
    72de:	0319      	lsls	r1, r3, #12
    72e0:	0058      	lsls	r0, r3, #1
    72e2:	0fdb      	lsrs	r3, r3, #31
    72e4:	469b      	mov	fp, r3
    72e6:	0a4b      	lsrs	r3, r1, #9
    72e8:	0f51      	lsrs	r1, r2, #29
    72ea:	430b      	orrs	r3, r1
    72ec:	0d76      	lsrs	r6, r6, #21
    72ee:	0d40      	lsrs	r0, r0, #21
    72f0:	0019      	movs	r1, r3
    72f2:	00d2      	lsls	r2, r2, #3
    72f4:	45d8      	cmp	r8, fp
    72f6:	d100      	bne.n	72fa <__aeabi_dadd+0x3a>
    72f8:	e0ae      	b.n	7458 <__aeabi_dadd+0x198>
    72fa:	1a35      	subs	r5, r6, r0
    72fc:	2d00      	cmp	r5, #0
    72fe:	dc00      	bgt.n	7302 <__aeabi_dadd+0x42>
    7300:	e0f6      	b.n	74f0 <__aeabi_dadd+0x230>
    7302:	2800      	cmp	r0, #0
    7304:	d10f      	bne.n	7326 <__aeabi_dadd+0x66>
    7306:	4313      	orrs	r3, r2
    7308:	d100      	bne.n	730c <__aeabi_dadd+0x4c>
    730a:	e0db      	b.n	74c4 <__aeabi_dadd+0x204>
    730c:	1e6b      	subs	r3, r5, #1
    730e:	2b00      	cmp	r3, #0
    7310:	d000      	beq.n	7314 <__aeabi_dadd+0x54>
    7312:	e137      	b.n	7584 <__aeabi_dadd+0x2c4>
    7314:	1aba      	subs	r2, r7, r2
    7316:	4297      	cmp	r7, r2
    7318:	41bf      	sbcs	r7, r7
    731a:	1a64      	subs	r4, r4, r1
    731c:	427f      	negs	r7, r7
    731e:	1be4      	subs	r4, r4, r7
    7320:	2601      	movs	r6, #1
    7322:	0017      	movs	r7, r2
    7324:	e024      	b.n	7370 <__aeabi_dadd+0xb0>
    7326:	4bc6      	ldr	r3, [pc, #792]	; (7640 <__aeabi_dadd+0x380>)
    7328:	429e      	cmp	r6, r3
    732a:	d04d      	beq.n	73c8 <__aeabi_dadd+0x108>
    732c:	2380      	movs	r3, #128	; 0x80
    732e:	041b      	lsls	r3, r3, #16
    7330:	4319      	orrs	r1, r3
    7332:	2d38      	cmp	r5, #56	; 0x38
    7334:	dd00      	ble.n	7338 <__aeabi_dadd+0x78>
    7336:	e107      	b.n	7548 <__aeabi_dadd+0x288>
    7338:	2d1f      	cmp	r5, #31
    733a:	dd00      	ble.n	733e <__aeabi_dadd+0x7e>
    733c:	e138      	b.n	75b0 <__aeabi_dadd+0x2f0>
    733e:	2020      	movs	r0, #32
    7340:	1b43      	subs	r3, r0, r5
    7342:	469a      	mov	sl, r3
    7344:	000b      	movs	r3, r1
    7346:	4650      	mov	r0, sl
    7348:	4083      	lsls	r3, r0
    734a:	4699      	mov	r9, r3
    734c:	0013      	movs	r3, r2
    734e:	4648      	mov	r0, r9
    7350:	40eb      	lsrs	r3, r5
    7352:	4318      	orrs	r0, r3
    7354:	0003      	movs	r3, r0
    7356:	4650      	mov	r0, sl
    7358:	4082      	lsls	r2, r0
    735a:	1e50      	subs	r0, r2, #1
    735c:	4182      	sbcs	r2, r0
    735e:	40e9      	lsrs	r1, r5
    7360:	431a      	orrs	r2, r3
    7362:	1aba      	subs	r2, r7, r2
    7364:	1a61      	subs	r1, r4, r1
    7366:	4297      	cmp	r7, r2
    7368:	41a4      	sbcs	r4, r4
    736a:	0017      	movs	r7, r2
    736c:	4264      	negs	r4, r4
    736e:	1b0c      	subs	r4, r1, r4
    7370:	0223      	lsls	r3, r4, #8
    7372:	d562      	bpl.n	743a <__aeabi_dadd+0x17a>
    7374:	0264      	lsls	r4, r4, #9
    7376:	0a65      	lsrs	r5, r4, #9
    7378:	2d00      	cmp	r5, #0
    737a:	d100      	bne.n	737e <__aeabi_dadd+0xbe>
    737c:	e0df      	b.n	753e <__aeabi_dadd+0x27e>
    737e:	0028      	movs	r0, r5
    7380:	f001 f8f8 	bl	8574 <__clzsi2>
    7384:	0003      	movs	r3, r0
    7386:	3b08      	subs	r3, #8
    7388:	2b1f      	cmp	r3, #31
    738a:	dd00      	ble.n	738e <__aeabi_dadd+0xce>
    738c:	e0d2      	b.n	7534 <__aeabi_dadd+0x274>
    738e:	2220      	movs	r2, #32
    7390:	003c      	movs	r4, r7
    7392:	1ad2      	subs	r2, r2, r3
    7394:	409d      	lsls	r5, r3
    7396:	40d4      	lsrs	r4, r2
    7398:	409f      	lsls	r7, r3
    739a:	4325      	orrs	r5, r4
    739c:	429e      	cmp	r6, r3
    739e:	dd00      	ble.n	73a2 <__aeabi_dadd+0xe2>
    73a0:	e0c4      	b.n	752c <__aeabi_dadd+0x26c>
    73a2:	1b9e      	subs	r6, r3, r6
    73a4:	1c73      	adds	r3, r6, #1
    73a6:	2b1f      	cmp	r3, #31
    73a8:	dd00      	ble.n	73ac <__aeabi_dadd+0xec>
    73aa:	e0f1      	b.n	7590 <__aeabi_dadd+0x2d0>
    73ac:	2220      	movs	r2, #32
    73ae:	0038      	movs	r0, r7
    73b0:	0029      	movs	r1, r5
    73b2:	1ad2      	subs	r2, r2, r3
    73b4:	40d8      	lsrs	r0, r3
    73b6:	4091      	lsls	r1, r2
    73b8:	4097      	lsls	r7, r2
    73ba:	002c      	movs	r4, r5
    73bc:	4301      	orrs	r1, r0
    73be:	1e78      	subs	r0, r7, #1
    73c0:	4187      	sbcs	r7, r0
    73c2:	40dc      	lsrs	r4, r3
    73c4:	2600      	movs	r6, #0
    73c6:	430f      	orrs	r7, r1
    73c8:	077b      	lsls	r3, r7, #29
    73ca:	d009      	beq.n	73e0 <__aeabi_dadd+0x120>
    73cc:	230f      	movs	r3, #15
    73ce:	403b      	ands	r3, r7
    73d0:	2b04      	cmp	r3, #4
    73d2:	d005      	beq.n	73e0 <__aeabi_dadd+0x120>
    73d4:	1d3b      	adds	r3, r7, #4
    73d6:	42bb      	cmp	r3, r7
    73d8:	41bf      	sbcs	r7, r7
    73da:	427f      	negs	r7, r7
    73dc:	19e4      	adds	r4, r4, r7
    73de:	001f      	movs	r7, r3
    73e0:	0223      	lsls	r3, r4, #8
    73e2:	d52c      	bpl.n	743e <__aeabi_dadd+0x17e>
    73e4:	4b96      	ldr	r3, [pc, #600]	; (7640 <__aeabi_dadd+0x380>)
    73e6:	3601      	adds	r6, #1
    73e8:	429e      	cmp	r6, r3
    73ea:	d100      	bne.n	73ee <__aeabi_dadd+0x12e>
    73ec:	e09a      	b.n	7524 <__aeabi_dadd+0x264>
    73ee:	4645      	mov	r5, r8
    73f0:	4b94      	ldr	r3, [pc, #592]	; (7644 <__aeabi_dadd+0x384>)
    73f2:	08ff      	lsrs	r7, r7, #3
    73f4:	401c      	ands	r4, r3
    73f6:	0760      	lsls	r0, r4, #29
    73f8:	0576      	lsls	r6, r6, #21
    73fa:	0264      	lsls	r4, r4, #9
    73fc:	4307      	orrs	r7, r0
    73fe:	0b24      	lsrs	r4, r4, #12
    7400:	0d76      	lsrs	r6, r6, #21
    7402:	2100      	movs	r1, #0
    7404:	0324      	lsls	r4, r4, #12
    7406:	0b23      	lsrs	r3, r4, #12
    7408:	0d0c      	lsrs	r4, r1, #20
    740a:	4a8f      	ldr	r2, [pc, #572]	; (7648 <__aeabi_dadd+0x388>)
    740c:	0524      	lsls	r4, r4, #20
    740e:	431c      	orrs	r4, r3
    7410:	4014      	ands	r4, r2
    7412:	0533      	lsls	r3, r6, #20
    7414:	4323      	orrs	r3, r4
    7416:	005b      	lsls	r3, r3, #1
    7418:	07ed      	lsls	r5, r5, #31
    741a:	085b      	lsrs	r3, r3, #1
    741c:	432b      	orrs	r3, r5
    741e:	0038      	movs	r0, r7
    7420:	0019      	movs	r1, r3
    7422:	bc3c      	pop	{r2, r3, r4, r5}
    7424:	4690      	mov	r8, r2
    7426:	4699      	mov	r9, r3
    7428:	46a2      	mov	sl, r4
    742a:	46ab      	mov	fp, r5
    742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    742e:	4664      	mov	r4, ip
    7430:	4304      	orrs	r4, r0
    7432:	d100      	bne.n	7436 <__aeabi_dadd+0x176>
    7434:	e211      	b.n	785a <__aeabi_dadd+0x59a>
    7436:	0004      	movs	r4, r0
    7438:	4667      	mov	r7, ip
    743a:	077b      	lsls	r3, r7, #29
    743c:	d1c6      	bne.n	73cc <__aeabi_dadd+0x10c>
    743e:	4645      	mov	r5, r8
    7440:	0760      	lsls	r0, r4, #29
    7442:	08ff      	lsrs	r7, r7, #3
    7444:	4307      	orrs	r7, r0
    7446:	08e4      	lsrs	r4, r4, #3
    7448:	4b7d      	ldr	r3, [pc, #500]	; (7640 <__aeabi_dadd+0x380>)
    744a:	429e      	cmp	r6, r3
    744c:	d030      	beq.n	74b0 <__aeabi_dadd+0x1f0>
    744e:	0324      	lsls	r4, r4, #12
    7450:	0576      	lsls	r6, r6, #21
    7452:	0b24      	lsrs	r4, r4, #12
    7454:	0d76      	lsrs	r6, r6, #21
    7456:	e7d4      	b.n	7402 <__aeabi_dadd+0x142>
    7458:	1a33      	subs	r3, r6, r0
    745a:	469a      	mov	sl, r3
    745c:	2b00      	cmp	r3, #0
    745e:	dd78      	ble.n	7552 <__aeabi_dadd+0x292>
    7460:	2800      	cmp	r0, #0
    7462:	d031      	beq.n	74c8 <__aeabi_dadd+0x208>
    7464:	4876      	ldr	r0, [pc, #472]	; (7640 <__aeabi_dadd+0x380>)
    7466:	4286      	cmp	r6, r0
    7468:	d0ae      	beq.n	73c8 <__aeabi_dadd+0x108>
    746a:	2080      	movs	r0, #128	; 0x80
    746c:	0400      	lsls	r0, r0, #16
    746e:	4301      	orrs	r1, r0
    7470:	4653      	mov	r3, sl
    7472:	2b38      	cmp	r3, #56	; 0x38
    7474:	dc00      	bgt.n	7478 <__aeabi_dadd+0x1b8>
    7476:	e0e9      	b.n	764c <__aeabi_dadd+0x38c>
    7478:	430a      	orrs	r2, r1
    747a:	1e51      	subs	r1, r2, #1
    747c:	418a      	sbcs	r2, r1
    747e:	2100      	movs	r1, #0
    7480:	19d2      	adds	r2, r2, r7
    7482:	42ba      	cmp	r2, r7
    7484:	41bf      	sbcs	r7, r7
    7486:	1909      	adds	r1, r1, r4
    7488:	427c      	negs	r4, r7
    748a:	0017      	movs	r7, r2
    748c:	190c      	adds	r4, r1, r4
    748e:	0223      	lsls	r3, r4, #8
    7490:	d5d3      	bpl.n	743a <__aeabi_dadd+0x17a>
    7492:	4b6b      	ldr	r3, [pc, #428]	; (7640 <__aeabi_dadd+0x380>)
    7494:	3601      	adds	r6, #1
    7496:	429e      	cmp	r6, r3
    7498:	d100      	bne.n	749c <__aeabi_dadd+0x1dc>
    749a:	e13a      	b.n	7712 <__aeabi_dadd+0x452>
    749c:	2001      	movs	r0, #1
    749e:	4b69      	ldr	r3, [pc, #420]	; (7644 <__aeabi_dadd+0x384>)
    74a0:	401c      	ands	r4, r3
    74a2:	087b      	lsrs	r3, r7, #1
    74a4:	4007      	ands	r7, r0
    74a6:	431f      	orrs	r7, r3
    74a8:	07e0      	lsls	r0, r4, #31
    74aa:	4307      	orrs	r7, r0
    74ac:	0864      	lsrs	r4, r4, #1
    74ae:	e78b      	b.n	73c8 <__aeabi_dadd+0x108>
    74b0:	0023      	movs	r3, r4
    74b2:	433b      	orrs	r3, r7
    74b4:	d100      	bne.n	74b8 <__aeabi_dadd+0x1f8>
    74b6:	e1cb      	b.n	7850 <__aeabi_dadd+0x590>
    74b8:	2280      	movs	r2, #128	; 0x80
    74ba:	0312      	lsls	r2, r2, #12
    74bc:	4314      	orrs	r4, r2
    74be:	0324      	lsls	r4, r4, #12
    74c0:	0b24      	lsrs	r4, r4, #12
    74c2:	e79e      	b.n	7402 <__aeabi_dadd+0x142>
    74c4:	002e      	movs	r6, r5
    74c6:	e77f      	b.n	73c8 <__aeabi_dadd+0x108>
    74c8:	0008      	movs	r0, r1
    74ca:	4310      	orrs	r0, r2
    74cc:	d100      	bne.n	74d0 <__aeabi_dadd+0x210>
    74ce:	e0b4      	b.n	763a <__aeabi_dadd+0x37a>
    74d0:	1e58      	subs	r0, r3, #1
    74d2:	2800      	cmp	r0, #0
    74d4:	d000      	beq.n	74d8 <__aeabi_dadd+0x218>
    74d6:	e0de      	b.n	7696 <__aeabi_dadd+0x3d6>
    74d8:	18ba      	adds	r2, r7, r2
    74da:	42ba      	cmp	r2, r7
    74dc:	419b      	sbcs	r3, r3
    74de:	1864      	adds	r4, r4, r1
    74e0:	425b      	negs	r3, r3
    74e2:	18e4      	adds	r4, r4, r3
    74e4:	0017      	movs	r7, r2
    74e6:	2601      	movs	r6, #1
    74e8:	0223      	lsls	r3, r4, #8
    74ea:	d5a6      	bpl.n	743a <__aeabi_dadd+0x17a>
    74ec:	2602      	movs	r6, #2
    74ee:	e7d5      	b.n	749c <__aeabi_dadd+0x1dc>
    74f0:	2d00      	cmp	r5, #0
    74f2:	d16e      	bne.n	75d2 <__aeabi_dadd+0x312>
    74f4:	1c70      	adds	r0, r6, #1
    74f6:	0540      	lsls	r0, r0, #21
    74f8:	0d40      	lsrs	r0, r0, #21
    74fa:	2801      	cmp	r0, #1
    74fc:	dc00      	bgt.n	7500 <__aeabi_dadd+0x240>
    74fe:	e0f9      	b.n	76f4 <__aeabi_dadd+0x434>
    7500:	1ab8      	subs	r0, r7, r2
    7502:	4684      	mov	ip, r0
    7504:	4287      	cmp	r7, r0
    7506:	4180      	sbcs	r0, r0
    7508:	1ae5      	subs	r5, r4, r3
    750a:	4240      	negs	r0, r0
    750c:	1a2d      	subs	r5, r5, r0
    750e:	0228      	lsls	r0, r5, #8
    7510:	d400      	bmi.n	7514 <__aeabi_dadd+0x254>
    7512:	e089      	b.n	7628 <__aeabi_dadd+0x368>
    7514:	1bd7      	subs	r7, r2, r7
    7516:	42ba      	cmp	r2, r7
    7518:	4192      	sbcs	r2, r2
    751a:	1b1c      	subs	r4, r3, r4
    751c:	4252      	negs	r2, r2
    751e:	1aa5      	subs	r5, r4, r2
    7520:	46d8      	mov	r8, fp
    7522:	e729      	b.n	7378 <__aeabi_dadd+0xb8>
    7524:	4645      	mov	r5, r8
    7526:	2400      	movs	r4, #0
    7528:	2700      	movs	r7, #0
    752a:	e76a      	b.n	7402 <__aeabi_dadd+0x142>
    752c:	4c45      	ldr	r4, [pc, #276]	; (7644 <__aeabi_dadd+0x384>)
    752e:	1af6      	subs	r6, r6, r3
    7530:	402c      	ands	r4, r5
    7532:	e749      	b.n	73c8 <__aeabi_dadd+0x108>
    7534:	003d      	movs	r5, r7
    7536:	3828      	subs	r0, #40	; 0x28
    7538:	4085      	lsls	r5, r0
    753a:	2700      	movs	r7, #0
    753c:	e72e      	b.n	739c <__aeabi_dadd+0xdc>
    753e:	0038      	movs	r0, r7
    7540:	f001 f818 	bl	8574 <__clzsi2>
    7544:	3020      	adds	r0, #32
    7546:	e71d      	b.n	7384 <__aeabi_dadd+0xc4>
    7548:	430a      	orrs	r2, r1
    754a:	1e51      	subs	r1, r2, #1
    754c:	418a      	sbcs	r2, r1
    754e:	2100      	movs	r1, #0
    7550:	e707      	b.n	7362 <__aeabi_dadd+0xa2>
    7552:	2b00      	cmp	r3, #0
    7554:	d000      	beq.n	7558 <__aeabi_dadd+0x298>
    7556:	e0f3      	b.n	7740 <__aeabi_dadd+0x480>
    7558:	1c70      	adds	r0, r6, #1
    755a:	0543      	lsls	r3, r0, #21
    755c:	0d5b      	lsrs	r3, r3, #21
    755e:	2b01      	cmp	r3, #1
    7560:	dc00      	bgt.n	7564 <__aeabi_dadd+0x2a4>
    7562:	e0ad      	b.n	76c0 <__aeabi_dadd+0x400>
    7564:	4b36      	ldr	r3, [pc, #216]	; (7640 <__aeabi_dadd+0x380>)
    7566:	4298      	cmp	r0, r3
    7568:	d100      	bne.n	756c <__aeabi_dadd+0x2ac>
    756a:	e0d1      	b.n	7710 <__aeabi_dadd+0x450>
    756c:	18ba      	adds	r2, r7, r2
    756e:	42ba      	cmp	r2, r7
    7570:	41bf      	sbcs	r7, r7
    7572:	1864      	adds	r4, r4, r1
    7574:	427f      	negs	r7, r7
    7576:	19e4      	adds	r4, r4, r7
    7578:	07e7      	lsls	r7, r4, #31
    757a:	0852      	lsrs	r2, r2, #1
    757c:	4317      	orrs	r7, r2
    757e:	0864      	lsrs	r4, r4, #1
    7580:	0006      	movs	r6, r0
    7582:	e721      	b.n	73c8 <__aeabi_dadd+0x108>
    7584:	482e      	ldr	r0, [pc, #184]	; (7640 <__aeabi_dadd+0x380>)
    7586:	4285      	cmp	r5, r0
    7588:	d100      	bne.n	758c <__aeabi_dadd+0x2cc>
    758a:	e093      	b.n	76b4 <__aeabi_dadd+0x3f4>
    758c:	001d      	movs	r5, r3
    758e:	e6d0      	b.n	7332 <__aeabi_dadd+0x72>
    7590:	0029      	movs	r1, r5
    7592:	3e1f      	subs	r6, #31
    7594:	40f1      	lsrs	r1, r6
    7596:	2b20      	cmp	r3, #32
    7598:	d100      	bne.n	759c <__aeabi_dadd+0x2dc>
    759a:	e08d      	b.n	76b8 <__aeabi_dadd+0x3f8>
    759c:	2240      	movs	r2, #64	; 0x40
    759e:	1ad3      	subs	r3, r2, r3
    75a0:	409d      	lsls	r5, r3
    75a2:	432f      	orrs	r7, r5
    75a4:	1e7d      	subs	r5, r7, #1
    75a6:	41af      	sbcs	r7, r5
    75a8:	2400      	movs	r4, #0
    75aa:	430f      	orrs	r7, r1
    75ac:	2600      	movs	r6, #0
    75ae:	e744      	b.n	743a <__aeabi_dadd+0x17a>
    75b0:	002b      	movs	r3, r5
    75b2:	0008      	movs	r0, r1
    75b4:	3b20      	subs	r3, #32
    75b6:	40d8      	lsrs	r0, r3
    75b8:	0003      	movs	r3, r0
    75ba:	2d20      	cmp	r5, #32
    75bc:	d100      	bne.n	75c0 <__aeabi_dadd+0x300>
    75be:	e07d      	b.n	76bc <__aeabi_dadd+0x3fc>
    75c0:	2040      	movs	r0, #64	; 0x40
    75c2:	1b45      	subs	r5, r0, r5
    75c4:	40a9      	lsls	r1, r5
    75c6:	430a      	orrs	r2, r1
    75c8:	1e51      	subs	r1, r2, #1
    75ca:	418a      	sbcs	r2, r1
    75cc:	2100      	movs	r1, #0
    75ce:	431a      	orrs	r2, r3
    75d0:	e6c7      	b.n	7362 <__aeabi_dadd+0xa2>
    75d2:	2e00      	cmp	r6, #0
    75d4:	d050      	beq.n	7678 <__aeabi_dadd+0x3b8>
    75d6:	4e1a      	ldr	r6, [pc, #104]	; (7640 <__aeabi_dadd+0x380>)
    75d8:	42b0      	cmp	r0, r6
    75da:	d057      	beq.n	768c <__aeabi_dadd+0x3cc>
    75dc:	2680      	movs	r6, #128	; 0x80
    75de:	426b      	negs	r3, r5
    75e0:	4699      	mov	r9, r3
    75e2:	0436      	lsls	r6, r6, #16
    75e4:	4334      	orrs	r4, r6
    75e6:	464b      	mov	r3, r9
    75e8:	2b38      	cmp	r3, #56	; 0x38
    75ea:	dd00      	ble.n	75ee <__aeabi_dadd+0x32e>
    75ec:	e0d6      	b.n	779c <__aeabi_dadd+0x4dc>
    75ee:	2b1f      	cmp	r3, #31
    75f0:	dd00      	ble.n	75f4 <__aeabi_dadd+0x334>
    75f2:	e135      	b.n	7860 <__aeabi_dadd+0x5a0>
    75f4:	2620      	movs	r6, #32
    75f6:	1af5      	subs	r5, r6, r3
    75f8:	0026      	movs	r6, r4
    75fa:	40ae      	lsls	r6, r5
    75fc:	46b2      	mov	sl, r6
    75fe:	003e      	movs	r6, r7
    7600:	40de      	lsrs	r6, r3
    7602:	46ac      	mov	ip, r5
    7604:	0035      	movs	r5, r6
    7606:	4656      	mov	r6, sl
    7608:	432e      	orrs	r6, r5
    760a:	4665      	mov	r5, ip
    760c:	40af      	lsls	r7, r5
    760e:	1e7d      	subs	r5, r7, #1
    7610:	41af      	sbcs	r7, r5
    7612:	40dc      	lsrs	r4, r3
    7614:	4337      	orrs	r7, r6
    7616:	1bd7      	subs	r7, r2, r7
    7618:	42ba      	cmp	r2, r7
    761a:	4192      	sbcs	r2, r2
    761c:	1b0c      	subs	r4, r1, r4
    761e:	4252      	negs	r2, r2
    7620:	1aa4      	subs	r4, r4, r2
    7622:	0006      	movs	r6, r0
    7624:	46d8      	mov	r8, fp
    7626:	e6a3      	b.n	7370 <__aeabi_dadd+0xb0>
    7628:	4664      	mov	r4, ip
    762a:	4667      	mov	r7, ip
    762c:	432c      	orrs	r4, r5
    762e:	d000      	beq.n	7632 <__aeabi_dadd+0x372>
    7630:	e6a2      	b.n	7378 <__aeabi_dadd+0xb8>
    7632:	2500      	movs	r5, #0
    7634:	2600      	movs	r6, #0
    7636:	2700      	movs	r7, #0
    7638:	e706      	b.n	7448 <__aeabi_dadd+0x188>
    763a:	001e      	movs	r6, r3
    763c:	e6c4      	b.n	73c8 <__aeabi_dadd+0x108>
    763e:	46c0      	nop			; (mov r8, r8)
    7640:	000007ff 	.word	0x000007ff
    7644:	ff7fffff 	.word	0xff7fffff
    7648:	800fffff 	.word	0x800fffff
    764c:	2b1f      	cmp	r3, #31
    764e:	dc63      	bgt.n	7718 <__aeabi_dadd+0x458>
    7650:	2020      	movs	r0, #32
    7652:	1ac3      	subs	r3, r0, r3
    7654:	0008      	movs	r0, r1
    7656:	4098      	lsls	r0, r3
    7658:	469c      	mov	ip, r3
    765a:	4683      	mov	fp, r0
    765c:	4653      	mov	r3, sl
    765e:	0010      	movs	r0, r2
    7660:	40d8      	lsrs	r0, r3
    7662:	0003      	movs	r3, r0
    7664:	4658      	mov	r0, fp
    7666:	4318      	orrs	r0, r3
    7668:	4663      	mov	r3, ip
    766a:	409a      	lsls	r2, r3
    766c:	1e53      	subs	r3, r2, #1
    766e:	419a      	sbcs	r2, r3
    7670:	4653      	mov	r3, sl
    7672:	4302      	orrs	r2, r0
    7674:	40d9      	lsrs	r1, r3
    7676:	e703      	b.n	7480 <__aeabi_dadd+0x1c0>
    7678:	0026      	movs	r6, r4
    767a:	433e      	orrs	r6, r7
    767c:	d006      	beq.n	768c <__aeabi_dadd+0x3cc>
    767e:	43eb      	mvns	r3, r5
    7680:	4699      	mov	r9, r3
    7682:	2b00      	cmp	r3, #0
    7684:	d0c7      	beq.n	7616 <__aeabi_dadd+0x356>
    7686:	4e94      	ldr	r6, [pc, #592]	; (78d8 <__aeabi_dadd+0x618>)
    7688:	42b0      	cmp	r0, r6
    768a:	d1ac      	bne.n	75e6 <__aeabi_dadd+0x326>
    768c:	000c      	movs	r4, r1
    768e:	0017      	movs	r7, r2
    7690:	0006      	movs	r6, r0
    7692:	46d8      	mov	r8, fp
    7694:	e698      	b.n	73c8 <__aeabi_dadd+0x108>
    7696:	4b90      	ldr	r3, [pc, #576]	; (78d8 <__aeabi_dadd+0x618>)
    7698:	459a      	cmp	sl, r3
    769a:	d00b      	beq.n	76b4 <__aeabi_dadd+0x3f4>
    769c:	4682      	mov	sl, r0
    769e:	e6e7      	b.n	7470 <__aeabi_dadd+0x1b0>
    76a0:	2800      	cmp	r0, #0
    76a2:	d000      	beq.n	76a6 <__aeabi_dadd+0x3e6>
    76a4:	e09e      	b.n	77e4 <__aeabi_dadd+0x524>
    76a6:	0018      	movs	r0, r3
    76a8:	4310      	orrs	r0, r2
    76aa:	d100      	bne.n	76ae <__aeabi_dadd+0x3ee>
    76ac:	e0e9      	b.n	7882 <__aeabi_dadd+0x5c2>
    76ae:	001c      	movs	r4, r3
    76b0:	0017      	movs	r7, r2
    76b2:	46d8      	mov	r8, fp
    76b4:	4e88      	ldr	r6, [pc, #544]	; (78d8 <__aeabi_dadd+0x618>)
    76b6:	e687      	b.n	73c8 <__aeabi_dadd+0x108>
    76b8:	2500      	movs	r5, #0
    76ba:	e772      	b.n	75a2 <__aeabi_dadd+0x2e2>
    76bc:	2100      	movs	r1, #0
    76be:	e782      	b.n	75c6 <__aeabi_dadd+0x306>
    76c0:	0023      	movs	r3, r4
    76c2:	433b      	orrs	r3, r7
    76c4:	2e00      	cmp	r6, #0
    76c6:	d000      	beq.n	76ca <__aeabi_dadd+0x40a>
    76c8:	e0ab      	b.n	7822 <__aeabi_dadd+0x562>
    76ca:	2b00      	cmp	r3, #0
    76cc:	d100      	bne.n	76d0 <__aeabi_dadd+0x410>
    76ce:	e0e7      	b.n	78a0 <__aeabi_dadd+0x5e0>
    76d0:	000b      	movs	r3, r1
    76d2:	4313      	orrs	r3, r2
    76d4:	d100      	bne.n	76d8 <__aeabi_dadd+0x418>
    76d6:	e677      	b.n	73c8 <__aeabi_dadd+0x108>
    76d8:	18ba      	adds	r2, r7, r2
    76da:	42ba      	cmp	r2, r7
    76dc:	41bf      	sbcs	r7, r7
    76de:	1864      	adds	r4, r4, r1
    76e0:	427f      	negs	r7, r7
    76e2:	19e4      	adds	r4, r4, r7
    76e4:	0223      	lsls	r3, r4, #8
    76e6:	d400      	bmi.n	76ea <__aeabi_dadd+0x42a>
    76e8:	e0f2      	b.n	78d0 <__aeabi_dadd+0x610>
    76ea:	4b7c      	ldr	r3, [pc, #496]	; (78dc <__aeabi_dadd+0x61c>)
    76ec:	0017      	movs	r7, r2
    76ee:	401c      	ands	r4, r3
    76f0:	0006      	movs	r6, r0
    76f2:	e669      	b.n	73c8 <__aeabi_dadd+0x108>
    76f4:	0020      	movs	r0, r4
    76f6:	4338      	orrs	r0, r7
    76f8:	2e00      	cmp	r6, #0
    76fa:	d1d1      	bne.n	76a0 <__aeabi_dadd+0x3e0>
    76fc:	2800      	cmp	r0, #0
    76fe:	d15b      	bne.n	77b8 <__aeabi_dadd+0x4f8>
    7700:	001c      	movs	r4, r3
    7702:	4314      	orrs	r4, r2
    7704:	d100      	bne.n	7708 <__aeabi_dadd+0x448>
    7706:	e0a8      	b.n	785a <__aeabi_dadd+0x59a>
    7708:	001c      	movs	r4, r3
    770a:	0017      	movs	r7, r2
    770c:	46d8      	mov	r8, fp
    770e:	e65b      	b.n	73c8 <__aeabi_dadd+0x108>
    7710:	0006      	movs	r6, r0
    7712:	2400      	movs	r4, #0
    7714:	2700      	movs	r7, #0
    7716:	e697      	b.n	7448 <__aeabi_dadd+0x188>
    7718:	4650      	mov	r0, sl
    771a:	000b      	movs	r3, r1
    771c:	3820      	subs	r0, #32
    771e:	40c3      	lsrs	r3, r0
    7720:	4699      	mov	r9, r3
    7722:	4653      	mov	r3, sl
    7724:	2b20      	cmp	r3, #32
    7726:	d100      	bne.n	772a <__aeabi_dadd+0x46a>
    7728:	e095      	b.n	7856 <__aeabi_dadd+0x596>
    772a:	2340      	movs	r3, #64	; 0x40
    772c:	4650      	mov	r0, sl
    772e:	1a1b      	subs	r3, r3, r0
    7730:	4099      	lsls	r1, r3
    7732:	430a      	orrs	r2, r1
    7734:	1e51      	subs	r1, r2, #1
    7736:	418a      	sbcs	r2, r1
    7738:	464b      	mov	r3, r9
    773a:	2100      	movs	r1, #0
    773c:	431a      	orrs	r2, r3
    773e:	e69f      	b.n	7480 <__aeabi_dadd+0x1c0>
    7740:	2e00      	cmp	r6, #0
    7742:	d130      	bne.n	77a6 <__aeabi_dadd+0x4e6>
    7744:	0026      	movs	r6, r4
    7746:	433e      	orrs	r6, r7
    7748:	d067      	beq.n	781a <__aeabi_dadd+0x55a>
    774a:	43db      	mvns	r3, r3
    774c:	469a      	mov	sl, r3
    774e:	2b00      	cmp	r3, #0
    7750:	d01c      	beq.n	778c <__aeabi_dadd+0x4cc>
    7752:	4e61      	ldr	r6, [pc, #388]	; (78d8 <__aeabi_dadd+0x618>)
    7754:	42b0      	cmp	r0, r6
    7756:	d060      	beq.n	781a <__aeabi_dadd+0x55a>
    7758:	4653      	mov	r3, sl
    775a:	2b38      	cmp	r3, #56	; 0x38
    775c:	dd00      	ble.n	7760 <__aeabi_dadd+0x4a0>
    775e:	e096      	b.n	788e <__aeabi_dadd+0x5ce>
    7760:	2b1f      	cmp	r3, #31
    7762:	dd00      	ble.n	7766 <__aeabi_dadd+0x4a6>
    7764:	e09f      	b.n	78a6 <__aeabi_dadd+0x5e6>
    7766:	2620      	movs	r6, #32
    7768:	1af3      	subs	r3, r6, r3
    776a:	0026      	movs	r6, r4
    776c:	409e      	lsls	r6, r3
    776e:	469c      	mov	ip, r3
    7770:	46b3      	mov	fp, r6
    7772:	4653      	mov	r3, sl
    7774:	003e      	movs	r6, r7
    7776:	40de      	lsrs	r6, r3
    7778:	0033      	movs	r3, r6
    777a:	465e      	mov	r6, fp
    777c:	431e      	orrs	r6, r3
    777e:	4663      	mov	r3, ip
    7780:	409f      	lsls	r7, r3
    7782:	1e7b      	subs	r3, r7, #1
    7784:	419f      	sbcs	r7, r3
    7786:	4653      	mov	r3, sl
    7788:	40dc      	lsrs	r4, r3
    778a:	4337      	orrs	r7, r6
    778c:	18bf      	adds	r7, r7, r2
    778e:	4297      	cmp	r7, r2
    7790:	4192      	sbcs	r2, r2
    7792:	1864      	adds	r4, r4, r1
    7794:	4252      	negs	r2, r2
    7796:	18a4      	adds	r4, r4, r2
    7798:	0006      	movs	r6, r0
    779a:	e678      	b.n	748e <__aeabi_dadd+0x1ce>
    779c:	4327      	orrs	r7, r4
    779e:	1e7c      	subs	r4, r7, #1
    77a0:	41a7      	sbcs	r7, r4
    77a2:	2400      	movs	r4, #0
    77a4:	e737      	b.n	7616 <__aeabi_dadd+0x356>
    77a6:	4e4c      	ldr	r6, [pc, #304]	; (78d8 <__aeabi_dadd+0x618>)
    77a8:	42b0      	cmp	r0, r6
    77aa:	d036      	beq.n	781a <__aeabi_dadd+0x55a>
    77ac:	2680      	movs	r6, #128	; 0x80
    77ae:	425b      	negs	r3, r3
    77b0:	0436      	lsls	r6, r6, #16
    77b2:	469a      	mov	sl, r3
    77b4:	4334      	orrs	r4, r6
    77b6:	e7cf      	b.n	7758 <__aeabi_dadd+0x498>
    77b8:	0018      	movs	r0, r3
    77ba:	4310      	orrs	r0, r2
    77bc:	d100      	bne.n	77c0 <__aeabi_dadd+0x500>
    77be:	e603      	b.n	73c8 <__aeabi_dadd+0x108>
    77c0:	1ab8      	subs	r0, r7, r2
    77c2:	4684      	mov	ip, r0
    77c4:	4567      	cmp	r7, ip
    77c6:	41ad      	sbcs	r5, r5
    77c8:	1ae0      	subs	r0, r4, r3
    77ca:	426d      	negs	r5, r5
    77cc:	1b40      	subs	r0, r0, r5
    77ce:	0205      	lsls	r5, r0, #8
    77d0:	d400      	bmi.n	77d4 <__aeabi_dadd+0x514>
    77d2:	e62c      	b.n	742e <__aeabi_dadd+0x16e>
    77d4:	1bd7      	subs	r7, r2, r7
    77d6:	42ba      	cmp	r2, r7
    77d8:	4192      	sbcs	r2, r2
    77da:	1b1c      	subs	r4, r3, r4
    77dc:	4252      	negs	r2, r2
    77de:	1aa4      	subs	r4, r4, r2
    77e0:	46d8      	mov	r8, fp
    77e2:	e5f1      	b.n	73c8 <__aeabi_dadd+0x108>
    77e4:	0018      	movs	r0, r3
    77e6:	4310      	orrs	r0, r2
    77e8:	d100      	bne.n	77ec <__aeabi_dadd+0x52c>
    77ea:	e763      	b.n	76b4 <__aeabi_dadd+0x3f4>
    77ec:	08f8      	lsrs	r0, r7, #3
    77ee:	0767      	lsls	r7, r4, #29
    77f0:	4307      	orrs	r7, r0
    77f2:	2080      	movs	r0, #128	; 0x80
    77f4:	08e4      	lsrs	r4, r4, #3
    77f6:	0300      	lsls	r0, r0, #12
    77f8:	4204      	tst	r4, r0
    77fa:	d008      	beq.n	780e <__aeabi_dadd+0x54e>
    77fc:	08dd      	lsrs	r5, r3, #3
    77fe:	4205      	tst	r5, r0
    7800:	d105      	bne.n	780e <__aeabi_dadd+0x54e>
    7802:	08d2      	lsrs	r2, r2, #3
    7804:	0759      	lsls	r1, r3, #29
    7806:	4311      	orrs	r1, r2
    7808:	000f      	movs	r7, r1
    780a:	002c      	movs	r4, r5
    780c:	46d8      	mov	r8, fp
    780e:	0f7b      	lsrs	r3, r7, #29
    7810:	00e4      	lsls	r4, r4, #3
    7812:	431c      	orrs	r4, r3
    7814:	00ff      	lsls	r7, r7, #3
    7816:	4e30      	ldr	r6, [pc, #192]	; (78d8 <__aeabi_dadd+0x618>)
    7818:	e5d6      	b.n	73c8 <__aeabi_dadd+0x108>
    781a:	000c      	movs	r4, r1
    781c:	0017      	movs	r7, r2
    781e:	0006      	movs	r6, r0
    7820:	e5d2      	b.n	73c8 <__aeabi_dadd+0x108>
    7822:	2b00      	cmp	r3, #0
    7824:	d038      	beq.n	7898 <__aeabi_dadd+0x5d8>
    7826:	000b      	movs	r3, r1
    7828:	4313      	orrs	r3, r2
    782a:	d100      	bne.n	782e <__aeabi_dadd+0x56e>
    782c:	e742      	b.n	76b4 <__aeabi_dadd+0x3f4>
    782e:	08f8      	lsrs	r0, r7, #3
    7830:	0767      	lsls	r7, r4, #29
    7832:	4307      	orrs	r7, r0
    7834:	2080      	movs	r0, #128	; 0x80
    7836:	08e4      	lsrs	r4, r4, #3
    7838:	0300      	lsls	r0, r0, #12
    783a:	4204      	tst	r4, r0
    783c:	d0e7      	beq.n	780e <__aeabi_dadd+0x54e>
    783e:	08cb      	lsrs	r3, r1, #3
    7840:	4203      	tst	r3, r0
    7842:	d1e4      	bne.n	780e <__aeabi_dadd+0x54e>
    7844:	08d2      	lsrs	r2, r2, #3
    7846:	0749      	lsls	r1, r1, #29
    7848:	4311      	orrs	r1, r2
    784a:	000f      	movs	r7, r1
    784c:	001c      	movs	r4, r3
    784e:	e7de      	b.n	780e <__aeabi_dadd+0x54e>
    7850:	2700      	movs	r7, #0
    7852:	2400      	movs	r4, #0
    7854:	e5d5      	b.n	7402 <__aeabi_dadd+0x142>
    7856:	2100      	movs	r1, #0
    7858:	e76b      	b.n	7732 <__aeabi_dadd+0x472>
    785a:	2500      	movs	r5, #0
    785c:	2700      	movs	r7, #0
    785e:	e5f3      	b.n	7448 <__aeabi_dadd+0x188>
    7860:	464e      	mov	r6, r9
    7862:	0025      	movs	r5, r4
    7864:	3e20      	subs	r6, #32
    7866:	40f5      	lsrs	r5, r6
    7868:	464b      	mov	r3, r9
    786a:	002e      	movs	r6, r5
    786c:	2b20      	cmp	r3, #32
    786e:	d02d      	beq.n	78cc <__aeabi_dadd+0x60c>
    7870:	2540      	movs	r5, #64	; 0x40
    7872:	1aed      	subs	r5, r5, r3
    7874:	40ac      	lsls	r4, r5
    7876:	4327      	orrs	r7, r4
    7878:	1e7c      	subs	r4, r7, #1
    787a:	41a7      	sbcs	r7, r4
    787c:	2400      	movs	r4, #0
    787e:	4337      	orrs	r7, r6
    7880:	e6c9      	b.n	7616 <__aeabi_dadd+0x356>
    7882:	2480      	movs	r4, #128	; 0x80
    7884:	2500      	movs	r5, #0
    7886:	0324      	lsls	r4, r4, #12
    7888:	4e13      	ldr	r6, [pc, #76]	; (78d8 <__aeabi_dadd+0x618>)
    788a:	2700      	movs	r7, #0
    788c:	e5dc      	b.n	7448 <__aeabi_dadd+0x188>
    788e:	4327      	orrs	r7, r4
    7890:	1e7c      	subs	r4, r7, #1
    7892:	41a7      	sbcs	r7, r4
    7894:	2400      	movs	r4, #0
    7896:	e779      	b.n	778c <__aeabi_dadd+0x4cc>
    7898:	000c      	movs	r4, r1
    789a:	0017      	movs	r7, r2
    789c:	4e0e      	ldr	r6, [pc, #56]	; (78d8 <__aeabi_dadd+0x618>)
    789e:	e593      	b.n	73c8 <__aeabi_dadd+0x108>
    78a0:	000c      	movs	r4, r1
    78a2:	0017      	movs	r7, r2
    78a4:	e590      	b.n	73c8 <__aeabi_dadd+0x108>
    78a6:	4656      	mov	r6, sl
    78a8:	0023      	movs	r3, r4
    78aa:	3e20      	subs	r6, #32
    78ac:	40f3      	lsrs	r3, r6
    78ae:	4699      	mov	r9, r3
    78b0:	4653      	mov	r3, sl
    78b2:	2b20      	cmp	r3, #32
    78b4:	d00e      	beq.n	78d4 <__aeabi_dadd+0x614>
    78b6:	2340      	movs	r3, #64	; 0x40
    78b8:	4656      	mov	r6, sl
    78ba:	1b9b      	subs	r3, r3, r6
    78bc:	409c      	lsls	r4, r3
    78be:	4327      	orrs	r7, r4
    78c0:	1e7c      	subs	r4, r7, #1
    78c2:	41a7      	sbcs	r7, r4
    78c4:	464b      	mov	r3, r9
    78c6:	2400      	movs	r4, #0
    78c8:	431f      	orrs	r7, r3
    78ca:	e75f      	b.n	778c <__aeabi_dadd+0x4cc>
    78cc:	2400      	movs	r4, #0
    78ce:	e7d2      	b.n	7876 <__aeabi_dadd+0x5b6>
    78d0:	0017      	movs	r7, r2
    78d2:	e5b2      	b.n	743a <__aeabi_dadd+0x17a>
    78d4:	2400      	movs	r4, #0
    78d6:	e7f2      	b.n	78be <__aeabi_dadd+0x5fe>
    78d8:	000007ff 	.word	0x000007ff
    78dc:	ff7fffff 	.word	0xff7fffff

000078e0 <__aeabi_dmul>:
    78e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    78e2:	4657      	mov	r7, sl
    78e4:	4645      	mov	r5, r8
    78e6:	46de      	mov	lr, fp
    78e8:	464e      	mov	r6, r9
    78ea:	b5e0      	push	{r5, r6, r7, lr}
    78ec:	030c      	lsls	r4, r1, #12
    78ee:	4698      	mov	r8, r3
    78f0:	004e      	lsls	r6, r1, #1
    78f2:	0b23      	lsrs	r3, r4, #12
    78f4:	b087      	sub	sp, #28
    78f6:	0007      	movs	r7, r0
    78f8:	4692      	mov	sl, r2
    78fa:	469b      	mov	fp, r3
    78fc:	0d76      	lsrs	r6, r6, #21
    78fe:	0fcd      	lsrs	r5, r1, #31
    7900:	2e00      	cmp	r6, #0
    7902:	d06b      	beq.n	79dc <__aeabi_dmul+0xfc>
    7904:	4b6d      	ldr	r3, [pc, #436]	; (7abc <__aeabi_dmul+0x1dc>)
    7906:	429e      	cmp	r6, r3
    7908:	d035      	beq.n	7976 <__aeabi_dmul+0x96>
    790a:	2480      	movs	r4, #128	; 0x80
    790c:	465b      	mov	r3, fp
    790e:	0f42      	lsrs	r2, r0, #29
    7910:	0424      	lsls	r4, r4, #16
    7912:	00db      	lsls	r3, r3, #3
    7914:	4314      	orrs	r4, r2
    7916:	431c      	orrs	r4, r3
    7918:	00c3      	lsls	r3, r0, #3
    791a:	4699      	mov	r9, r3
    791c:	4b68      	ldr	r3, [pc, #416]	; (7ac0 <__aeabi_dmul+0x1e0>)
    791e:	46a3      	mov	fp, r4
    7920:	469c      	mov	ip, r3
    7922:	2300      	movs	r3, #0
    7924:	2700      	movs	r7, #0
    7926:	4466      	add	r6, ip
    7928:	9302      	str	r3, [sp, #8]
    792a:	4643      	mov	r3, r8
    792c:	031c      	lsls	r4, r3, #12
    792e:	005a      	lsls	r2, r3, #1
    7930:	0fdb      	lsrs	r3, r3, #31
    7932:	4650      	mov	r0, sl
    7934:	0b24      	lsrs	r4, r4, #12
    7936:	0d52      	lsrs	r2, r2, #21
    7938:	4698      	mov	r8, r3
    793a:	d100      	bne.n	793e <__aeabi_dmul+0x5e>
    793c:	e076      	b.n	7a2c <__aeabi_dmul+0x14c>
    793e:	4b5f      	ldr	r3, [pc, #380]	; (7abc <__aeabi_dmul+0x1dc>)
    7940:	429a      	cmp	r2, r3
    7942:	d06d      	beq.n	7a20 <__aeabi_dmul+0x140>
    7944:	2380      	movs	r3, #128	; 0x80
    7946:	0f41      	lsrs	r1, r0, #29
    7948:	041b      	lsls	r3, r3, #16
    794a:	430b      	orrs	r3, r1
    794c:	495c      	ldr	r1, [pc, #368]	; (7ac0 <__aeabi_dmul+0x1e0>)
    794e:	00e4      	lsls	r4, r4, #3
    7950:	468c      	mov	ip, r1
    7952:	431c      	orrs	r4, r3
    7954:	00c3      	lsls	r3, r0, #3
    7956:	2000      	movs	r0, #0
    7958:	4462      	add	r2, ip
    795a:	4641      	mov	r1, r8
    795c:	18b6      	adds	r6, r6, r2
    795e:	4069      	eors	r1, r5
    7960:	1c72      	adds	r2, r6, #1
    7962:	9101      	str	r1, [sp, #4]
    7964:	4694      	mov	ip, r2
    7966:	4307      	orrs	r7, r0
    7968:	2f0f      	cmp	r7, #15
    796a:	d900      	bls.n	796e <__aeabi_dmul+0x8e>
    796c:	e0b0      	b.n	7ad0 <__aeabi_dmul+0x1f0>
    796e:	4a55      	ldr	r2, [pc, #340]	; (7ac4 <__aeabi_dmul+0x1e4>)
    7970:	00bf      	lsls	r7, r7, #2
    7972:	59d2      	ldr	r2, [r2, r7]
    7974:	4697      	mov	pc, r2
    7976:	465b      	mov	r3, fp
    7978:	4303      	orrs	r3, r0
    797a:	4699      	mov	r9, r3
    797c:	d000      	beq.n	7980 <__aeabi_dmul+0xa0>
    797e:	e087      	b.n	7a90 <__aeabi_dmul+0x1b0>
    7980:	2300      	movs	r3, #0
    7982:	469b      	mov	fp, r3
    7984:	3302      	adds	r3, #2
    7986:	2708      	movs	r7, #8
    7988:	9302      	str	r3, [sp, #8]
    798a:	e7ce      	b.n	792a <__aeabi_dmul+0x4a>
    798c:	4642      	mov	r2, r8
    798e:	9201      	str	r2, [sp, #4]
    7990:	2802      	cmp	r0, #2
    7992:	d067      	beq.n	7a64 <__aeabi_dmul+0x184>
    7994:	2803      	cmp	r0, #3
    7996:	d100      	bne.n	799a <__aeabi_dmul+0xba>
    7998:	e20e      	b.n	7db8 <__aeabi_dmul+0x4d8>
    799a:	2801      	cmp	r0, #1
    799c:	d000      	beq.n	79a0 <__aeabi_dmul+0xc0>
    799e:	e162      	b.n	7c66 <__aeabi_dmul+0x386>
    79a0:	2300      	movs	r3, #0
    79a2:	2400      	movs	r4, #0
    79a4:	2200      	movs	r2, #0
    79a6:	4699      	mov	r9, r3
    79a8:	9901      	ldr	r1, [sp, #4]
    79aa:	4001      	ands	r1, r0
    79ac:	b2cd      	uxtb	r5, r1
    79ae:	2100      	movs	r1, #0
    79b0:	0312      	lsls	r2, r2, #12
    79b2:	0d0b      	lsrs	r3, r1, #20
    79b4:	0b12      	lsrs	r2, r2, #12
    79b6:	051b      	lsls	r3, r3, #20
    79b8:	4313      	orrs	r3, r2
    79ba:	4a43      	ldr	r2, [pc, #268]	; (7ac8 <__aeabi_dmul+0x1e8>)
    79bc:	0524      	lsls	r4, r4, #20
    79be:	4013      	ands	r3, r2
    79c0:	431c      	orrs	r4, r3
    79c2:	0064      	lsls	r4, r4, #1
    79c4:	07ed      	lsls	r5, r5, #31
    79c6:	0864      	lsrs	r4, r4, #1
    79c8:	432c      	orrs	r4, r5
    79ca:	4648      	mov	r0, r9
    79cc:	0021      	movs	r1, r4
    79ce:	b007      	add	sp, #28
    79d0:	bc3c      	pop	{r2, r3, r4, r5}
    79d2:	4690      	mov	r8, r2
    79d4:	4699      	mov	r9, r3
    79d6:	46a2      	mov	sl, r4
    79d8:	46ab      	mov	fp, r5
    79da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79dc:	4303      	orrs	r3, r0
    79de:	4699      	mov	r9, r3
    79e0:	d04f      	beq.n	7a82 <__aeabi_dmul+0x1a2>
    79e2:	465b      	mov	r3, fp
    79e4:	2b00      	cmp	r3, #0
    79e6:	d100      	bne.n	79ea <__aeabi_dmul+0x10a>
    79e8:	e189      	b.n	7cfe <__aeabi_dmul+0x41e>
    79ea:	4658      	mov	r0, fp
    79ec:	f000 fdc2 	bl	8574 <__clzsi2>
    79f0:	0003      	movs	r3, r0
    79f2:	3b0b      	subs	r3, #11
    79f4:	2b1c      	cmp	r3, #28
    79f6:	dd00      	ble.n	79fa <__aeabi_dmul+0x11a>
    79f8:	e17a      	b.n	7cf0 <__aeabi_dmul+0x410>
    79fa:	221d      	movs	r2, #29
    79fc:	1ad3      	subs	r3, r2, r3
    79fe:	003a      	movs	r2, r7
    7a00:	0001      	movs	r1, r0
    7a02:	465c      	mov	r4, fp
    7a04:	40da      	lsrs	r2, r3
    7a06:	3908      	subs	r1, #8
    7a08:	408c      	lsls	r4, r1
    7a0a:	0013      	movs	r3, r2
    7a0c:	408f      	lsls	r7, r1
    7a0e:	4323      	orrs	r3, r4
    7a10:	469b      	mov	fp, r3
    7a12:	46b9      	mov	r9, r7
    7a14:	2300      	movs	r3, #0
    7a16:	4e2d      	ldr	r6, [pc, #180]	; (7acc <__aeabi_dmul+0x1ec>)
    7a18:	2700      	movs	r7, #0
    7a1a:	1a36      	subs	r6, r6, r0
    7a1c:	9302      	str	r3, [sp, #8]
    7a1e:	e784      	b.n	792a <__aeabi_dmul+0x4a>
    7a20:	4653      	mov	r3, sl
    7a22:	4323      	orrs	r3, r4
    7a24:	d12a      	bne.n	7a7c <__aeabi_dmul+0x19c>
    7a26:	2400      	movs	r4, #0
    7a28:	2002      	movs	r0, #2
    7a2a:	e796      	b.n	795a <__aeabi_dmul+0x7a>
    7a2c:	4653      	mov	r3, sl
    7a2e:	4323      	orrs	r3, r4
    7a30:	d020      	beq.n	7a74 <__aeabi_dmul+0x194>
    7a32:	2c00      	cmp	r4, #0
    7a34:	d100      	bne.n	7a38 <__aeabi_dmul+0x158>
    7a36:	e157      	b.n	7ce8 <__aeabi_dmul+0x408>
    7a38:	0020      	movs	r0, r4
    7a3a:	f000 fd9b 	bl	8574 <__clzsi2>
    7a3e:	0003      	movs	r3, r0
    7a40:	3b0b      	subs	r3, #11
    7a42:	2b1c      	cmp	r3, #28
    7a44:	dd00      	ble.n	7a48 <__aeabi_dmul+0x168>
    7a46:	e149      	b.n	7cdc <__aeabi_dmul+0x3fc>
    7a48:	211d      	movs	r1, #29
    7a4a:	1acb      	subs	r3, r1, r3
    7a4c:	4651      	mov	r1, sl
    7a4e:	0002      	movs	r2, r0
    7a50:	40d9      	lsrs	r1, r3
    7a52:	4653      	mov	r3, sl
    7a54:	3a08      	subs	r2, #8
    7a56:	4094      	lsls	r4, r2
    7a58:	4093      	lsls	r3, r2
    7a5a:	430c      	orrs	r4, r1
    7a5c:	4a1b      	ldr	r2, [pc, #108]	; (7acc <__aeabi_dmul+0x1ec>)
    7a5e:	1a12      	subs	r2, r2, r0
    7a60:	2000      	movs	r0, #0
    7a62:	e77a      	b.n	795a <__aeabi_dmul+0x7a>
    7a64:	2501      	movs	r5, #1
    7a66:	9b01      	ldr	r3, [sp, #4]
    7a68:	4c14      	ldr	r4, [pc, #80]	; (7abc <__aeabi_dmul+0x1dc>)
    7a6a:	401d      	ands	r5, r3
    7a6c:	2300      	movs	r3, #0
    7a6e:	2200      	movs	r2, #0
    7a70:	4699      	mov	r9, r3
    7a72:	e79c      	b.n	79ae <__aeabi_dmul+0xce>
    7a74:	2400      	movs	r4, #0
    7a76:	2200      	movs	r2, #0
    7a78:	2001      	movs	r0, #1
    7a7a:	e76e      	b.n	795a <__aeabi_dmul+0x7a>
    7a7c:	4653      	mov	r3, sl
    7a7e:	2003      	movs	r0, #3
    7a80:	e76b      	b.n	795a <__aeabi_dmul+0x7a>
    7a82:	2300      	movs	r3, #0
    7a84:	469b      	mov	fp, r3
    7a86:	3301      	adds	r3, #1
    7a88:	2704      	movs	r7, #4
    7a8a:	2600      	movs	r6, #0
    7a8c:	9302      	str	r3, [sp, #8]
    7a8e:	e74c      	b.n	792a <__aeabi_dmul+0x4a>
    7a90:	2303      	movs	r3, #3
    7a92:	4681      	mov	r9, r0
    7a94:	270c      	movs	r7, #12
    7a96:	9302      	str	r3, [sp, #8]
    7a98:	e747      	b.n	792a <__aeabi_dmul+0x4a>
    7a9a:	2280      	movs	r2, #128	; 0x80
    7a9c:	2300      	movs	r3, #0
    7a9e:	2500      	movs	r5, #0
    7aa0:	0312      	lsls	r2, r2, #12
    7aa2:	4699      	mov	r9, r3
    7aa4:	4c05      	ldr	r4, [pc, #20]	; (7abc <__aeabi_dmul+0x1dc>)
    7aa6:	e782      	b.n	79ae <__aeabi_dmul+0xce>
    7aa8:	465c      	mov	r4, fp
    7aaa:	464b      	mov	r3, r9
    7aac:	9802      	ldr	r0, [sp, #8]
    7aae:	e76f      	b.n	7990 <__aeabi_dmul+0xb0>
    7ab0:	465c      	mov	r4, fp
    7ab2:	464b      	mov	r3, r9
    7ab4:	9501      	str	r5, [sp, #4]
    7ab6:	9802      	ldr	r0, [sp, #8]
    7ab8:	e76a      	b.n	7990 <__aeabi_dmul+0xb0>
    7aba:	46c0      	nop			; (mov r8, r8)
    7abc:	000007ff 	.word	0x000007ff
    7ac0:	fffffc01 	.word	0xfffffc01
    7ac4:	0000af88 	.word	0x0000af88
    7ac8:	800fffff 	.word	0x800fffff
    7acc:	fffffc0d 	.word	0xfffffc0d
    7ad0:	464a      	mov	r2, r9
    7ad2:	4649      	mov	r1, r9
    7ad4:	0c17      	lsrs	r7, r2, #16
    7ad6:	0c1a      	lsrs	r2, r3, #16
    7ad8:	041b      	lsls	r3, r3, #16
    7ada:	0c1b      	lsrs	r3, r3, #16
    7adc:	0408      	lsls	r0, r1, #16
    7ade:	0019      	movs	r1, r3
    7ae0:	0c00      	lsrs	r0, r0, #16
    7ae2:	4341      	muls	r1, r0
    7ae4:	0015      	movs	r5, r2
    7ae6:	4688      	mov	r8, r1
    7ae8:	0019      	movs	r1, r3
    7aea:	437d      	muls	r5, r7
    7aec:	4379      	muls	r1, r7
    7aee:	9503      	str	r5, [sp, #12]
    7af0:	4689      	mov	r9, r1
    7af2:	0029      	movs	r1, r5
    7af4:	0015      	movs	r5, r2
    7af6:	4345      	muls	r5, r0
    7af8:	444d      	add	r5, r9
    7afa:	9502      	str	r5, [sp, #8]
    7afc:	4645      	mov	r5, r8
    7afe:	0c2d      	lsrs	r5, r5, #16
    7b00:	46aa      	mov	sl, r5
    7b02:	9d02      	ldr	r5, [sp, #8]
    7b04:	4455      	add	r5, sl
    7b06:	45a9      	cmp	r9, r5
    7b08:	d906      	bls.n	7b18 <__aeabi_dmul+0x238>
    7b0a:	468a      	mov	sl, r1
    7b0c:	2180      	movs	r1, #128	; 0x80
    7b0e:	0249      	lsls	r1, r1, #9
    7b10:	4689      	mov	r9, r1
    7b12:	44ca      	add	sl, r9
    7b14:	4651      	mov	r1, sl
    7b16:	9103      	str	r1, [sp, #12]
    7b18:	0c29      	lsrs	r1, r5, #16
    7b1a:	9104      	str	r1, [sp, #16]
    7b1c:	4641      	mov	r1, r8
    7b1e:	0409      	lsls	r1, r1, #16
    7b20:	042d      	lsls	r5, r5, #16
    7b22:	0c09      	lsrs	r1, r1, #16
    7b24:	4688      	mov	r8, r1
    7b26:	0029      	movs	r1, r5
    7b28:	0c25      	lsrs	r5, r4, #16
    7b2a:	0424      	lsls	r4, r4, #16
    7b2c:	4441      	add	r1, r8
    7b2e:	0c24      	lsrs	r4, r4, #16
    7b30:	9105      	str	r1, [sp, #20]
    7b32:	0021      	movs	r1, r4
    7b34:	4341      	muls	r1, r0
    7b36:	4688      	mov	r8, r1
    7b38:	0021      	movs	r1, r4
    7b3a:	4379      	muls	r1, r7
    7b3c:	468a      	mov	sl, r1
    7b3e:	4368      	muls	r0, r5
    7b40:	4641      	mov	r1, r8
    7b42:	4450      	add	r0, sl
    7b44:	4681      	mov	r9, r0
    7b46:	0c08      	lsrs	r0, r1, #16
    7b48:	4448      	add	r0, r9
    7b4a:	436f      	muls	r7, r5
    7b4c:	4582      	cmp	sl, r0
    7b4e:	d903      	bls.n	7b58 <__aeabi_dmul+0x278>
    7b50:	2180      	movs	r1, #128	; 0x80
    7b52:	0249      	lsls	r1, r1, #9
    7b54:	4689      	mov	r9, r1
    7b56:	444f      	add	r7, r9
    7b58:	0c01      	lsrs	r1, r0, #16
    7b5a:	4689      	mov	r9, r1
    7b5c:	0039      	movs	r1, r7
    7b5e:	4449      	add	r1, r9
    7b60:	9102      	str	r1, [sp, #8]
    7b62:	4641      	mov	r1, r8
    7b64:	040f      	lsls	r7, r1, #16
    7b66:	9904      	ldr	r1, [sp, #16]
    7b68:	0c3f      	lsrs	r7, r7, #16
    7b6a:	4688      	mov	r8, r1
    7b6c:	0400      	lsls	r0, r0, #16
    7b6e:	19c0      	adds	r0, r0, r7
    7b70:	4480      	add	r8, r0
    7b72:	4641      	mov	r1, r8
    7b74:	9104      	str	r1, [sp, #16]
    7b76:	4659      	mov	r1, fp
    7b78:	0c0f      	lsrs	r7, r1, #16
    7b7a:	0409      	lsls	r1, r1, #16
    7b7c:	0c09      	lsrs	r1, r1, #16
    7b7e:	4688      	mov	r8, r1
    7b80:	4359      	muls	r1, r3
    7b82:	468a      	mov	sl, r1
    7b84:	0039      	movs	r1, r7
    7b86:	4351      	muls	r1, r2
    7b88:	4689      	mov	r9, r1
    7b8a:	4641      	mov	r1, r8
    7b8c:	434a      	muls	r2, r1
    7b8e:	4651      	mov	r1, sl
    7b90:	0c09      	lsrs	r1, r1, #16
    7b92:	468b      	mov	fp, r1
    7b94:	437b      	muls	r3, r7
    7b96:	18d2      	adds	r2, r2, r3
    7b98:	445a      	add	r2, fp
    7b9a:	4293      	cmp	r3, r2
    7b9c:	d903      	bls.n	7ba6 <__aeabi_dmul+0x2c6>
    7b9e:	2380      	movs	r3, #128	; 0x80
    7ba0:	025b      	lsls	r3, r3, #9
    7ba2:	469b      	mov	fp, r3
    7ba4:	44d9      	add	r9, fp
    7ba6:	4651      	mov	r1, sl
    7ba8:	0409      	lsls	r1, r1, #16
    7baa:	0c09      	lsrs	r1, r1, #16
    7bac:	468a      	mov	sl, r1
    7bae:	4641      	mov	r1, r8
    7bb0:	4361      	muls	r1, r4
    7bb2:	437c      	muls	r4, r7
    7bb4:	0c13      	lsrs	r3, r2, #16
    7bb6:	0412      	lsls	r2, r2, #16
    7bb8:	444b      	add	r3, r9
    7bba:	4452      	add	r2, sl
    7bbc:	46a1      	mov	r9, r4
    7bbe:	468a      	mov	sl, r1
    7bc0:	003c      	movs	r4, r7
    7bc2:	4641      	mov	r1, r8
    7bc4:	436c      	muls	r4, r5
    7bc6:	434d      	muls	r5, r1
    7bc8:	4651      	mov	r1, sl
    7bca:	444d      	add	r5, r9
    7bcc:	0c0f      	lsrs	r7, r1, #16
    7bce:	197d      	adds	r5, r7, r5
    7bd0:	45a9      	cmp	r9, r5
    7bd2:	d903      	bls.n	7bdc <__aeabi_dmul+0x2fc>
    7bd4:	2180      	movs	r1, #128	; 0x80
    7bd6:	0249      	lsls	r1, r1, #9
    7bd8:	4688      	mov	r8, r1
    7bda:	4444      	add	r4, r8
    7bdc:	9f04      	ldr	r7, [sp, #16]
    7bde:	9903      	ldr	r1, [sp, #12]
    7be0:	46b8      	mov	r8, r7
    7be2:	4441      	add	r1, r8
    7be4:	468b      	mov	fp, r1
    7be6:	4583      	cmp	fp, r0
    7be8:	4180      	sbcs	r0, r0
    7bea:	4241      	negs	r1, r0
    7bec:	4688      	mov	r8, r1
    7bee:	4651      	mov	r1, sl
    7bf0:	0408      	lsls	r0, r1, #16
    7bf2:	042f      	lsls	r7, r5, #16
    7bf4:	0c00      	lsrs	r0, r0, #16
    7bf6:	183f      	adds	r7, r7, r0
    7bf8:	4658      	mov	r0, fp
    7bfa:	9902      	ldr	r1, [sp, #8]
    7bfc:	1810      	adds	r0, r2, r0
    7bfe:	4689      	mov	r9, r1
    7c00:	4290      	cmp	r0, r2
    7c02:	4192      	sbcs	r2, r2
    7c04:	444f      	add	r7, r9
    7c06:	46ba      	mov	sl, r7
    7c08:	4252      	negs	r2, r2
    7c0a:	4699      	mov	r9, r3
    7c0c:	4693      	mov	fp, r2
    7c0e:	44c2      	add	sl, r8
    7c10:	44d1      	add	r9, sl
    7c12:	44cb      	add	fp, r9
    7c14:	428f      	cmp	r7, r1
    7c16:	41bf      	sbcs	r7, r7
    7c18:	45c2      	cmp	sl, r8
    7c1a:	4189      	sbcs	r1, r1
    7c1c:	4599      	cmp	r9, r3
    7c1e:	419b      	sbcs	r3, r3
    7c20:	4593      	cmp	fp, r2
    7c22:	4192      	sbcs	r2, r2
    7c24:	427f      	negs	r7, r7
    7c26:	4249      	negs	r1, r1
    7c28:	0c2d      	lsrs	r5, r5, #16
    7c2a:	4252      	negs	r2, r2
    7c2c:	430f      	orrs	r7, r1
    7c2e:	425b      	negs	r3, r3
    7c30:	4313      	orrs	r3, r2
    7c32:	197f      	adds	r7, r7, r5
    7c34:	18ff      	adds	r7, r7, r3
    7c36:	465b      	mov	r3, fp
    7c38:	193c      	adds	r4, r7, r4
    7c3a:	0ddb      	lsrs	r3, r3, #23
    7c3c:	9a05      	ldr	r2, [sp, #20]
    7c3e:	0264      	lsls	r4, r4, #9
    7c40:	431c      	orrs	r4, r3
    7c42:	0243      	lsls	r3, r0, #9
    7c44:	4313      	orrs	r3, r2
    7c46:	1e5d      	subs	r5, r3, #1
    7c48:	41ab      	sbcs	r3, r5
    7c4a:	465a      	mov	r2, fp
    7c4c:	0dc0      	lsrs	r0, r0, #23
    7c4e:	4303      	orrs	r3, r0
    7c50:	0252      	lsls	r2, r2, #9
    7c52:	4313      	orrs	r3, r2
    7c54:	01e2      	lsls	r2, r4, #7
    7c56:	d556      	bpl.n	7d06 <__aeabi_dmul+0x426>
    7c58:	2001      	movs	r0, #1
    7c5a:	085a      	lsrs	r2, r3, #1
    7c5c:	4003      	ands	r3, r0
    7c5e:	4313      	orrs	r3, r2
    7c60:	07e2      	lsls	r2, r4, #31
    7c62:	4313      	orrs	r3, r2
    7c64:	0864      	lsrs	r4, r4, #1
    7c66:	485a      	ldr	r0, [pc, #360]	; (7dd0 <__aeabi_dmul+0x4f0>)
    7c68:	4460      	add	r0, ip
    7c6a:	2800      	cmp	r0, #0
    7c6c:	dd4d      	ble.n	7d0a <__aeabi_dmul+0x42a>
    7c6e:	075a      	lsls	r2, r3, #29
    7c70:	d009      	beq.n	7c86 <__aeabi_dmul+0x3a6>
    7c72:	220f      	movs	r2, #15
    7c74:	401a      	ands	r2, r3
    7c76:	2a04      	cmp	r2, #4
    7c78:	d005      	beq.n	7c86 <__aeabi_dmul+0x3a6>
    7c7a:	1d1a      	adds	r2, r3, #4
    7c7c:	429a      	cmp	r2, r3
    7c7e:	419b      	sbcs	r3, r3
    7c80:	425b      	negs	r3, r3
    7c82:	18e4      	adds	r4, r4, r3
    7c84:	0013      	movs	r3, r2
    7c86:	01e2      	lsls	r2, r4, #7
    7c88:	d504      	bpl.n	7c94 <__aeabi_dmul+0x3b4>
    7c8a:	2080      	movs	r0, #128	; 0x80
    7c8c:	4a51      	ldr	r2, [pc, #324]	; (7dd4 <__aeabi_dmul+0x4f4>)
    7c8e:	00c0      	lsls	r0, r0, #3
    7c90:	4014      	ands	r4, r2
    7c92:	4460      	add	r0, ip
    7c94:	4a50      	ldr	r2, [pc, #320]	; (7dd8 <__aeabi_dmul+0x4f8>)
    7c96:	4290      	cmp	r0, r2
    7c98:	dd00      	ble.n	7c9c <__aeabi_dmul+0x3bc>
    7c9a:	e6e3      	b.n	7a64 <__aeabi_dmul+0x184>
    7c9c:	2501      	movs	r5, #1
    7c9e:	08db      	lsrs	r3, r3, #3
    7ca0:	0762      	lsls	r2, r4, #29
    7ca2:	431a      	orrs	r2, r3
    7ca4:	0264      	lsls	r4, r4, #9
    7ca6:	9b01      	ldr	r3, [sp, #4]
    7ca8:	4691      	mov	r9, r2
    7caa:	0b22      	lsrs	r2, r4, #12
    7cac:	0544      	lsls	r4, r0, #21
    7cae:	0d64      	lsrs	r4, r4, #21
    7cb0:	401d      	ands	r5, r3
    7cb2:	e67c      	b.n	79ae <__aeabi_dmul+0xce>
    7cb4:	2280      	movs	r2, #128	; 0x80
    7cb6:	4659      	mov	r1, fp
    7cb8:	0312      	lsls	r2, r2, #12
    7cba:	4211      	tst	r1, r2
    7cbc:	d008      	beq.n	7cd0 <__aeabi_dmul+0x3f0>
    7cbe:	4214      	tst	r4, r2
    7cc0:	d106      	bne.n	7cd0 <__aeabi_dmul+0x3f0>
    7cc2:	4322      	orrs	r2, r4
    7cc4:	0312      	lsls	r2, r2, #12
    7cc6:	0b12      	lsrs	r2, r2, #12
    7cc8:	4645      	mov	r5, r8
    7cca:	4699      	mov	r9, r3
    7ccc:	4c43      	ldr	r4, [pc, #268]	; (7ddc <__aeabi_dmul+0x4fc>)
    7cce:	e66e      	b.n	79ae <__aeabi_dmul+0xce>
    7cd0:	465b      	mov	r3, fp
    7cd2:	431a      	orrs	r2, r3
    7cd4:	0312      	lsls	r2, r2, #12
    7cd6:	0b12      	lsrs	r2, r2, #12
    7cd8:	4c40      	ldr	r4, [pc, #256]	; (7ddc <__aeabi_dmul+0x4fc>)
    7cda:	e668      	b.n	79ae <__aeabi_dmul+0xce>
    7cdc:	0003      	movs	r3, r0
    7cde:	4654      	mov	r4, sl
    7ce0:	3b28      	subs	r3, #40	; 0x28
    7ce2:	409c      	lsls	r4, r3
    7ce4:	2300      	movs	r3, #0
    7ce6:	e6b9      	b.n	7a5c <__aeabi_dmul+0x17c>
    7ce8:	f000 fc44 	bl	8574 <__clzsi2>
    7cec:	3020      	adds	r0, #32
    7cee:	e6a6      	b.n	7a3e <__aeabi_dmul+0x15e>
    7cf0:	0003      	movs	r3, r0
    7cf2:	3b28      	subs	r3, #40	; 0x28
    7cf4:	409f      	lsls	r7, r3
    7cf6:	2300      	movs	r3, #0
    7cf8:	46bb      	mov	fp, r7
    7cfa:	4699      	mov	r9, r3
    7cfc:	e68a      	b.n	7a14 <__aeabi_dmul+0x134>
    7cfe:	f000 fc39 	bl	8574 <__clzsi2>
    7d02:	3020      	adds	r0, #32
    7d04:	e674      	b.n	79f0 <__aeabi_dmul+0x110>
    7d06:	46b4      	mov	ip, r6
    7d08:	e7ad      	b.n	7c66 <__aeabi_dmul+0x386>
    7d0a:	2501      	movs	r5, #1
    7d0c:	1a2a      	subs	r2, r5, r0
    7d0e:	2a38      	cmp	r2, #56	; 0x38
    7d10:	dd06      	ble.n	7d20 <__aeabi_dmul+0x440>
    7d12:	9b01      	ldr	r3, [sp, #4]
    7d14:	2400      	movs	r4, #0
    7d16:	401d      	ands	r5, r3
    7d18:	2300      	movs	r3, #0
    7d1a:	2200      	movs	r2, #0
    7d1c:	4699      	mov	r9, r3
    7d1e:	e646      	b.n	79ae <__aeabi_dmul+0xce>
    7d20:	2a1f      	cmp	r2, #31
    7d22:	dc21      	bgt.n	7d68 <__aeabi_dmul+0x488>
    7d24:	2520      	movs	r5, #32
    7d26:	0020      	movs	r0, r4
    7d28:	1aad      	subs	r5, r5, r2
    7d2a:	001e      	movs	r6, r3
    7d2c:	40ab      	lsls	r3, r5
    7d2e:	40a8      	lsls	r0, r5
    7d30:	40d6      	lsrs	r6, r2
    7d32:	1e5d      	subs	r5, r3, #1
    7d34:	41ab      	sbcs	r3, r5
    7d36:	4330      	orrs	r0, r6
    7d38:	4318      	orrs	r0, r3
    7d3a:	40d4      	lsrs	r4, r2
    7d3c:	0743      	lsls	r3, r0, #29
    7d3e:	d009      	beq.n	7d54 <__aeabi_dmul+0x474>
    7d40:	230f      	movs	r3, #15
    7d42:	4003      	ands	r3, r0
    7d44:	2b04      	cmp	r3, #4
    7d46:	d005      	beq.n	7d54 <__aeabi_dmul+0x474>
    7d48:	0003      	movs	r3, r0
    7d4a:	1d18      	adds	r0, r3, #4
    7d4c:	4298      	cmp	r0, r3
    7d4e:	419b      	sbcs	r3, r3
    7d50:	425b      	negs	r3, r3
    7d52:	18e4      	adds	r4, r4, r3
    7d54:	0223      	lsls	r3, r4, #8
    7d56:	d521      	bpl.n	7d9c <__aeabi_dmul+0x4bc>
    7d58:	2501      	movs	r5, #1
    7d5a:	9b01      	ldr	r3, [sp, #4]
    7d5c:	2401      	movs	r4, #1
    7d5e:	401d      	ands	r5, r3
    7d60:	2300      	movs	r3, #0
    7d62:	2200      	movs	r2, #0
    7d64:	4699      	mov	r9, r3
    7d66:	e622      	b.n	79ae <__aeabi_dmul+0xce>
    7d68:	251f      	movs	r5, #31
    7d6a:	0021      	movs	r1, r4
    7d6c:	426d      	negs	r5, r5
    7d6e:	1a28      	subs	r0, r5, r0
    7d70:	40c1      	lsrs	r1, r0
    7d72:	0008      	movs	r0, r1
    7d74:	2a20      	cmp	r2, #32
    7d76:	d01d      	beq.n	7db4 <__aeabi_dmul+0x4d4>
    7d78:	355f      	adds	r5, #95	; 0x5f
    7d7a:	1aaa      	subs	r2, r5, r2
    7d7c:	4094      	lsls	r4, r2
    7d7e:	4323      	orrs	r3, r4
    7d80:	1e5c      	subs	r4, r3, #1
    7d82:	41a3      	sbcs	r3, r4
    7d84:	2507      	movs	r5, #7
    7d86:	4303      	orrs	r3, r0
    7d88:	401d      	ands	r5, r3
    7d8a:	2200      	movs	r2, #0
    7d8c:	2d00      	cmp	r5, #0
    7d8e:	d009      	beq.n	7da4 <__aeabi_dmul+0x4c4>
    7d90:	220f      	movs	r2, #15
    7d92:	2400      	movs	r4, #0
    7d94:	401a      	ands	r2, r3
    7d96:	0018      	movs	r0, r3
    7d98:	2a04      	cmp	r2, #4
    7d9a:	d1d6      	bne.n	7d4a <__aeabi_dmul+0x46a>
    7d9c:	0003      	movs	r3, r0
    7d9e:	0765      	lsls	r5, r4, #29
    7da0:	0264      	lsls	r4, r4, #9
    7da2:	0b22      	lsrs	r2, r4, #12
    7da4:	08db      	lsrs	r3, r3, #3
    7da6:	432b      	orrs	r3, r5
    7da8:	2501      	movs	r5, #1
    7daa:	4699      	mov	r9, r3
    7dac:	9b01      	ldr	r3, [sp, #4]
    7dae:	2400      	movs	r4, #0
    7db0:	401d      	ands	r5, r3
    7db2:	e5fc      	b.n	79ae <__aeabi_dmul+0xce>
    7db4:	2400      	movs	r4, #0
    7db6:	e7e2      	b.n	7d7e <__aeabi_dmul+0x49e>
    7db8:	2280      	movs	r2, #128	; 0x80
    7dba:	2501      	movs	r5, #1
    7dbc:	0312      	lsls	r2, r2, #12
    7dbe:	4322      	orrs	r2, r4
    7dc0:	9901      	ldr	r1, [sp, #4]
    7dc2:	0312      	lsls	r2, r2, #12
    7dc4:	0b12      	lsrs	r2, r2, #12
    7dc6:	400d      	ands	r5, r1
    7dc8:	4699      	mov	r9, r3
    7dca:	4c04      	ldr	r4, [pc, #16]	; (7ddc <__aeabi_dmul+0x4fc>)
    7dcc:	e5ef      	b.n	79ae <__aeabi_dmul+0xce>
    7dce:	46c0      	nop			; (mov r8, r8)
    7dd0:	000003ff 	.word	0x000003ff
    7dd4:	feffffff 	.word	0xfeffffff
    7dd8:	000007fe 	.word	0x000007fe
    7ddc:	000007ff 	.word	0x000007ff

00007de0 <__aeabi_dsub>:
    7de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7de2:	4646      	mov	r6, r8
    7de4:	46d6      	mov	lr, sl
    7de6:	464f      	mov	r7, r9
    7de8:	030c      	lsls	r4, r1, #12
    7dea:	b5c0      	push	{r6, r7, lr}
    7dec:	0fcd      	lsrs	r5, r1, #31
    7dee:	004e      	lsls	r6, r1, #1
    7df0:	0a61      	lsrs	r1, r4, #9
    7df2:	0f44      	lsrs	r4, r0, #29
    7df4:	430c      	orrs	r4, r1
    7df6:	00c1      	lsls	r1, r0, #3
    7df8:	0058      	lsls	r0, r3, #1
    7dfa:	0d40      	lsrs	r0, r0, #21
    7dfc:	4684      	mov	ip, r0
    7dfe:	468a      	mov	sl, r1
    7e00:	000f      	movs	r7, r1
    7e02:	0319      	lsls	r1, r3, #12
    7e04:	0f50      	lsrs	r0, r2, #29
    7e06:	0a49      	lsrs	r1, r1, #9
    7e08:	4301      	orrs	r1, r0
    7e0a:	48c6      	ldr	r0, [pc, #792]	; (8124 <__aeabi_dsub+0x344>)
    7e0c:	0d76      	lsrs	r6, r6, #21
    7e0e:	46a8      	mov	r8, r5
    7e10:	0fdb      	lsrs	r3, r3, #31
    7e12:	00d2      	lsls	r2, r2, #3
    7e14:	4584      	cmp	ip, r0
    7e16:	d100      	bne.n	7e1a <__aeabi_dsub+0x3a>
    7e18:	e0d8      	b.n	7fcc <__aeabi_dsub+0x1ec>
    7e1a:	2001      	movs	r0, #1
    7e1c:	4043      	eors	r3, r0
    7e1e:	42ab      	cmp	r3, r5
    7e20:	d100      	bne.n	7e24 <__aeabi_dsub+0x44>
    7e22:	e0a6      	b.n	7f72 <__aeabi_dsub+0x192>
    7e24:	4660      	mov	r0, ip
    7e26:	1a35      	subs	r5, r6, r0
    7e28:	2d00      	cmp	r5, #0
    7e2a:	dc00      	bgt.n	7e2e <__aeabi_dsub+0x4e>
    7e2c:	e105      	b.n	803a <__aeabi_dsub+0x25a>
    7e2e:	2800      	cmp	r0, #0
    7e30:	d110      	bne.n	7e54 <__aeabi_dsub+0x74>
    7e32:	000b      	movs	r3, r1
    7e34:	4313      	orrs	r3, r2
    7e36:	d100      	bne.n	7e3a <__aeabi_dsub+0x5a>
    7e38:	e0d7      	b.n	7fea <__aeabi_dsub+0x20a>
    7e3a:	1e6b      	subs	r3, r5, #1
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d000      	beq.n	7e42 <__aeabi_dsub+0x62>
    7e40:	e14b      	b.n	80da <__aeabi_dsub+0x2fa>
    7e42:	4653      	mov	r3, sl
    7e44:	1a9f      	subs	r7, r3, r2
    7e46:	45ba      	cmp	sl, r7
    7e48:	4180      	sbcs	r0, r0
    7e4a:	1a64      	subs	r4, r4, r1
    7e4c:	4240      	negs	r0, r0
    7e4e:	1a24      	subs	r4, r4, r0
    7e50:	2601      	movs	r6, #1
    7e52:	e01e      	b.n	7e92 <__aeabi_dsub+0xb2>
    7e54:	4bb3      	ldr	r3, [pc, #716]	; (8124 <__aeabi_dsub+0x344>)
    7e56:	429e      	cmp	r6, r3
    7e58:	d048      	beq.n	7eec <__aeabi_dsub+0x10c>
    7e5a:	2380      	movs	r3, #128	; 0x80
    7e5c:	041b      	lsls	r3, r3, #16
    7e5e:	4319      	orrs	r1, r3
    7e60:	2d38      	cmp	r5, #56	; 0x38
    7e62:	dd00      	ble.n	7e66 <__aeabi_dsub+0x86>
    7e64:	e119      	b.n	809a <__aeabi_dsub+0x2ba>
    7e66:	2d1f      	cmp	r5, #31
    7e68:	dd00      	ble.n	7e6c <__aeabi_dsub+0x8c>
    7e6a:	e14c      	b.n	8106 <__aeabi_dsub+0x326>
    7e6c:	2320      	movs	r3, #32
    7e6e:	000f      	movs	r7, r1
    7e70:	1b5b      	subs	r3, r3, r5
    7e72:	0010      	movs	r0, r2
    7e74:	409a      	lsls	r2, r3
    7e76:	409f      	lsls	r7, r3
    7e78:	40e8      	lsrs	r0, r5
    7e7a:	1e53      	subs	r3, r2, #1
    7e7c:	419a      	sbcs	r2, r3
    7e7e:	40e9      	lsrs	r1, r5
    7e80:	4307      	orrs	r7, r0
    7e82:	4317      	orrs	r7, r2
    7e84:	4653      	mov	r3, sl
    7e86:	1bdf      	subs	r7, r3, r7
    7e88:	1a61      	subs	r1, r4, r1
    7e8a:	45ba      	cmp	sl, r7
    7e8c:	41a4      	sbcs	r4, r4
    7e8e:	4264      	negs	r4, r4
    7e90:	1b0c      	subs	r4, r1, r4
    7e92:	0223      	lsls	r3, r4, #8
    7e94:	d400      	bmi.n	7e98 <__aeabi_dsub+0xb8>
    7e96:	e0c5      	b.n	8024 <__aeabi_dsub+0x244>
    7e98:	0264      	lsls	r4, r4, #9
    7e9a:	0a65      	lsrs	r5, r4, #9
    7e9c:	2d00      	cmp	r5, #0
    7e9e:	d100      	bne.n	7ea2 <__aeabi_dsub+0xc2>
    7ea0:	e0f6      	b.n	8090 <__aeabi_dsub+0x2b0>
    7ea2:	0028      	movs	r0, r5
    7ea4:	f000 fb66 	bl	8574 <__clzsi2>
    7ea8:	0003      	movs	r3, r0
    7eaa:	3b08      	subs	r3, #8
    7eac:	2b1f      	cmp	r3, #31
    7eae:	dd00      	ble.n	7eb2 <__aeabi_dsub+0xd2>
    7eb0:	e0e9      	b.n	8086 <__aeabi_dsub+0x2a6>
    7eb2:	2220      	movs	r2, #32
    7eb4:	003c      	movs	r4, r7
    7eb6:	1ad2      	subs	r2, r2, r3
    7eb8:	409d      	lsls	r5, r3
    7eba:	40d4      	lsrs	r4, r2
    7ebc:	409f      	lsls	r7, r3
    7ebe:	4325      	orrs	r5, r4
    7ec0:	429e      	cmp	r6, r3
    7ec2:	dd00      	ble.n	7ec6 <__aeabi_dsub+0xe6>
    7ec4:	e0db      	b.n	807e <__aeabi_dsub+0x29e>
    7ec6:	1b9e      	subs	r6, r3, r6
    7ec8:	1c73      	adds	r3, r6, #1
    7eca:	2b1f      	cmp	r3, #31
    7ecc:	dd00      	ble.n	7ed0 <__aeabi_dsub+0xf0>
    7ece:	e10a      	b.n	80e6 <__aeabi_dsub+0x306>
    7ed0:	2220      	movs	r2, #32
    7ed2:	0038      	movs	r0, r7
    7ed4:	1ad2      	subs	r2, r2, r3
    7ed6:	0029      	movs	r1, r5
    7ed8:	4097      	lsls	r7, r2
    7eda:	002c      	movs	r4, r5
    7edc:	4091      	lsls	r1, r2
    7ede:	40d8      	lsrs	r0, r3
    7ee0:	1e7a      	subs	r2, r7, #1
    7ee2:	4197      	sbcs	r7, r2
    7ee4:	40dc      	lsrs	r4, r3
    7ee6:	2600      	movs	r6, #0
    7ee8:	4301      	orrs	r1, r0
    7eea:	430f      	orrs	r7, r1
    7eec:	077b      	lsls	r3, r7, #29
    7eee:	d009      	beq.n	7f04 <__aeabi_dsub+0x124>
    7ef0:	230f      	movs	r3, #15
    7ef2:	403b      	ands	r3, r7
    7ef4:	2b04      	cmp	r3, #4
    7ef6:	d005      	beq.n	7f04 <__aeabi_dsub+0x124>
    7ef8:	1d3b      	adds	r3, r7, #4
    7efa:	42bb      	cmp	r3, r7
    7efc:	41bf      	sbcs	r7, r7
    7efe:	427f      	negs	r7, r7
    7f00:	19e4      	adds	r4, r4, r7
    7f02:	001f      	movs	r7, r3
    7f04:	0223      	lsls	r3, r4, #8
    7f06:	d525      	bpl.n	7f54 <__aeabi_dsub+0x174>
    7f08:	4b86      	ldr	r3, [pc, #536]	; (8124 <__aeabi_dsub+0x344>)
    7f0a:	3601      	adds	r6, #1
    7f0c:	429e      	cmp	r6, r3
    7f0e:	d100      	bne.n	7f12 <__aeabi_dsub+0x132>
    7f10:	e0af      	b.n	8072 <__aeabi_dsub+0x292>
    7f12:	4b85      	ldr	r3, [pc, #532]	; (8128 <__aeabi_dsub+0x348>)
    7f14:	2501      	movs	r5, #1
    7f16:	401c      	ands	r4, r3
    7f18:	4643      	mov	r3, r8
    7f1a:	0762      	lsls	r2, r4, #29
    7f1c:	08ff      	lsrs	r7, r7, #3
    7f1e:	0264      	lsls	r4, r4, #9
    7f20:	0576      	lsls	r6, r6, #21
    7f22:	4317      	orrs	r7, r2
    7f24:	0b24      	lsrs	r4, r4, #12
    7f26:	0d76      	lsrs	r6, r6, #21
    7f28:	401d      	ands	r5, r3
    7f2a:	2100      	movs	r1, #0
    7f2c:	0324      	lsls	r4, r4, #12
    7f2e:	0b23      	lsrs	r3, r4, #12
    7f30:	0d0c      	lsrs	r4, r1, #20
    7f32:	4a7e      	ldr	r2, [pc, #504]	; (812c <__aeabi_dsub+0x34c>)
    7f34:	0524      	lsls	r4, r4, #20
    7f36:	431c      	orrs	r4, r3
    7f38:	4014      	ands	r4, r2
    7f3a:	0533      	lsls	r3, r6, #20
    7f3c:	4323      	orrs	r3, r4
    7f3e:	005b      	lsls	r3, r3, #1
    7f40:	07ed      	lsls	r5, r5, #31
    7f42:	085b      	lsrs	r3, r3, #1
    7f44:	432b      	orrs	r3, r5
    7f46:	0038      	movs	r0, r7
    7f48:	0019      	movs	r1, r3
    7f4a:	bc1c      	pop	{r2, r3, r4}
    7f4c:	4690      	mov	r8, r2
    7f4e:	4699      	mov	r9, r3
    7f50:	46a2      	mov	sl, r4
    7f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f54:	2501      	movs	r5, #1
    7f56:	4643      	mov	r3, r8
    7f58:	0762      	lsls	r2, r4, #29
    7f5a:	08ff      	lsrs	r7, r7, #3
    7f5c:	4317      	orrs	r7, r2
    7f5e:	08e4      	lsrs	r4, r4, #3
    7f60:	401d      	ands	r5, r3
    7f62:	4b70      	ldr	r3, [pc, #448]	; (8124 <__aeabi_dsub+0x344>)
    7f64:	429e      	cmp	r6, r3
    7f66:	d036      	beq.n	7fd6 <__aeabi_dsub+0x1f6>
    7f68:	0324      	lsls	r4, r4, #12
    7f6a:	0576      	lsls	r6, r6, #21
    7f6c:	0b24      	lsrs	r4, r4, #12
    7f6e:	0d76      	lsrs	r6, r6, #21
    7f70:	e7db      	b.n	7f2a <__aeabi_dsub+0x14a>
    7f72:	4663      	mov	r3, ip
    7f74:	1af3      	subs	r3, r6, r3
    7f76:	2b00      	cmp	r3, #0
    7f78:	dc00      	bgt.n	7f7c <__aeabi_dsub+0x19c>
    7f7a:	e094      	b.n	80a6 <__aeabi_dsub+0x2c6>
    7f7c:	4660      	mov	r0, ip
    7f7e:	2800      	cmp	r0, #0
    7f80:	d035      	beq.n	7fee <__aeabi_dsub+0x20e>
    7f82:	4868      	ldr	r0, [pc, #416]	; (8124 <__aeabi_dsub+0x344>)
    7f84:	4286      	cmp	r6, r0
    7f86:	d0b1      	beq.n	7eec <__aeabi_dsub+0x10c>
    7f88:	2780      	movs	r7, #128	; 0x80
    7f8a:	043f      	lsls	r7, r7, #16
    7f8c:	4339      	orrs	r1, r7
    7f8e:	2b38      	cmp	r3, #56	; 0x38
    7f90:	dc00      	bgt.n	7f94 <__aeabi_dsub+0x1b4>
    7f92:	e0fd      	b.n	8190 <__aeabi_dsub+0x3b0>
    7f94:	430a      	orrs	r2, r1
    7f96:	0017      	movs	r7, r2
    7f98:	2100      	movs	r1, #0
    7f9a:	1e7a      	subs	r2, r7, #1
    7f9c:	4197      	sbcs	r7, r2
    7f9e:	4457      	add	r7, sl
    7fa0:	4557      	cmp	r7, sl
    7fa2:	4180      	sbcs	r0, r0
    7fa4:	1909      	adds	r1, r1, r4
    7fa6:	4244      	negs	r4, r0
    7fa8:	190c      	adds	r4, r1, r4
    7faa:	0223      	lsls	r3, r4, #8
    7fac:	d53a      	bpl.n	8024 <__aeabi_dsub+0x244>
    7fae:	4b5d      	ldr	r3, [pc, #372]	; (8124 <__aeabi_dsub+0x344>)
    7fb0:	3601      	adds	r6, #1
    7fb2:	429e      	cmp	r6, r3
    7fb4:	d100      	bne.n	7fb8 <__aeabi_dsub+0x1d8>
    7fb6:	e14b      	b.n	8250 <__aeabi_dsub+0x470>
    7fb8:	2201      	movs	r2, #1
    7fba:	4b5b      	ldr	r3, [pc, #364]	; (8128 <__aeabi_dsub+0x348>)
    7fbc:	401c      	ands	r4, r3
    7fbe:	087b      	lsrs	r3, r7, #1
    7fc0:	4017      	ands	r7, r2
    7fc2:	431f      	orrs	r7, r3
    7fc4:	07e2      	lsls	r2, r4, #31
    7fc6:	4317      	orrs	r7, r2
    7fc8:	0864      	lsrs	r4, r4, #1
    7fca:	e78f      	b.n	7eec <__aeabi_dsub+0x10c>
    7fcc:	0008      	movs	r0, r1
    7fce:	4310      	orrs	r0, r2
    7fd0:	d000      	beq.n	7fd4 <__aeabi_dsub+0x1f4>
    7fd2:	e724      	b.n	7e1e <__aeabi_dsub+0x3e>
    7fd4:	e721      	b.n	7e1a <__aeabi_dsub+0x3a>
    7fd6:	0023      	movs	r3, r4
    7fd8:	433b      	orrs	r3, r7
    7fda:	d100      	bne.n	7fde <__aeabi_dsub+0x1fe>
    7fdc:	e1b9      	b.n	8352 <__aeabi_dsub+0x572>
    7fde:	2280      	movs	r2, #128	; 0x80
    7fe0:	0312      	lsls	r2, r2, #12
    7fe2:	4314      	orrs	r4, r2
    7fe4:	0324      	lsls	r4, r4, #12
    7fe6:	0b24      	lsrs	r4, r4, #12
    7fe8:	e79f      	b.n	7f2a <__aeabi_dsub+0x14a>
    7fea:	002e      	movs	r6, r5
    7fec:	e77e      	b.n	7eec <__aeabi_dsub+0x10c>
    7fee:	0008      	movs	r0, r1
    7ff0:	4310      	orrs	r0, r2
    7ff2:	d100      	bne.n	7ff6 <__aeabi_dsub+0x216>
    7ff4:	e0ca      	b.n	818c <__aeabi_dsub+0x3ac>
    7ff6:	1e58      	subs	r0, r3, #1
    7ff8:	4684      	mov	ip, r0
    7ffa:	2800      	cmp	r0, #0
    7ffc:	d000      	beq.n	8000 <__aeabi_dsub+0x220>
    7ffe:	e0e7      	b.n	81d0 <__aeabi_dsub+0x3f0>
    8000:	4452      	add	r2, sl
    8002:	4552      	cmp	r2, sl
    8004:	4180      	sbcs	r0, r0
    8006:	1864      	adds	r4, r4, r1
    8008:	4240      	negs	r0, r0
    800a:	1824      	adds	r4, r4, r0
    800c:	0017      	movs	r7, r2
    800e:	2601      	movs	r6, #1
    8010:	0223      	lsls	r3, r4, #8
    8012:	d507      	bpl.n	8024 <__aeabi_dsub+0x244>
    8014:	2602      	movs	r6, #2
    8016:	e7cf      	b.n	7fb8 <__aeabi_dsub+0x1d8>
    8018:	4664      	mov	r4, ip
    801a:	432c      	orrs	r4, r5
    801c:	d100      	bne.n	8020 <__aeabi_dsub+0x240>
    801e:	e1b3      	b.n	8388 <__aeabi_dsub+0x5a8>
    8020:	002c      	movs	r4, r5
    8022:	4667      	mov	r7, ip
    8024:	077b      	lsls	r3, r7, #29
    8026:	d000      	beq.n	802a <__aeabi_dsub+0x24a>
    8028:	e762      	b.n	7ef0 <__aeabi_dsub+0x110>
    802a:	0763      	lsls	r3, r4, #29
    802c:	08ff      	lsrs	r7, r7, #3
    802e:	431f      	orrs	r7, r3
    8030:	2501      	movs	r5, #1
    8032:	4643      	mov	r3, r8
    8034:	08e4      	lsrs	r4, r4, #3
    8036:	401d      	ands	r5, r3
    8038:	e793      	b.n	7f62 <__aeabi_dsub+0x182>
    803a:	2d00      	cmp	r5, #0
    803c:	d178      	bne.n	8130 <__aeabi_dsub+0x350>
    803e:	1c75      	adds	r5, r6, #1
    8040:	056d      	lsls	r5, r5, #21
    8042:	0d6d      	lsrs	r5, r5, #21
    8044:	2d01      	cmp	r5, #1
    8046:	dc00      	bgt.n	804a <__aeabi_dsub+0x26a>
    8048:	e0f2      	b.n	8230 <__aeabi_dsub+0x450>
    804a:	4650      	mov	r0, sl
    804c:	1a80      	subs	r0, r0, r2
    804e:	4582      	cmp	sl, r0
    8050:	41bf      	sbcs	r7, r7
    8052:	1a65      	subs	r5, r4, r1
    8054:	427f      	negs	r7, r7
    8056:	1bed      	subs	r5, r5, r7
    8058:	4684      	mov	ip, r0
    805a:	0228      	lsls	r0, r5, #8
    805c:	d400      	bmi.n	8060 <__aeabi_dsub+0x280>
    805e:	e08c      	b.n	817a <__aeabi_dsub+0x39a>
    8060:	4650      	mov	r0, sl
    8062:	1a17      	subs	r7, r2, r0
    8064:	42ba      	cmp	r2, r7
    8066:	4192      	sbcs	r2, r2
    8068:	1b0c      	subs	r4, r1, r4
    806a:	4255      	negs	r5, r2
    806c:	1b65      	subs	r5, r4, r5
    806e:	4698      	mov	r8, r3
    8070:	e714      	b.n	7e9c <__aeabi_dsub+0xbc>
    8072:	2501      	movs	r5, #1
    8074:	4643      	mov	r3, r8
    8076:	2400      	movs	r4, #0
    8078:	401d      	ands	r5, r3
    807a:	2700      	movs	r7, #0
    807c:	e755      	b.n	7f2a <__aeabi_dsub+0x14a>
    807e:	4c2a      	ldr	r4, [pc, #168]	; (8128 <__aeabi_dsub+0x348>)
    8080:	1af6      	subs	r6, r6, r3
    8082:	402c      	ands	r4, r5
    8084:	e732      	b.n	7eec <__aeabi_dsub+0x10c>
    8086:	003d      	movs	r5, r7
    8088:	3828      	subs	r0, #40	; 0x28
    808a:	4085      	lsls	r5, r0
    808c:	2700      	movs	r7, #0
    808e:	e717      	b.n	7ec0 <__aeabi_dsub+0xe0>
    8090:	0038      	movs	r0, r7
    8092:	f000 fa6f 	bl	8574 <__clzsi2>
    8096:	3020      	adds	r0, #32
    8098:	e706      	b.n	7ea8 <__aeabi_dsub+0xc8>
    809a:	430a      	orrs	r2, r1
    809c:	0017      	movs	r7, r2
    809e:	2100      	movs	r1, #0
    80a0:	1e7a      	subs	r2, r7, #1
    80a2:	4197      	sbcs	r7, r2
    80a4:	e6ee      	b.n	7e84 <__aeabi_dsub+0xa4>
    80a6:	2b00      	cmp	r3, #0
    80a8:	d000      	beq.n	80ac <__aeabi_dsub+0x2cc>
    80aa:	e0e5      	b.n	8278 <__aeabi_dsub+0x498>
    80ac:	1c73      	adds	r3, r6, #1
    80ae:	469c      	mov	ip, r3
    80b0:	055b      	lsls	r3, r3, #21
    80b2:	0d5b      	lsrs	r3, r3, #21
    80b4:	2b01      	cmp	r3, #1
    80b6:	dc00      	bgt.n	80ba <__aeabi_dsub+0x2da>
    80b8:	e09f      	b.n	81fa <__aeabi_dsub+0x41a>
    80ba:	4b1a      	ldr	r3, [pc, #104]	; (8124 <__aeabi_dsub+0x344>)
    80bc:	459c      	cmp	ip, r3
    80be:	d100      	bne.n	80c2 <__aeabi_dsub+0x2e2>
    80c0:	e0c5      	b.n	824e <__aeabi_dsub+0x46e>
    80c2:	4452      	add	r2, sl
    80c4:	4552      	cmp	r2, sl
    80c6:	4180      	sbcs	r0, r0
    80c8:	1864      	adds	r4, r4, r1
    80ca:	4240      	negs	r0, r0
    80cc:	1824      	adds	r4, r4, r0
    80ce:	07e7      	lsls	r7, r4, #31
    80d0:	0852      	lsrs	r2, r2, #1
    80d2:	4317      	orrs	r7, r2
    80d4:	0864      	lsrs	r4, r4, #1
    80d6:	4666      	mov	r6, ip
    80d8:	e708      	b.n	7eec <__aeabi_dsub+0x10c>
    80da:	4812      	ldr	r0, [pc, #72]	; (8124 <__aeabi_dsub+0x344>)
    80dc:	4285      	cmp	r5, r0
    80de:	d100      	bne.n	80e2 <__aeabi_dsub+0x302>
    80e0:	e085      	b.n	81ee <__aeabi_dsub+0x40e>
    80e2:	001d      	movs	r5, r3
    80e4:	e6bc      	b.n	7e60 <__aeabi_dsub+0x80>
    80e6:	0029      	movs	r1, r5
    80e8:	3e1f      	subs	r6, #31
    80ea:	40f1      	lsrs	r1, r6
    80ec:	2b20      	cmp	r3, #32
    80ee:	d100      	bne.n	80f2 <__aeabi_dsub+0x312>
    80f0:	e07f      	b.n	81f2 <__aeabi_dsub+0x412>
    80f2:	2240      	movs	r2, #64	; 0x40
    80f4:	1ad3      	subs	r3, r2, r3
    80f6:	409d      	lsls	r5, r3
    80f8:	432f      	orrs	r7, r5
    80fa:	1e7d      	subs	r5, r7, #1
    80fc:	41af      	sbcs	r7, r5
    80fe:	2400      	movs	r4, #0
    8100:	430f      	orrs	r7, r1
    8102:	2600      	movs	r6, #0
    8104:	e78e      	b.n	8024 <__aeabi_dsub+0x244>
    8106:	002b      	movs	r3, r5
    8108:	000f      	movs	r7, r1
    810a:	3b20      	subs	r3, #32
    810c:	40df      	lsrs	r7, r3
    810e:	2d20      	cmp	r5, #32
    8110:	d071      	beq.n	81f6 <__aeabi_dsub+0x416>
    8112:	2340      	movs	r3, #64	; 0x40
    8114:	1b5d      	subs	r5, r3, r5
    8116:	40a9      	lsls	r1, r5
    8118:	430a      	orrs	r2, r1
    811a:	1e51      	subs	r1, r2, #1
    811c:	418a      	sbcs	r2, r1
    811e:	2100      	movs	r1, #0
    8120:	4317      	orrs	r7, r2
    8122:	e6af      	b.n	7e84 <__aeabi_dsub+0xa4>
    8124:	000007ff 	.word	0x000007ff
    8128:	ff7fffff 	.word	0xff7fffff
    812c:	800fffff 	.word	0x800fffff
    8130:	2e00      	cmp	r6, #0
    8132:	d03e      	beq.n	81b2 <__aeabi_dsub+0x3d2>
    8134:	4eb3      	ldr	r6, [pc, #716]	; (8404 <__aeabi_dsub+0x624>)
    8136:	45b4      	cmp	ip, r6
    8138:	d045      	beq.n	81c6 <__aeabi_dsub+0x3e6>
    813a:	2680      	movs	r6, #128	; 0x80
    813c:	0436      	lsls	r6, r6, #16
    813e:	426d      	negs	r5, r5
    8140:	4334      	orrs	r4, r6
    8142:	2d38      	cmp	r5, #56	; 0x38
    8144:	dd00      	ble.n	8148 <__aeabi_dsub+0x368>
    8146:	e0a8      	b.n	829a <__aeabi_dsub+0x4ba>
    8148:	2d1f      	cmp	r5, #31
    814a:	dd00      	ble.n	814e <__aeabi_dsub+0x36e>
    814c:	e11f      	b.n	838e <__aeabi_dsub+0x5ae>
    814e:	2620      	movs	r6, #32
    8150:	0027      	movs	r7, r4
    8152:	4650      	mov	r0, sl
    8154:	1b76      	subs	r6, r6, r5
    8156:	40b7      	lsls	r7, r6
    8158:	40e8      	lsrs	r0, r5
    815a:	4307      	orrs	r7, r0
    815c:	4650      	mov	r0, sl
    815e:	40b0      	lsls	r0, r6
    8160:	1e46      	subs	r6, r0, #1
    8162:	41b0      	sbcs	r0, r6
    8164:	40ec      	lsrs	r4, r5
    8166:	4338      	orrs	r0, r7
    8168:	1a17      	subs	r7, r2, r0
    816a:	42ba      	cmp	r2, r7
    816c:	4192      	sbcs	r2, r2
    816e:	1b0c      	subs	r4, r1, r4
    8170:	4252      	negs	r2, r2
    8172:	1aa4      	subs	r4, r4, r2
    8174:	4666      	mov	r6, ip
    8176:	4698      	mov	r8, r3
    8178:	e68b      	b.n	7e92 <__aeabi_dsub+0xb2>
    817a:	4664      	mov	r4, ip
    817c:	4667      	mov	r7, ip
    817e:	432c      	orrs	r4, r5
    8180:	d000      	beq.n	8184 <__aeabi_dsub+0x3a4>
    8182:	e68b      	b.n	7e9c <__aeabi_dsub+0xbc>
    8184:	2500      	movs	r5, #0
    8186:	2600      	movs	r6, #0
    8188:	2700      	movs	r7, #0
    818a:	e6ea      	b.n	7f62 <__aeabi_dsub+0x182>
    818c:	001e      	movs	r6, r3
    818e:	e6ad      	b.n	7eec <__aeabi_dsub+0x10c>
    8190:	2b1f      	cmp	r3, #31
    8192:	dc60      	bgt.n	8256 <__aeabi_dsub+0x476>
    8194:	2720      	movs	r7, #32
    8196:	1af8      	subs	r0, r7, r3
    8198:	000f      	movs	r7, r1
    819a:	4684      	mov	ip, r0
    819c:	4087      	lsls	r7, r0
    819e:	0010      	movs	r0, r2
    81a0:	40d8      	lsrs	r0, r3
    81a2:	4307      	orrs	r7, r0
    81a4:	4660      	mov	r0, ip
    81a6:	4082      	lsls	r2, r0
    81a8:	1e50      	subs	r0, r2, #1
    81aa:	4182      	sbcs	r2, r0
    81ac:	40d9      	lsrs	r1, r3
    81ae:	4317      	orrs	r7, r2
    81b0:	e6f5      	b.n	7f9e <__aeabi_dsub+0x1be>
    81b2:	0026      	movs	r6, r4
    81b4:	4650      	mov	r0, sl
    81b6:	4306      	orrs	r6, r0
    81b8:	d005      	beq.n	81c6 <__aeabi_dsub+0x3e6>
    81ba:	43ed      	mvns	r5, r5
    81bc:	2d00      	cmp	r5, #0
    81be:	d0d3      	beq.n	8168 <__aeabi_dsub+0x388>
    81c0:	4e90      	ldr	r6, [pc, #576]	; (8404 <__aeabi_dsub+0x624>)
    81c2:	45b4      	cmp	ip, r6
    81c4:	d1bd      	bne.n	8142 <__aeabi_dsub+0x362>
    81c6:	000c      	movs	r4, r1
    81c8:	0017      	movs	r7, r2
    81ca:	4666      	mov	r6, ip
    81cc:	4698      	mov	r8, r3
    81ce:	e68d      	b.n	7eec <__aeabi_dsub+0x10c>
    81d0:	488c      	ldr	r0, [pc, #560]	; (8404 <__aeabi_dsub+0x624>)
    81d2:	4283      	cmp	r3, r0
    81d4:	d00b      	beq.n	81ee <__aeabi_dsub+0x40e>
    81d6:	4663      	mov	r3, ip
    81d8:	e6d9      	b.n	7f8e <__aeabi_dsub+0x1ae>
    81da:	2d00      	cmp	r5, #0
    81dc:	d000      	beq.n	81e0 <__aeabi_dsub+0x400>
    81de:	e096      	b.n	830e <__aeabi_dsub+0x52e>
    81e0:	0008      	movs	r0, r1
    81e2:	4310      	orrs	r0, r2
    81e4:	d100      	bne.n	81e8 <__aeabi_dsub+0x408>
    81e6:	e0e2      	b.n	83ae <__aeabi_dsub+0x5ce>
    81e8:	000c      	movs	r4, r1
    81ea:	0017      	movs	r7, r2
    81ec:	4698      	mov	r8, r3
    81ee:	4e85      	ldr	r6, [pc, #532]	; (8404 <__aeabi_dsub+0x624>)
    81f0:	e67c      	b.n	7eec <__aeabi_dsub+0x10c>
    81f2:	2500      	movs	r5, #0
    81f4:	e780      	b.n	80f8 <__aeabi_dsub+0x318>
    81f6:	2100      	movs	r1, #0
    81f8:	e78e      	b.n	8118 <__aeabi_dsub+0x338>
    81fa:	0023      	movs	r3, r4
    81fc:	4650      	mov	r0, sl
    81fe:	4303      	orrs	r3, r0
    8200:	2e00      	cmp	r6, #0
    8202:	d000      	beq.n	8206 <__aeabi_dsub+0x426>
    8204:	e0a8      	b.n	8358 <__aeabi_dsub+0x578>
    8206:	2b00      	cmp	r3, #0
    8208:	d100      	bne.n	820c <__aeabi_dsub+0x42c>
    820a:	e0de      	b.n	83ca <__aeabi_dsub+0x5ea>
    820c:	000b      	movs	r3, r1
    820e:	4313      	orrs	r3, r2
    8210:	d100      	bne.n	8214 <__aeabi_dsub+0x434>
    8212:	e66b      	b.n	7eec <__aeabi_dsub+0x10c>
    8214:	4452      	add	r2, sl
    8216:	4552      	cmp	r2, sl
    8218:	4180      	sbcs	r0, r0
    821a:	1864      	adds	r4, r4, r1
    821c:	4240      	negs	r0, r0
    821e:	1824      	adds	r4, r4, r0
    8220:	0017      	movs	r7, r2
    8222:	0223      	lsls	r3, r4, #8
    8224:	d400      	bmi.n	8228 <__aeabi_dsub+0x448>
    8226:	e6fd      	b.n	8024 <__aeabi_dsub+0x244>
    8228:	4b77      	ldr	r3, [pc, #476]	; (8408 <__aeabi_dsub+0x628>)
    822a:	4666      	mov	r6, ip
    822c:	401c      	ands	r4, r3
    822e:	e65d      	b.n	7eec <__aeabi_dsub+0x10c>
    8230:	0025      	movs	r5, r4
    8232:	4650      	mov	r0, sl
    8234:	4305      	orrs	r5, r0
    8236:	2e00      	cmp	r6, #0
    8238:	d1cf      	bne.n	81da <__aeabi_dsub+0x3fa>
    823a:	2d00      	cmp	r5, #0
    823c:	d14f      	bne.n	82de <__aeabi_dsub+0x4fe>
    823e:	000c      	movs	r4, r1
    8240:	4314      	orrs	r4, r2
    8242:	d100      	bne.n	8246 <__aeabi_dsub+0x466>
    8244:	e0a0      	b.n	8388 <__aeabi_dsub+0x5a8>
    8246:	000c      	movs	r4, r1
    8248:	0017      	movs	r7, r2
    824a:	4698      	mov	r8, r3
    824c:	e64e      	b.n	7eec <__aeabi_dsub+0x10c>
    824e:	4666      	mov	r6, ip
    8250:	2400      	movs	r4, #0
    8252:	2700      	movs	r7, #0
    8254:	e685      	b.n	7f62 <__aeabi_dsub+0x182>
    8256:	001f      	movs	r7, r3
    8258:	0008      	movs	r0, r1
    825a:	3f20      	subs	r7, #32
    825c:	40f8      	lsrs	r0, r7
    825e:	0007      	movs	r7, r0
    8260:	2b20      	cmp	r3, #32
    8262:	d100      	bne.n	8266 <__aeabi_dsub+0x486>
    8264:	e08e      	b.n	8384 <__aeabi_dsub+0x5a4>
    8266:	2040      	movs	r0, #64	; 0x40
    8268:	1ac3      	subs	r3, r0, r3
    826a:	4099      	lsls	r1, r3
    826c:	430a      	orrs	r2, r1
    826e:	1e51      	subs	r1, r2, #1
    8270:	418a      	sbcs	r2, r1
    8272:	2100      	movs	r1, #0
    8274:	4317      	orrs	r7, r2
    8276:	e692      	b.n	7f9e <__aeabi_dsub+0x1be>
    8278:	2e00      	cmp	r6, #0
    827a:	d114      	bne.n	82a6 <__aeabi_dsub+0x4c6>
    827c:	0026      	movs	r6, r4
    827e:	4650      	mov	r0, sl
    8280:	4306      	orrs	r6, r0
    8282:	d062      	beq.n	834a <__aeabi_dsub+0x56a>
    8284:	43db      	mvns	r3, r3
    8286:	2b00      	cmp	r3, #0
    8288:	d15c      	bne.n	8344 <__aeabi_dsub+0x564>
    828a:	1887      	adds	r7, r0, r2
    828c:	4297      	cmp	r7, r2
    828e:	4192      	sbcs	r2, r2
    8290:	1864      	adds	r4, r4, r1
    8292:	4252      	negs	r2, r2
    8294:	18a4      	adds	r4, r4, r2
    8296:	4666      	mov	r6, ip
    8298:	e687      	b.n	7faa <__aeabi_dsub+0x1ca>
    829a:	4650      	mov	r0, sl
    829c:	4320      	orrs	r0, r4
    829e:	1e44      	subs	r4, r0, #1
    82a0:	41a0      	sbcs	r0, r4
    82a2:	2400      	movs	r4, #0
    82a4:	e760      	b.n	8168 <__aeabi_dsub+0x388>
    82a6:	4e57      	ldr	r6, [pc, #348]	; (8404 <__aeabi_dsub+0x624>)
    82a8:	45b4      	cmp	ip, r6
    82aa:	d04e      	beq.n	834a <__aeabi_dsub+0x56a>
    82ac:	2680      	movs	r6, #128	; 0x80
    82ae:	0436      	lsls	r6, r6, #16
    82b0:	425b      	negs	r3, r3
    82b2:	4334      	orrs	r4, r6
    82b4:	2b38      	cmp	r3, #56	; 0x38
    82b6:	dd00      	ble.n	82ba <__aeabi_dsub+0x4da>
    82b8:	e07f      	b.n	83ba <__aeabi_dsub+0x5da>
    82ba:	2b1f      	cmp	r3, #31
    82bc:	dd00      	ble.n	82c0 <__aeabi_dsub+0x4e0>
    82be:	e08b      	b.n	83d8 <__aeabi_dsub+0x5f8>
    82c0:	2620      	movs	r6, #32
    82c2:	0027      	movs	r7, r4
    82c4:	4650      	mov	r0, sl
    82c6:	1af6      	subs	r6, r6, r3
    82c8:	40b7      	lsls	r7, r6
    82ca:	40d8      	lsrs	r0, r3
    82cc:	4307      	orrs	r7, r0
    82ce:	4650      	mov	r0, sl
    82d0:	40b0      	lsls	r0, r6
    82d2:	1e46      	subs	r6, r0, #1
    82d4:	41b0      	sbcs	r0, r6
    82d6:	4307      	orrs	r7, r0
    82d8:	40dc      	lsrs	r4, r3
    82da:	18bf      	adds	r7, r7, r2
    82dc:	e7d6      	b.n	828c <__aeabi_dsub+0x4ac>
    82de:	000d      	movs	r5, r1
    82e0:	4315      	orrs	r5, r2
    82e2:	d100      	bne.n	82e6 <__aeabi_dsub+0x506>
    82e4:	e602      	b.n	7eec <__aeabi_dsub+0x10c>
    82e6:	4650      	mov	r0, sl
    82e8:	1a80      	subs	r0, r0, r2
    82ea:	4582      	cmp	sl, r0
    82ec:	41bf      	sbcs	r7, r7
    82ee:	1a65      	subs	r5, r4, r1
    82f0:	427f      	negs	r7, r7
    82f2:	1bed      	subs	r5, r5, r7
    82f4:	4684      	mov	ip, r0
    82f6:	0228      	lsls	r0, r5, #8
    82f8:	d400      	bmi.n	82fc <__aeabi_dsub+0x51c>
    82fa:	e68d      	b.n	8018 <__aeabi_dsub+0x238>
    82fc:	4650      	mov	r0, sl
    82fe:	1a17      	subs	r7, r2, r0
    8300:	42ba      	cmp	r2, r7
    8302:	4192      	sbcs	r2, r2
    8304:	1b0c      	subs	r4, r1, r4
    8306:	4252      	negs	r2, r2
    8308:	1aa4      	subs	r4, r4, r2
    830a:	4698      	mov	r8, r3
    830c:	e5ee      	b.n	7eec <__aeabi_dsub+0x10c>
    830e:	000d      	movs	r5, r1
    8310:	4315      	orrs	r5, r2
    8312:	d100      	bne.n	8316 <__aeabi_dsub+0x536>
    8314:	e76b      	b.n	81ee <__aeabi_dsub+0x40e>
    8316:	4650      	mov	r0, sl
    8318:	0767      	lsls	r7, r4, #29
    831a:	08c0      	lsrs	r0, r0, #3
    831c:	4307      	orrs	r7, r0
    831e:	2080      	movs	r0, #128	; 0x80
    8320:	08e4      	lsrs	r4, r4, #3
    8322:	0300      	lsls	r0, r0, #12
    8324:	4204      	tst	r4, r0
    8326:	d007      	beq.n	8338 <__aeabi_dsub+0x558>
    8328:	08cd      	lsrs	r5, r1, #3
    832a:	4205      	tst	r5, r0
    832c:	d104      	bne.n	8338 <__aeabi_dsub+0x558>
    832e:	002c      	movs	r4, r5
    8330:	4698      	mov	r8, r3
    8332:	08d7      	lsrs	r7, r2, #3
    8334:	0749      	lsls	r1, r1, #29
    8336:	430f      	orrs	r7, r1
    8338:	0f7b      	lsrs	r3, r7, #29
    833a:	00e4      	lsls	r4, r4, #3
    833c:	431c      	orrs	r4, r3
    833e:	00ff      	lsls	r7, r7, #3
    8340:	4e30      	ldr	r6, [pc, #192]	; (8404 <__aeabi_dsub+0x624>)
    8342:	e5d3      	b.n	7eec <__aeabi_dsub+0x10c>
    8344:	4e2f      	ldr	r6, [pc, #188]	; (8404 <__aeabi_dsub+0x624>)
    8346:	45b4      	cmp	ip, r6
    8348:	d1b4      	bne.n	82b4 <__aeabi_dsub+0x4d4>
    834a:	000c      	movs	r4, r1
    834c:	0017      	movs	r7, r2
    834e:	4666      	mov	r6, ip
    8350:	e5cc      	b.n	7eec <__aeabi_dsub+0x10c>
    8352:	2700      	movs	r7, #0
    8354:	2400      	movs	r4, #0
    8356:	e5e8      	b.n	7f2a <__aeabi_dsub+0x14a>
    8358:	2b00      	cmp	r3, #0
    835a:	d039      	beq.n	83d0 <__aeabi_dsub+0x5f0>
    835c:	000b      	movs	r3, r1
    835e:	4313      	orrs	r3, r2
    8360:	d100      	bne.n	8364 <__aeabi_dsub+0x584>
    8362:	e744      	b.n	81ee <__aeabi_dsub+0x40e>
    8364:	08c0      	lsrs	r0, r0, #3
    8366:	0767      	lsls	r7, r4, #29
    8368:	4307      	orrs	r7, r0
    836a:	2080      	movs	r0, #128	; 0x80
    836c:	08e4      	lsrs	r4, r4, #3
    836e:	0300      	lsls	r0, r0, #12
    8370:	4204      	tst	r4, r0
    8372:	d0e1      	beq.n	8338 <__aeabi_dsub+0x558>
    8374:	08cb      	lsrs	r3, r1, #3
    8376:	4203      	tst	r3, r0
    8378:	d1de      	bne.n	8338 <__aeabi_dsub+0x558>
    837a:	08d7      	lsrs	r7, r2, #3
    837c:	0749      	lsls	r1, r1, #29
    837e:	430f      	orrs	r7, r1
    8380:	001c      	movs	r4, r3
    8382:	e7d9      	b.n	8338 <__aeabi_dsub+0x558>
    8384:	2100      	movs	r1, #0
    8386:	e771      	b.n	826c <__aeabi_dsub+0x48c>
    8388:	2500      	movs	r5, #0
    838a:	2700      	movs	r7, #0
    838c:	e5e9      	b.n	7f62 <__aeabi_dsub+0x182>
    838e:	002e      	movs	r6, r5
    8390:	0027      	movs	r7, r4
    8392:	3e20      	subs	r6, #32
    8394:	40f7      	lsrs	r7, r6
    8396:	2d20      	cmp	r5, #32
    8398:	d02f      	beq.n	83fa <__aeabi_dsub+0x61a>
    839a:	2640      	movs	r6, #64	; 0x40
    839c:	1b75      	subs	r5, r6, r5
    839e:	40ac      	lsls	r4, r5
    83a0:	4650      	mov	r0, sl
    83a2:	4320      	orrs	r0, r4
    83a4:	1e44      	subs	r4, r0, #1
    83a6:	41a0      	sbcs	r0, r4
    83a8:	2400      	movs	r4, #0
    83aa:	4338      	orrs	r0, r7
    83ac:	e6dc      	b.n	8168 <__aeabi_dsub+0x388>
    83ae:	2480      	movs	r4, #128	; 0x80
    83b0:	2500      	movs	r5, #0
    83b2:	0324      	lsls	r4, r4, #12
    83b4:	4e13      	ldr	r6, [pc, #76]	; (8404 <__aeabi_dsub+0x624>)
    83b6:	2700      	movs	r7, #0
    83b8:	e5d3      	b.n	7f62 <__aeabi_dsub+0x182>
    83ba:	4650      	mov	r0, sl
    83bc:	4320      	orrs	r0, r4
    83be:	0007      	movs	r7, r0
    83c0:	1e78      	subs	r0, r7, #1
    83c2:	4187      	sbcs	r7, r0
    83c4:	2400      	movs	r4, #0
    83c6:	18bf      	adds	r7, r7, r2
    83c8:	e760      	b.n	828c <__aeabi_dsub+0x4ac>
    83ca:	000c      	movs	r4, r1
    83cc:	0017      	movs	r7, r2
    83ce:	e58d      	b.n	7eec <__aeabi_dsub+0x10c>
    83d0:	000c      	movs	r4, r1
    83d2:	0017      	movs	r7, r2
    83d4:	4e0b      	ldr	r6, [pc, #44]	; (8404 <__aeabi_dsub+0x624>)
    83d6:	e589      	b.n	7eec <__aeabi_dsub+0x10c>
    83d8:	001e      	movs	r6, r3
    83da:	0027      	movs	r7, r4
    83dc:	3e20      	subs	r6, #32
    83de:	40f7      	lsrs	r7, r6
    83e0:	2b20      	cmp	r3, #32
    83e2:	d00c      	beq.n	83fe <__aeabi_dsub+0x61e>
    83e4:	2640      	movs	r6, #64	; 0x40
    83e6:	1af3      	subs	r3, r6, r3
    83e8:	409c      	lsls	r4, r3
    83ea:	4650      	mov	r0, sl
    83ec:	4320      	orrs	r0, r4
    83ee:	1e44      	subs	r4, r0, #1
    83f0:	41a0      	sbcs	r0, r4
    83f2:	4307      	orrs	r7, r0
    83f4:	2400      	movs	r4, #0
    83f6:	18bf      	adds	r7, r7, r2
    83f8:	e748      	b.n	828c <__aeabi_dsub+0x4ac>
    83fa:	2400      	movs	r4, #0
    83fc:	e7d0      	b.n	83a0 <__aeabi_dsub+0x5c0>
    83fe:	2400      	movs	r4, #0
    8400:	e7f3      	b.n	83ea <__aeabi_dsub+0x60a>
    8402:	46c0      	nop			; (mov r8, r8)
    8404:	000007ff 	.word	0x000007ff
    8408:	ff7fffff 	.word	0xff7fffff

0000840c <__aeabi_d2iz>:
    840c:	b530      	push	{r4, r5, lr}
    840e:	4d13      	ldr	r5, [pc, #76]	; (845c <__aeabi_d2iz+0x50>)
    8410:	030a      	lsls	r2, r1, #12
    8412:	004b      	lsls	r3, r1, #1
    8414:	0b12      	lsrs	r2, r2, #12
    8416:	0d5b      	lsrs	r3, r3, #21
    8418:	0fc9      	lsrs	r1, r1, #31
    841a:	2400      	movs	r4, #0
    841c:	42ab      	cmp	r3, r5
    841e:	dd10      	ble.n	8442 <__aeabi_d2iz+0x36>
    8420:	4c0f      	ldr	r4, [pc, #60]	; (8460 <__aeabi_d2iz+0x54>)
    8422:	42a3      	cmp	r3, r4
    8424:	dc0f      	bgt.n	8446 <__aeabi_d2iz+0x3a>
    8426:	2480      	movs	r4, #128	; 0x80
    8428:	4d0e      	ldr	r5, [pc, #56]	; (8464 <__aeabi_d2iz+0x58>)
    842a:	0364      	lsls	r4, r4, #13
    842c:	4322      	orrs	r2, r4
    842e:	1aed      	subs	r5, r5, r3
    8430:	2d1f      	cmp	r5, #31
    8432:	dd0b      	ble.n	844c <__aeabi_d2iz+0x40>
    8434:	480c      	ldr	r0, [pc, #48]	; (8468 <__aeabi_d2iz+0x5c>)
    8436:	1ac3      	subs	r3, r0, r3
    8438:	40da      	lsrs	r2, r3
    843a:	4254      	negs	r4, r2
    843c:	2900      	cmp	r1, #0
    843e:	d100      	bne.n	8442 <__aeabi_d2iz+0x36>
    8440:	0014      	movs	r4, r2
    8442:	0020      	movs	r0, r4
    8444:	bd30      	pop	{r4, r5, pc}
    8446:	4b09      	ldr	r3, [pc, #36]	; (846c <__aeabi_d2iz+0x60>)
    8448:	18cc      	adds	r4, r1, r3
    844a:	e7fa      	b.n	8442 <__aeabi_d2iz+0x36>
    844c:	4c08      	ldr	r4, [pc, #32]	; (8470 <__aeabi_d2iz+0x64>)
    844e:	40e8      	lsrs	r0, r5
    8450:	46a4      	mov	ip, r4
    8452:	4463      	add	r3, ip
    8454:	409a      	lsls	r2, r3
    8456:	4302      	orrs	r2, r0
    8458:	e7ef      	b.n	843a <__aeabi_d2iz+0x2e>
    845a:	46c0      	nop			; (mov r8, r8)
    845c:	000003fe 	.word	0x000003fe
    8460:	0000041d 	.word	0x0000041d
    8464:	00000433 	.word	0x00000433
    8468:	00000413 	.word	0x00000413
    846c:	7fffffff 	.word	0x7fffffff
    8470:	fffffbed 	.word	0xfffffbed

00008474 <__aeabi_i2d>:
    8474:	b570      	push	{r4, r5, r6, lr}
    8476:	2800      	cmp	r0, #0
    8478:	d030      	beq.n	84dc <__aeabi_i2d+0x68>
    847a:	17c3      	asrs	r3, r0, #31
    847c:	18c4      	adds	r4, r0, r3
    847e:	405c      	eors	r4, r3
    8480:	0fc5      	lsrs	r5, r0, #31
    8482:	0020      	movs	r0, r4
    8484:	f000 f876 	bl	8574 <__clzsi2>
    8488:	4b17      	ldr	r3, [pc, #92]	; (84e8 <__aeabi_i2d+0x74>)
    848a:	4a18      	ldr	r2, [pc, #96]	; (84ec <__aeabi_i2d+0x78>)
    848c:	1a1b      	subs	r3, r3, r0
    848e:	1ad2      	subs	r2, r2, r3
    8490:	2a1f      	cmp	r2, #31
    8492:	dd18      	ble.n	84c6 <__aeabi_i2d+0x52>
    8494:	4a16      	ldr	r2, [pc, #88]	; (84f0 <__aeabi_i2d+0x7c>)
    8496:	1ad2      	subs	r2, r2, r3
    8498:	4094      	lsls	r4, r2
    849a:	2200      	movs	r2, #0
    849c:	0324      	lsls	r4, r4, #12
    849e:	055b      	lsls	r3, r3, #21
    84a0:	0b24      	lsrs	r4, r4, #12
    84a2:	0d5b      	lsrs	r3, r3, #21
    84a4:	2100      	movs	r1, #0
    84a6:	0010      	movs	r0, r2
    84a8:	0324      	lsls	r4, r4, #12
    84aa:	0d0a      	lsrs	r2, r1, #20
    84ac:	0b24      	lsrs	r4, r4, #12
    84ae:	0512      	lsls	r2, r2, #20
    84b0:	4322      	orrs	r2, r4
    84b2:	4c10      	ldr	r4, [pc, #64]	; (84f4 <__aeabi_i2d+0x80>)
    84b4:	051b      	lsls	r3, r3, #20
    84b6:	4022      	ands	r2, r4
    84b8:	4313      	orrs	r3, r2
    84ba:	005b      	lsls	r3, r3, #1
    84bc:	07ed      	lsls	r5, r5, #31
    84be:	085b      	lsrs	r3, r3, #1
    84c0:	432b      	orrs	r3, r5
    84c2:	0019      	movs	r1, r3
    84c4:	bd70      	pop	{r4, r5, r6, pc}
    84c6:	0021      	movs	r1, r4
    84c8:	4091      	lsls	r1, r2
    84ca:	000a      	movs	r2, r1
    84cc:	210b      	movs	r1, #11
    84ce:	1a08      	subs	r0, r1, r0
    84d0:	40c4      	lsrs	r4, r0
    84d2:	055b      	lsls	r3, r3, #21
    84d4:	0324      	lsls	r4, r4, #12
    84d6:	0b24      	lsrs	r4, r4, #12
    84d8:	0d5b      	lsrs	r3, r3, #21
    84da:	e7e3      	b.n	84a4 <__aeabi_i2d+0x30>
    84dc:	2500      	movs	r5, #0
    84de:	2300      	movs	r3, #0
    84e0:	2400      	movs	r4, #0
    84e2:	2200      	movs	r2, #0
    84e4:	e7de      	b.n	84a4 <__aeabi_i2d+0x30>
    84e6:	46c0      	nop			; (mov r8, r8)
    84e8:	0000041e 	.word	0x0000041e
    84ec:	00000433 	.word	0x00000433
    84f0:	00000413 	.word	0x00000413
    84f4:	800fffff 	.word	0x800fffff

000084f8 <__aeabi_cdrcmple>:
    84f8:	4684      	mov	ip, r0
    84fa:	1c10      	adds	r0, r2, #0
    84fc:	4662      	mov	r2, ip
    84fe:	468c      	mov	ip, r1
    8500:	1c19      	adds	r1, r3, #0
    8502:	4663      	mov	r3, ip
    8504:	e000      	b.n	8508 <__aeabi_cdcmpeq>
    8506:	46c0      	nop			; (mov r8, r8)

00008508 <__aeabi_cdcmpeq>:
    8508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    850a:	f000 f8ef 	bl	86ec <__ledf2>
    850e:	2800      	cmp	r0, #0
    8510:	d401      	bmi.n	8516 <__aeabi_cdcmpeq+0xe>
    8512:	2100      	movs	r1, #0
    8514:	42c8      	cmn	r0, r1
    8516:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008518 <__aeabi_dcmpeq>:
    8518:	b510      	push	{r4, lr}
    851a:	f000 f849 	bl	85b0 <__eqdf2>
    851e:	4240      	negs	r0, r0
    8520:	3001      	adds	r0, #1
    8522:	bd10      	pop	{r4, pc}

00008524 <__aeabi_dcmplt>:
    8524:	b510      	push	{r4, lr}
    8526:	f000 f8e1 	bl	86ec <__ledf2>
    852a:	2800      	cmp	r0, #0
    852c:	db01      	blt.n	8532 <__aeabi_dcmplt+0xe>
    852e:	2000      	movs	r0, #0
    8530:	bd10      	pop	{r4, pc}
    8532:	2001      	movs	r0, #1
    8534:	bd10      	pop	{r4, pc}
    8536:	46c0      	nop			; (mov r8, r8)

00008538 <__aeabi_dcmple>:
    8538:	b510      	push	{r4, lr}
    853a:	f000 f8d7 	bl	86ec <__ledf2>
    853e:	2800      	cmp	r0, #0
    8540:	dd01      	ble.n	8546 <__aeabi_dcmple+0xe>
    8542:	2000      	movs	r0, #0
    8544:	bd10      	pop	{r4, pc}
    8546:	2001      	movs	r0, #1
    8548:	bd10      	pop	{r4, pc}
    854a:	46c0      	nop			; (mov r8, r8)

0000854c <__aeabi_dcmpgt>:
    854c:	b510      	push	{r4, lr}
    854e:	f000 f869 	bl	8624 <__gedf2>
    8552:	2800      	cmp	r0, #0
    8554:	dc01      	bgt.n	855a <__aeabi_dcmpgt+0xe>
    8556:	2000      	movs	r0, #0
    8558:	bd10      	pop	{r4, pc}
    855a:	2001      	movs	r0, #1
    855c:	bd10      	pop	{r4, pc}
    855e:	46c0      	nop			; (mov r8, r8)

00008560 <__aeabi_dcmpge>:
    8560:	b510      	push	{r4, lr}
    8562:	f000 f85f 	bl	8624 <__gedf2>
    8566:	2800      	cmp	r0, #0
    8568:	da01      	bge.n	856e <__aeabi_dcmpge+0xe>
    856a:	2000      	movs	r0, #0
    856c:	bd10      	pop	{r4, pc}
    856e:	2001      	movs	r0, #1
    8570:	bd10      	pop	{r4, pc}
    8572:	46c0      	nop			; (mov r8, r8)

00008574 <__clzsi2>:
    8574:	211c      	movs	r1, #28
    8576:	2301      	movs	r3, #1
    8578:	041b      	lsls	r3, r3, #16
    857a:	4298      	cmp	r0, r3
    857c:	d301      	bcc.n	8582 <__clzsi2+0xe>
    857e:	0c00      	lsrs	r0, r0, #16
    8580:	3910      	subs	r1, #16
    8582:	0a1b      	lsrs	r3, r3, #8
    8584:	4298      	cmp	r0, r3
    8586:	d301      	bcc.n	858c <__clzsi2+0x18>
    8588:	0a00      	lsrs	r0, r0, #8
    858a:	3908      	subs	r1, #8
    858c:	091b      	lsrs	r3, r3, #4
    858e:	4298      	cmp	r0, r3
    8590:	d301      	bcc.n	8596 <__clzsi2+0x22>
    8592:	0900      	lsrs	r0, r0, #4
    8594:	3904      	subs	r1, #4
    8596:	a202      	add	r2, pc, #8	; (adr r2, 85a0 <__clzsi2+0x2c>)
    8598:	5c10      	ldrb	r0, [r2, r0]
    859a:	1840      	adds	r0, r0, r1
    859c:	4770      	bx	lr
    859e:	46c0      	nop			; (mov r8, r8)
    85a0:	02020304 	.word	0x02020304
    85a4:	01010101 	.word	0x01010101
	...

000085b0 <__eqdf2>:
    85b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85b2:	464f      	mov	r7, r9
    85b4:	4646      	mov	r6, r8
    85b6:	46d6      	mov	lr, sl
    85b8:	005c      	lsls	r4, r3, #1
    85ba:	b5c0      	push	{r6, r7, lr}
    85bc:	031f      	lsls	r7, r3, #12
    85be:	0fdb      	lsrs	r3, r3, #31
    85c0:	469a      	mov	sl, r3
    85c2:	4b17      	ldr	r3, [pc, #92]	; (8620 <__eqdf2+0x70>)
    85c4:	030e      	lsls	r6, r1, #12
    85c6:	004d      	lsls	r5, r1, #1
    85c8:	4684      	mov	ip, r0
    85ca:	4680      	mov	r8, r0
    85cc:	0b36      	lsrs	r6, r6, #12
    85ce:	0d6d      	lsrs	r5, r5, #21
    85d0:	0fc9      	lsrs	r1, r1, #31
    85d2:	4691      	mov	r9, r2
    85d4:	0b3f      	lsrs	r7, r7, #12
    85d6:	0d64      	lsrs	r4, r4, #21
    85d8:	2001      	movs	r0, #1
    85da:	429d      	cmp	r5, r3
    85dc:	d008      	beq.n	85f0 <__eqdf2+0x40>
    85de:	429c      	cmp	r4, r3
    85e0:	d001      	beq.n	85e6 <__eqdf2+0x36>
    85e2:	42a5      	cmp	r5, r4
    85e4:	d00b      	beq.n	85fe <__eqdf2+0x4e>
    85e6:	bc1c      	pop	{r2, r3, r4}
    85e8:	4690      	mov	r8, r2
    85ea:	4699      	mov	r9, r3
    85ec:	46a2      	mov	sl, r4
    85ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85f0:	4663      	mov	r3, ip
    85f2:	4333      	orrs	r3, r6
    85f4:	d1f7      	bne.n	85e6 <__eqdf2+0x36>
    85f6:	42ac      	cmp	r4, r5
    85f8:	d1f5      	bne.n	85e6 <__eqdf2+0x36>
    85fa:	433a      	orrs	r2, r7
    85fc:	d1f3      	bne.n	85e6 <__eqdf2+0x36>
    85fe:	2001      	movs	r0, #1
    8600:	42be      	cmp	r6, r7
    8602:	d1f0      	bne.n	85e6 <__eqdf2+0x36>
    8604:	45c8      	cmp	r8, r9
    8606:	d1ee      	bne.n	85e6 <__eqdf2+0x36>
    8608:	4551      	cmp	r1, sl
    860a:	d007      	beq.n	861c <__eqdf2+0x6c>
    860c:	2d00      	cmp	r5, #0
    860e:	d1ea      	bne.n	85e6 <__eqdf2+0x36>
    8610:	4663      	mov	r3, ip
    8612:	431e      	orrs	r6, r3
    8614:	0030      	movs	r0, r6
    8616:	1e46      	subs	r6, r0, #1
    8618:	41b0      	sbcs	r0, r6
    861a:	e7e4      	b.n	85e6 <__eqdf2+0x36>
    861c:	2000      	movs	r0, #0
    861e:	e7e2      	b.n	85e6 <__eqdf2+0x36>
    8620:	000007ff 	.word	0x000007ff

00008624 <__gedf2>:
    8624:	b5f0      	push	{r4, r5, r6, r7, lr}
    8626:	4645      	mov	r5, r8
    8628:	46de      	mov	lr, fp
    862a:	4657      	mov	r7, sl
    862c:	464e      	mov	r6, r9
    862e:	b5e0      	push	{r5, r6, r7, lr}
    8630:	031f      	lsls	r7, r3, #12
    8632:	0b3d      	lsrs	r5, r7, #12
    8634:	4f2c      	ldr	r7, [pc, #176]	; (86e8 <__gedf2+0xc4>)
    8636:	030e      	lsls	r6, r1, #12
    8638:	004c      	lsls	r4, r1, #1
    863a:	46ab      	mov	fp, r5
    863c:	005d      	lsls	r5, r3, #1
    863e:	4684      	mov	ip, r0
    8640:	0b36      	lsrs	r6, r6, #12
    8642:	0d64      	lsrs	r4, r4, #21
    8644:	0fc9      	lsrs	r1, r1, #31
    8646:	4690      	mov	r8, r2
    8648:	0d6d      	lsrs	r5, r5, #21
    864a:	0fdb      	lsrs	r3, r3, #31
    864c:	42bc      	cmp	r4, r7
    864e:	d02a      	beq.n	86a6 <__gedf2+0x82>
    8650:	4f25      	ldr	r7, [pc, #148]	; (86e8 <__gedf2+0xc4>)
    8652:	42bd      	cmp	r5, r7
    8654:	d02d      	beq.n	86b2 <__gedf2+0x8e>
    8656:	2c00      	cmp	r4, #0
    8658:	d10f      	bne.n	867a <__gedf2+0x56>
    865a:	4330      	orrs	r0, r6
    865c:	0007      	movs	r7, r0
    865e:	4681      	mov	r9, r0
    8660:	4278      	negs	r0, r7
    8662:	4178      	adcs	r0, r7
    8664:	b2c0      	uxtb	r0, r0
    8666:	2d00      	cmp	r5, #0
    8668:	d117      	bne.n	869a <__gedf2+0x76>
    866a:	465f      	mov	r7, fp
    866c:	433a      	orrs	r2, r7
    866e:	d114      	bne.n	869a <__gedf2+0x76>
    8670:	464b      	mov	r3, r9
    8672:	2000      	movs	r0, #0
    8674:	2b00      	cmp	r3, #0
    8676:	d00a      	beq.n	868e <__gedf2+0x6a>
    8678:	e006      	b.n	8688 <__gedf2+0x64>
    867a:	2d00      	cmp	r5, #0
    867c:	d102      	bne.n	8684 <__gedf2+0x60>
    867e:	4658      	mov	r0, fp
    8680:	4302      	orrs	r2, r0
    8682:	d001      	beq.n	8688 <__gedf2+0x64>
    8684:	4299      	cmp	r1, r3
    8686:	d018      	beq.n	86ba <__gedf2+0x96>
    8688:	4248      	negs	r0, r1
    868a:	2101      	movs	r1, #1
    868c:	4308      	orrs	r0, r1
    868e:	bc3c      	pop	{r2, r3, r4, r5}
    8690:	4690      	mov	r8, r2
    8692:	4699      	mov	r9, r3
    8694:	46a2      	mov	sl, r4
    8696:	46ab      	mov	fp, r5
    8698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    869a:	2800      	cmp	r0, #0
    869c:	d0f2      	beq.n	8684 <__gedf2+0x60>
    869e:	2001      	movs	r0, #1
    86a0:	3b01      	subs	r3, #1
    86a2:	4318      	orrs	r0, r3
    86a4:	e7f3      	b.n	868e <__gedf2+0x6a>
    86a6:	0037      	movs	r7, r6
    86a8:	4307      	orrs	r7, r0
    86aa:	d0d1      	beq.n	8650 <__gedf2+0x2c>
    86ac:	2002      	movs	r0, #2
    86ae:	4240      	negs	r0, r0
    86b0:	e7ed      	b.n	868e <__gedf2+0x6a>
    86b2:	465f      	mov	r7, fp
    86b4:	4317      	orrs	r7, r2
    86b6:	d0ce      	beq.n	8656 <__gedf2+0x32>
    86b8:	e7f8      	b.n	86ac <__gedf2+0x88>
    86ba:	42ac      	cmp	r4, r5
    86bc:	dce4      	bgt.n	8688 <__gedf2+0x64>
    86be:	da03      	bge.n	86c8 <__gedf2+0xa4>
    86c0:	1e48      	subs	r0, r1, #1
    86c2:	2101      	movs	r1, #1
    86c4:	4308      	orrs	r0, r1
    86c6:	e7e2      	b.n	868e <__gedf2+0x6a>
    86c8:	455e      	cmp	r6, fp
    86ca:	d8dd      	bhi.n	8688 <__gedf2+0x64>
    86cc:	d006      	beq.n	86dc <__gedf2+0xb8>
    86ce:	2000      	movs	r0, #0
    86d0:	455e      	cmp	r6, fp
    86d2:	d2dc      	bcs.n	868e <__gedf2+0x6a>
    86d4:	2301      	movs	r3, #1
    86d6:	1e48      	subs	r0, r1, #1
    86d8:	4318      	orrs	r0, r3
    86da:	e7d8      	b.n	868e <__gedf2+0x6a>
    86dc:	45c4      	cmp	ip, r8
    86de:	d8d3      	bhi.n	8688 <__gedf2+0x64>
    86e0:	2000      	movs	r0, #0
    86e2:	45c4      	cmp	ip, r8
    86e4:	d3f6      	bcc.n	86d4 <__gedf2+0xb0>
    86e6:	e7d2      	b.n	868e <__gedf2+0x6a>
    86e8:	000007ff 	.word	0x000007ff

000086ec <__ledf2>:
    86ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ee:	464e      	mov	r6, r9
    86f0:	4645      	mov	r5, r8
    86f2:	46de      	mov	lr, fp
    86f4:	4657      	mov	r7, sl
    86f6:	005c      	lsls	r4, r3, #1
    86f8:	b5e0      	push	{r5, r6, r7, lr}
    86fa:	031f      	lsls	r7, r3, #12
    86fc:	0fdb      	lsrs	r3, r3, #31
    86fe:	4699      	mov	r9, r3
    8700:	4b2a      	ldr	r3, [pc, #168]	; (87ac <__ledf2+0xc0>)
    8702:	030e      	lsls	r6, r1, #12
    8704:	004d      	lsls	r5, r1, #1
    8706:	0fc9      	lsrs	r1, r1, #31
    8708:	4684      	mov	ip, r0
    870a:	0b36      	lsrs	r6, r6, #12
    870c:	0d6d      	lsrs	r5, r5, #21
    870e:	468b      	mov	fp, r1
    8710:	4690      	mov	r8, r2
    8712:	0b3f      	lsrs	r7, r7, #12
    8714:	0d64      	lsrs	r4, r4, #21
    8716:	429d      	cmp	r5, r3
    8718:	d020      	beq.n	875c <__ledf2+0x70>
    871a:	4b24      	ldr	r3, [pc, #144]	; (87ac <__ledf2+0xc0>)
    871c:	429c      	cmp	r4, r3
    871e:	d022      	beq.n	8766 <__ledf2+0x7a>
    8720:	2d00      	cmp	r5, #0
    8722:	d112      	bne.n	874a <__ledf2+0x5e>
    8724:	4330      	orrs	r0, r6
    8726:	4243      	negs	r3, r0
    8728:	4143      	adcs	r3, r0
    872a:	b2db      	uxtb	r3, r3
    872c:	2c00      	cmp	r4, #0
    872e:	d01f      	beq.n	8770 <__ledf2+0x84>
    8730:	2b00      	cmp	r3, #0
    8732:	d00c      	beq.n	874e <__ledf2+0x62>
    8734:	464b      	mov	r3, r9
    8736:	2001      	movs	r0, #1
    8738:	3b01      	subs	r3, #1
    873a:	4303      	orrs	r3, r0
    873c:	0018      	movs	r0, r3
    873e:	bc3c      	pop	{r2, r3, r4, r5}
    8740:	4690      	mov	r8, r2
    8742:	4699      	mov	r9, r3
    8744:	46a2      	mov	sl, r4
    8746:	46ab      	mov	fp, r5
    8748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    874a:	2c00      	cmp	r4, #0
    874c:	d016      	beq.n	877c <__ledf2+0x90>
    874e:	45cb      	cmp	fp, r9
    8750:	d017      	beq.n	8782 <__ledf2+0x96>
    8752:	465b      	mov	r3, fp
    8754:	4259      	negs	r1, r3
    8756:	2301      	movs	r3, #1
    8758:	430b      	orrs	r3, r1
    875a:	e7ef      	b.n	873c <__ledf2+0x50>
    875c:	0031      	movs	r1, r6
    875e:	2302      	movs	r3, #2
    8760:	4301      	orrs	r1, r0
    8762:	d1eb      	bne.n	873c <__ledf2+0x50>
    8764:	e7d9      	b.n	871a <__ledf2+0x2e>
    8766:	0039      	movs	r1, r7
    8768:	2302      	movs	r3, #2
    876a:	4311      	orrs	r1, r2
    876c:	d1e6      	bne.n	873c <__ledf2+0x50>
    876e:	e7d7      	b.n	8720 <__ledf2+0x34>
    8770:	433a      	orrs	r2, r7
    8772:	d1dd      	bne.n	8730 <__ledf2+0x44>
    8774:	2300      	movs	r3, #0
    8776:	2800      	cmp	r0, #0
    8778:	d0e0      	beq.n	873c <__ledf2+0x50>
    877a:	e7ea      	b.n	8752 <__ledf2+0x66>
    877c:	433a      	orrs	r2, r7
    877e:	d1e6      	bne.n	874e <__ledf2+0x62>
    8780:	e7e7      	b.n	8752 <__ledf2+0x66>
    8782:	42a5      	cmp	r5, r4
    8784:	dce5      	bgt.n	8752 <__ledf2+0x66>
    8786:	db05      	blt.n	8794 <__ledf2+0xa8>
    8788:	42be      	cmp	r6, r7
    878a:	d8e2      	bhi.n	8752 <__ledf2+0x66>
    878c:	d007      	beq.n	879e <__ledf2+0xb2>
    878e:	2300      	movs	r3, #0
    8790:	42be      	cmp	r6, r7
    8792:	d2d3      	bcs.n	873c <__ledf2+0x50>
    8794:	4659      	mov	r1, fp
    8796:	2301      	movs	r3, #1
    8798:	3901      	subs	r1, #1
    879a:	430b      	orrs	r3, r1
    879c:	e7ce      	b.n	873c <__ledf2+0x50>
    879e:	45c4      	cmp	ip, r8
    87a0:	d8d7      	bhi.n	8752 <__ledf2+0x66>
    87a2:	2300      	movs	r3, #0
    87a4:	45c4      	cmp	ip, r8
    87a6:	d3f5      	bcc.n	8794 <__ledf2+0xa8>
    87a8:	e7c8      	b.n	873c <__ledf2+0x50>
    87aa:	46c0      	nop			; (mov r8, r8)
    87ac:	000007ff 	.word	0x000007ff

000087b0 <__libc_init_array>:
    87b0:	b570      	push	{r4, r5, r6, lr}
    87b2:	2600      	movs	r6, #0
    87b4:	4d0c      	ldr	r5, [pc, #48]	; (87e8 <__libc_init_array+0x38>)
    87b6:	4c0d      	ldr	r4, [pc, #52]	; (87ec <__libc_init_array+0x3c>)
    87b8:	1b64      	subs	r4, r4, r5
    87ba:	10a4      	asrs	r4, r4, #2
    87bc:	42a6      	cmp	r6, r4
    87be:	d109      	bne.n	87d4 <__libc_init_array+0x24>
    87c0:	2600      	movs	r6, #0
    87c2:	f002 fc4d 	bl	b060 <_init>
    87c6:	4d0a      	ldr	r5, [pc, #40]	; (87f0 <__libc_init_array+0x40>)
    87c8:	4c0a      	ldr	r4, [pc, #40]	; (87f4 <__libc_init_array+0x44>)
    87ca:	1b64      	subs	r4, r4, r5
    87cc:	10a4      	asrs	r4, r4, #2
    87ce:	42a6      	cmp	r6, r4
    87d0:	d105      	bne.n	87de <__libc_init_array+0x2e>
    87d2:	bd70      	pop	{r4, r5, r6, pc}
    87d4:	00b3      	lsls	r3, r6, #2
    87d6:	58eb      	ldr	r3, [r5, r3]
    87d8:	4798      	blx	r3
    87da:	3601      	adds	r6, #1
    87dc:	e7ee      	b.n	87bc <__libc_init_array+0xc>
    87de:	00b3      	lsls	r3, r6, #2
    87e0:	58eb      	ldr	r3, [r5, r3]
    87e2:	4798      	blx	r3
    87e4:	3601      	adds	r6, #1
    87e6:	e7f2      	b.n	87ce <__libc_init_array+0x1e>
    87e8:	0000b06c 	.word	0x0000b06c
    87ec:	0000b06c 	.word	0x0000b06c
    87f0:	0000b06c 	.word	0x0000b06c
    87f4:	0000b070 	.word	0x0000b070

000087f8 <malloc>:
    87f8:	b510      	push	{r4, lr}
    87fa:	4b03      	ldr	r3, [pc, #12]	; (8808 <malloc+0x10>)
    87fc:	0001      	movs	r1, r0
    87fe:	6818      	ldr	r0, [r3, #0]
    8800:	f000 f872 	bl	88e8 <_malloc_r>
    8804:	bd10      	pop	{r4, pc}
    8806:	46c0      	nop			; (mov r8, r8)
    8808:	2000001c 	.word	0x2000001c

0000880c <memcpy>:
    880c:	2300      	movs	r3, #0
    880e:	b510      	push	{r4, lr}
    8810:	429a      	cmp	r2, r3
    8812:	d100      	bne.n	8816 <memcpy+0xa>
    8814:	bd10      	pop	{r4, pc}
    8816:	5ccc      	ldrb	r4, [r1, r3]
    8818:	54c4      	strb	r4, [r0, r3]
    881a:	3301      	adds	r3, #1
    881c:	e7f8      	b.n	8810 <memcpy+0x4>

0000881e <memmove>:
    881e:	b510      	push	{r4, lr}
    8820:	4288      	cmp	r0, r1
    8822:	d902      	bls.n	882a <memmove+0xc>
    8824:	188b      	adds	r3, r1, r2
    8826:	4298      	cmp	r0, r3
    8828:	d308      	bcc.n	883c <memmove+0x1e>
    882a:	2300      	movs	r3, #0
    882c:	429a      	cmp	r2, r3
    882e:	d007      	beq.n	8840 <memmove+0x22>
    8830:	5ccc      	ldrb	r4, [r1, r3]
    8832:	54c4      	strb	r4, [r0, r3]
    8834:	3301      	adds	r3, #1
    8836:	e7f9      	b.n	882c <memmove+0xe>
    8838:	5c8b      	ldrb	r3, [r1, r2]
    883a:	5483      	strb	r3, [r0, r2]
    883c:	3a01      	subs	r2, #1
    883e:	d2fb      	bcs.n	8838 <memmove+0x1a>
    8840:	bd10      	pop	{r4, pc}

00008842 <memset>:
    8842:	0003      	movs	r3, r0
    8844:	1882      	adds	r2, r0, r2
    8846:	4293      	cmp	r3, r2
    8848:	d100      	bne.n	884c <memset+0xa>
    884a:	4770      	bx	lr
    884c:	7019      	strb	r1, [r3, #0]
    884e:	3301      	adds	r3, #1
    8850:	e7f9      	b.n	8846 <memset+0x4>
	...

00008854 <_free_r>:
    8854:	b570      	push	{r4, r5, r6, lr}
    8856:	0005      	movs	r5, r0
    8858:	2900      	cmp	r1, #0
    885a:	d010      	beq.n	887e <_free_r+0x2a>
    885c:	1f0c      	subs	r4, r1, #4
    885e:	6823      	ldr	r3, [r4, #0]
    8860:	2b00      	cmp	r3, #0
    8862:	da00      	bge.n	8866 <_free_r+0x12>
    8864:	18e4      	adds	r4, r4, r3
    8866:	0028      	movs	r0, r5
    8868:	f000 fd08 	bl	927c <__malloc_lock>
    886c:	4a1d      	ldr	r2, [pc, #116]	; (88e4 <_free_r+0x90>)
    886e:	6813      	ldr	r3, [r2, #0]
    8870:	2b00      	cmp	r3, #0
    8872:	d105      	bne.n	8880 <_free_r+0x2c>
    8874:	6063      	str	r3, [r4, #4]
    8876:	6014      	str	r4, [r2, #0]
    8878:	0028      	movs	r0, r5
    887a:	f000 fd00 	bl	927e <__malloc_unlock>
    887e:	bd70      	pop	{r4, r5, r6, pc}
    8880:	42a3      	cmp	r3, r4
    8882:	d909      	bls.n	8898 <_free_r+0x44>
    8884:	6821      	ldr	r1, [r4, #0]
    8886:	1860      	adds	r0, r4, r1
    8888:	4283      	cmp	r3, r0
    888a:	d1f3      	bne.n	8874 <_free_r+0x20>
    888c:	6818      	ldr	r0, [r3, #0]
    888e:	685b      	ldr	r3, [r3, #4]
    8890:	1841      	adds	r1, r0, r1
    8892:	6021      	str	r1, [r4, #0]
    8894:	e7ee      	b.n	8874 <_free_r+0x20>
    8896:	0013      	movs	r3, r2
    8898:	685a      	ldr	r2, [r3, #4]
    889a:	2a00      	cmp	r2, #0
    889c:	d001      	beq.n	88a2 <_free_r+0x4e>
    889e:	42a2      	cmp	r2, r4
    88a0:	d9f9      	bls.n	8896 <_free_r+0x42>
    88a2:	6819      	ldr	r1, [r3, #0]
    88a4:	1858      	adds	r0, r3, r1
    88a6:	42a0      	cmp	r0, r4
    88a8:	d10b      	bne.n	88c2 <_free_r+0x6e>
    88aa:	6820      	ldr	r0, [r4, #0]
    88ac:	1809      	adds	r1, r1, r0
    88ae:	1858      	adds	r0, r3, r1
    88b0:	6019      	str	r1, [r3, #0]
    88b2:	4282      	cmp	r2, r0
    88b4:	d1e0      	bne.n	8878 <_free_r+0x24>
    88b6:	6810      	ldr	r0, [r2, #0]
    88b8:	6852      	ldr	r2, [r2, #4]
    88ba:	1841      	adds	r1, r0, r1
    88bc:	6019      	str	r1, [r3, #0]
    88be:	605a      	str	r2, [r3, #4]
    88c0:	e7da      	b.n	8878 <_free_r+0x24>
    88c2:	42a0      	cmp	r0, r4
    88c4:	d902      	bls.n	88cc <_free_r+0x78>
    88c6:	230c      	movs	r3, #12
    88c8:	602b      	str	r3, [r5, #0]
    88ca:	e7d5      	b.n	8878 <_free_r+0x24>
    88cc:	6821      	ldr	r1, [r4, #0]
    88ce:	1860      	adds	r0, r4, r1
    88d0:	4282      	cmp	r2, r0
    88d2:	d103      	bne.n	88dc <_free_r+0x88>
    88d4:	6810      	ldr	r0, [r2, #0]
    88d6:	6852      	ldr	r2, [r2, #4]
    88d8:	1841      	adds	r1, r0, r1
    88da:	6021      	str	r1, [r4, #0]
    88dc:	6062      	str	r2, [r4, #4]
    88de:	605c      	str	r4, [r3, #4]
    88e0:	e7ca      	b.n	8878 <_free_r+0x24>
    88e2:	46c0      	nop			; (mov r8, r8)
    88e4:	20000284 	.word	0x20000284

000088e8 <_malloc_r>:
    88e8:	2303      	movs	r3, #3
    88ea:	b570      	push	{r4, r5, r6, lr}
    88ec:	1ccd      	adds	r5, r1, #3
    88ee:	439d      	bics	r5, r3
    88f0:	3508      	adds	r5, #8
    88f2:	0006      	movs	r6, r0
    88f4:	2d0c      	cmp	r5, #12
    88f6:	d21e      	bcs.n	8936 <_malloc_r+0x4e>
    88f8:	250c      	movs	r5, #12
    88fa:	42a9      	cmp	r1, r5
    88fc:	d81d      	bhi.n	893a <_malloc_r+0x52>
    88fe:	0030      	movs	r0, r6
    8900:	f000 fcbc 	bl	927c <__malloc_lock>
    8904:	4a25      	ldr	r2, [pc, #148]	; (899c <_malloc_r+0xb4>)
    8906:	6814      	ldr	r4, [r2, #0]
    8908:	0021      	movs	r1, r4
    890a:	2900      	cmp	r1, #0
    890c:	d119      	bne.n	8942 <_malloc_r+0x5a>
    890e:	4c24      	ldr	r4, [pc, #144]	; (89a0 <_malloc_r+0xb8>)
    8910:	6823      	ldr	r3, [r4, #0]
    8912:	2b00      	cmp	r3, #0
    8914:	d103      	bne.n	891e <_malloc_r+0x36>
    8916:	0030      	movs	r0, r6
    8918:	f000 f8dc 	bl	8ad4 <_sbrk_r>
    891c:	6020      	str	r0, [r4, #0]
    891e:	0029      	movs	r1, r5
    8920:	0030      	movs	r0, r6
    8922:	f000 f8d7 	bl	8ad4 <_sbrk_r>
    8926:	1c43      	adds	r3, r0, #1
    8928:	d12c      	bne.n	8984 <_malloc_r+0x9c>
    892a:	230c      	movs	r3, #12
    892c:	0030      	movs	r0, r6
    892e:	6033      	str	r3, [r6, #0]
    8930:	f000 fca5 	bl	927e <__malloc_unlock>
    8934:	e003      	b.n	893e <_malloc_r+0x56>
    8936:	2d00      	cmp	r5, #0
    8938:	dadf      	bge.n	88fa <_malloc_r+0x12>
    893a:	230c      	movs	r3, #12
    893c:	6033      	str	r3, [r6, #0]
    893e:	2000      	movs	r0, #0
    8940:	bd70      	pop	{r4, r5, r6, pc}
    8942:	680b      	ldr	r3, [r1, #0]
    8944:	1b5b      	subs	r3, r3, r5
    8946:	d41a      	bmi.n	897e <_malloc_r+0x96>
    8948:	2b0b      	cmp	r3, #11
    894a:	d903      	bls.n	8954 <_malloc_r+0x6c>
    894c:	600b      	str	r3, [r1, #0]
    894e:	18cc      	adds	r4, r1, r3
    8950:	6025      	str	r5, [r4, #0]
    8952:	e003      	b.n	895c <_malloc_r+0x74>
    8954:	428c      	cmp	r4, r1
    8956:	d10e      	bne.n	8976 <_malloc_r+0x8e>
    8958:	6863      	ldr	r3, [r4, #4]
    895a:	6013      	str	r3, [r2, #0]
    895c:	0030      	movs	r0, r6
    895e:	f000 fc8e 	bl	927e <__malloc_unlock>
    8962:	0020      	movs	r0, r4
    8964:	2207      	movs	r2, #7
    8966:	300b      	adds	r0, #11
    8968:	1d23      	adds	r3, r4, #4
    896a:	4390      	bics	r0, r2
    896c:	1ac3      	subs	r3, r0, r3
    896e:	d0e7      	beq.n	8940 <_malloc_r+0x58>
    8970:	425a      	negs	r2, r3
    8972:	50e2      	str	r2, [r4, r3]
    8974:	e7e4      	b.n	8940 <_malloc_r+0x58>
    8976:	684b      	ldr	r3, [r1, #4]
    8978:	6063      	str	r3, [r4, #4]
    897a:	000c      	movs	r4, r1
    897c:	e7ee      	b.n	895c <_malloc_r+0x74>
    897e:	000c      	movs	r4, r1
    8980:	6849      	ldr	r1, [r1, #4]
    8982:	e7c2      	b.n	890a <_malloc_r+0x22>
    8984:	2303      	movs	r3, #3
    8986:	1cc4      	adds	r4, r0, #3
    8988:	439c      	bics	r4, r3
    898a:	42a0      	cmp	r0, r4
    898c:	d0e0      	beq.n	8950 <_malloc_r+0x68>
    898e:	1a21      	subs	r1, r4, r0
    8990:	0030      	movs	r0, r6
    8992:	f000 f89f 	bl	8ad4 <_sbrk_r>
    8996:	1c43      	adds	r3, r0, #1
    8998:	d1da      	bne.n	8950 <_malloc_r+0x68>
    899a:	e7c6      	b.n	892a <_malloc_r+0x42>
    899c:	20000284 	.word	0x20000284
    89a0:	20000288 	.word	0x20000288

000089a4 <iprintf>:
    89a4:	b40f      	push	{r0, r1, r2, r3}
    89a6:	4b0b      	ldr	r3, [pc, #44]	; (89d4 <iprintf+0x30>)
    89a8:	b513      	push	{r0, r1, r4, lr}
    89aa:	681c      	ldr	r4, [r3, #0]
    89ac:	2c00      	cmp	r4, #0
    89ae:	d005      	beq.n	89bc <iprintf+0x18>
    89b0:	69a3      	ldr	r3, [r4, #24]
    89b2:	2b00      	cmp	r3, #0
    89b4:	d102      	bne.n	89bc <iprintf+0x18>
    89b6:	0020      	movs	r0, r4
    89b8:	f000 fb64 	bl	9084 <__sinit>
    89bc:	ab05      	add	r3, sp, #20
    89be:	9a04      	ldr	r2, [sp, #16]
    89c0:	68a1      	ldr	r1, [r4, #8]
    89c2:	0020      	movs	r0, r4
    89c4:	9301      	str	r3, [sp, #4]
    89c6:	f000 fde9 	bl	959c <_vfiprintf_r>
    89ca:	bc16      	pop	{r1, r2, r4}
    89cc:	bc08      	pop	{r3}
    89ce:	b004      	add	sp, #16
    89d0:	4718      	bx	r3
    89d2:	46c0      	nop			; (mov r8, r8)
    89d4:	2000001c 	.word	0x2000001c

000089d8 <putchar>:
    89d8:	4b08      	ldr	r3, [pc, #32]	; (89fc <putchar+0x24>)
    89da:	b570      	push	{r4, r5, r6, lr}
    89dc:	681c      	ldr	r4, [r3, #0]
    89de:	0005      	movs	r5, r0
    89e0:	2c00      	cmp	r4, #0
    89e2:	d005      	beq.n	89f0 <putchar+0x18>
    89e4:	69a3      	ldr	r3, [r4, #24]
    89e6:	2b00      	cmp	r3, #0
    89e8:	d102      	bne.n	89f0 <putchar+0x18>
    89ea:	0020      	movs	r0, r4
    89ec:	f000 fb4a 	bl	9084 <__sinit>
    89f0:	0029      	movs	r1, r5
    89f2:	68a2      	ldr	r2, [r4, #8]
    89f4:	0020      	movs	r0, r4
    89f6:	f001 f875 	bl	9ae4 <_putc_r>
    89fa:	bd70      	pop	{r4, r5, r6, pc}
    89fc:	2000001c 	.word	0x2000001c

00008a00 <_puts_r>:
    8a00:	b570      	push	{r4, r5, r6, lr}
    8a02:	0005      	movs	r5, r0
    8a04:	000e      	movs	r6, r1
    8a06:	2800      	cmp	r0, #0
    8a08:	d004      	beq.n	8a14 <_puts_r+0x14>
    8a0a:	6983      	ldr	r3, [r0, #24]
    8a0c:	2b00      	cmp	r3, #0
    8a0e:	d101      	bne.n	8a14 <_puts_r+0x14>
    8a10:	f000 fb38 	bl	9084 <__sinit>
    8a14:	69ab      	ldr	r3, [r5, #24]
    8a16:	68ac      	ldr	r4, [r5, #8]
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d102      	bne.n	8a22 <_puts_r+0x22>
    8a1c:	0028      	movs	r0, r5
    8a1e:	f000 fb31 	bl	9084 <__sinit>
    8a22:	4b24      	ldr	r3, [pc, #144]	; (8ab4 <_puts_r+0xb4>)
    8a24:	429c      	cmp	r4, r3
    8a26:	d10f      	bne.n	8a48 <_puts_r+0x48>
    8a28:	686c      	ldr	r4, [r5, #4]
    8a2a:	89a3      	ldrh	r3, [r4, #12]
    8a2c:	071b      	lsls	r3, r3, #28
    8a2e:	d502      	bpl.n	8a36 <_puts_r+0x36>
    8a30:	6923      	ldr	r3, [r4, #16]
    8a32:	2b00      	cmp	r3, #0
    8a34:	d120      	bne.n	8a78 <_puts_r+0x78>
    8a36:	0021      	movs	r1, r4
    8a38:	0028      	movs	r0, r5
    8a3a:	f000 f9b5 	bl	8da8 <__swsetup_r>
    8a3e:	2800      	cmp	r0, #0
    8a40:	d01a      	beq.n	8a78 <_puts_r+0x78>
    8a42:	2001      	movs	r0, #1
    8a44:	4240      	negs	r0, r0
    8a46:	bd70      	pop	{r4, r5, r6, pc}
    8a48:	4b1b      	ldr	r3, [pc, #108]	; (8ab8 <_puts_r+0xb8>)
    8a4a:	429c      	cmp	r4, r3
    8a4c:	d101      	bne.n	8a52 <_puts_r+0x52>
    8a4e:	68ac      	ldr	r4, [r5, #8]
    8a50:	e7eb      	b.n	8a2a <_puts_r+0x2a>
    8a52:	4b1a      	ldr	r3, [pc, #104]	; (8abc <_puts_r+0xbc>)
    8a54:	429c      	cmp	r4, r3
    8a56:	d1e8      	bne.n	8a2a <_puts_r+0x2a>
    8a58:	68ec      	ldr	r4, [r5, #12]
    8a5a:	e7e6      	b.n	8a2a <_puts_r+0x2a>
    8a5c:	3b01      	subs	r3, #1
    8a5e:	3601      	adds	r6, #1
    8a60:	60a3      	str	r3, [r4, #8]
    8a62:	2b00      	cmp	r3, #0
    8a64:	da04      	bge.n	8a70 <_puts_r+0x70>
    8a66:	69a2      	ldr	r2, [r4, #24]
    8a68:	4293      	cmp	r3, r2
    8a6a:	db16      	blt.n	8a9a <_puts_r+0x9a>
    8a6c:	290a      	cmp	r1, #10
    8a6e:	d014      	beq.n	8a9a <_puts_r+0x9a>
    8a70:	6823      	ldr	r3, [r4, #0]
    8a72:	1c5a      	adds	r2, r3, #1
    8a74:	6022      	str	r2, [r4, #0]
    8a76:	7019      	strb	r1, [r3, #0]
    8a78:	7831      	ldrb	r1, [r6, #0]
    8a7a:	68a3      	ldr	r3, [r4, #8]
    8a7c:	2900      	cmp	r1, #0
    8a7e:	d1ed      	bne.n	8a5c <_puts_r+0x5c>
    8a80:	3b01      	subs	r3, #1
    8a82:	60a3      	str	r3, [r4, #8]
    8a84:	2b00      	cmp	r3, #0
    8a86:	da0f      	bge.n	8aa8 <_puts_r+0xa8>
    8a88:	0022      	movs	r2, r4
    8a8a:	310a      	adds	r1, #10
    8a8c:	0028      	movs	r0, r5
    8a8e:	f000 f935 	bl	8cfc <__swbuf_r>
    8a92:	1c43      	adds	r3, r0, #1
    8a94:	d0d5      	beq.n	8a42 <_puts_r+0x42>
    8a96:	200a      	movs	r0, #10
    8a98:	e7d5      	b.n	8a46 <_puts_r+0x46>
    8a9a:	0022      	movs	r2, r4
    8a9c:	0028      	movs	r0, r5
    8a9e:	f000 f92d 	bl	8cfc <__swbuf_r>
    8aa2:	1c43      	adds	r3, r0, #1
    8aa4:	d1e8      	bne.n	8a78 <_puts_r+0x78>
    8aa6:	e7cc      	b.n	8a42 <_puts_r+0x42>
    8aa8:	200a      	movs	r0, #10
    8aaa:	6823      	ldr	r3, [r4, #0]
    8aac:	1c5a      	adds	r2, r3, #1
    8aae:	6022      	str	r2, [r4, #0]
    8ab0:	7018      	strb	r0, [r3, #0]
    8ab2:	e7c8      	b.n	8a46 <_puts_r+0x46>
    8ab4:	0000afec 	.word	0x0000afec
    8ab8:	0000b00c 	.word	0x0000b00c
    8abc:	0000afcc 	.word	0x0000afcc

00008ac0 <puts>:
    8ac0:	b510      	push	{r4, lr}
    8ac2:	4b03      	ldr	r3, [pc, #12]	; (8ad0 <puts+0x10>)
    8ac4:	0001      	movs	r1, r0
    8ac6:	6818      	ldr	r0, [r3, #0]
    8ac8:	f7ff ff9a 	bl	8a00 <_puts_r>
    8acc:	bd10      	pop	{r4, pc}
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	2000001c 	.word	0x2000001c

00008ad4 <_sbrk_r>:
    8ad4:	2300      	movs	r3, #0
    8ad6:	b570      	push	{r4, r5, r6, lr}
    8ad8:	4c06      	ldr	r4, [pc, #24]	; (8af4 <_sbrk_r+0x20>)
    8ada:	0005      	movs	r5, r0
    8adc:	0008      	movs	r0, r1
    8ade:	6023      	str	r3, [r4, #0]
    8ae0:	f7fc fef6 	bl	58d0 <_sbrk>
    8ae4:	1c43      	adds	r3, r0, #1
    8ae6:	d103      	bne.n	8af0 <_sbrk_r+0x1c>
    8ae8:	6823      	ldr	r3, [r4, #0]
    8aea:	2b00      	cmp	r3, #0
    8aec:	d000      	beq.n	8af0 <_sbrk_r+0x1c>
    8aee:	602b      	str	r3, [r5, #0]
    8af0:	bd70      	pop	{r4, r5, r6, pc}
    8af2:	46c0      	nop			; (mov r8, r8)
    8af4:	200004ac 	.word	0x200004ac

00008af8 <setbuf>:
    8af8:	424a      	negs	r2, r1
    8afa:	414a      	adcs	r2, r1
    8afc:	2380      	movs	r3, #128	; 0x80
    8afe:	b510      	push	{r4, lr}
    8b00:	0052      	lsls	r2, r2, #1
    8b02:	00db      	lsls	r3, r3, #3
    8b04:	f000 f802 	bl	8b0c <setvbuf>
    8b08:	bd10      	pop	{r4, pc}
	...

00008b0c <setvbuf>:
    8b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b0e:	001d      	movs	r5, r3
    8b10:	4b4f      	ldr	r3, [pc, #316]	; (8c50 <setvbuf+0x144>)
    8b12:	b085      	sub	sp, #20
    8b14:	681e      	ldr	r6, [r3, #0]
    8b16:	0004      	movs	r4, r0
    8b18:	000f      	movs	r7, r1
    8b1a:	9200      	str	r2, [sp, #0]
    8b1c:	2e00      	cmp	r6, #0
    8b1e:	d005      	beq.n	8b2c <setvbuf+0x20>
    8b20:	69b3      	ldr	r3, [r6, #24]
    8b22:	2b00      	cmp	r3, #0
    8b24:	d102      	bne.n	8b2c <setvbuf+0x20>
    8b26:	0030      	movs	r0, r6
    8b28:	f000 faac 	bl	9084 <__sinit>
    8b2c:	4b49      	ldr	r3, [pc, #292]	; (8c54 <setvbuf+0x148>)
    8b2e:	429c      	cmp	r4, r3
    8b30:	d150      	bne.n	8bd4 <setvbuf+0xc8>
    8b32:	6874      	ldr	r4, [r6, #4]
    8b34:	9b00      	ldr	r3, [sp, #0]
    8b36:	2b02      	cmp	r3, #2
    8b38:	d005      	beq.n	8b46 <setvbuf+0x3a>
    8b3a:	2b01      	cmp	r3, #1
    8b3c:	d900      	bls.n	8b40 <setvbuf+0x34>
    8b3e:	e084      	b.n	8c4a <setvbuf+0x13e>
    8b40:	2d00      	cmp	r5, #0
    8b42:	da00      	bge.n	8b46 <setvbuf+0x3a>
    8b44:	e081      	b.n	8c4a <setvbuf+0x13e>
    8b46:	0021      	movs	r1, r4
    8b48:	0030      	movs	r0, r6
    8b4a:	f000 fa2d 	bl	8fa8 <_fflush_r>
    8b4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8b50:	2900      	cmp	r1, #0
    8b52:	d008      	beq.n	8b66 <setvbuf+0x5a>
    8b54:	0023      	movs	r3, r4
    8b56:	3344      	adds	r3, #68	; 0x44
    8b58:	4299      	cmp	r1, r3
    8b5a:	d002      	beq.n	8b62 <setvbuf+0x56>
    8b5c:	0030      	movs	r0, r6
    8b5e:	f7ff fe79 	bl	8854 <_free_r>
    8b62:	2300      	movs	r3, #0
    8b64:	6363      	str	r3, [r4, #52]	; 0x34
    8b66:	2300      	movs	r3, #0
    8b68:	61a3      	str	r3, [r4, #24]
    8b6a:	6063      	str	r3, [r4, #4]
    8b6c:	89a3      	ldrh	r3, [r4, #12]
    8b6e:	061b      	lsls	r3, r3, #24
    8b70:	d503      	bpl.n	8b7a <setvbuf+0x6e>
    8b72:	6921      	ldr	r1, [r4, #16]
    8b74:	0030      	movs	r0, r6
    8b76:	f7ff fe6d 	bl	8854 <_free_r>
    8b7a:	89a3      	ldrh	r3, [r4, #12]
    8b7c:	4a36      	ldr	r2, [pc, #216]	; (8c58 <setvbuf+0x14c>)
    8b7e:	4013      	ands	r3, r2
    8b80:	81a3      	strh	r3, [r4, #12]
    8b82:	9b00      	ldr	r3, [sp, #0]
    8b84:	2b02      	cmp	r3, #2
    8b86:	d05a      	beq.n	8c3e <setvbuf+0x132>
    8b88:	ab03      	add	r3, sp, #12
    8b8a:	aa02      	add	r2, sp, #8
    8b8c:	0021      	movs	r1, r4
    8b8e:	0030      	movs	r0, r6
    8b90:	f000 fb0e 	bl	91b0 <__swhatbuf_r>
    8b94:	89a3      	ldrh	r3, [r4, #12]
    8b96:	4318      	orrs	r0, r3
    8b98:	81a0      	strh	r0, [r4, #12]
    8b9a:	2d00      	cmp	r5, #0
    8b9c:	d124      	bne.n	8be8 <setvbuf+0xdc>
    8b9e:	9d02      	ldr	r5, [sp, #8]
    8ba0:	0028      	movs	r0, r5
    8ba2:	f7ff fe29 	bl	87f8 <malloc>
    8ba6:	9501      	str	r5, [sp, #4]
    8ba8:	1e07      	subs	r7, r0, #0
    8baa:	d142      	bne.n	8c32 <setvbuf+0x126>
    8bac:	9b02      	ldr	r3, [sp, #8]
    8bae:	9301      	str	r3, [sp, #4]
    8bb0:	42ab      	cmp	r3, r5
    8bb2:	d139      	bne.n	8c28 <setvbuf+0x11c>
    8bb4:	2001      	movs	r0, #1
    8bb6:	4240      	negs	r0, r0
    8bb8:	2302      	movs	r3, #2
    8bba:	89a2      	ldrh	r2, [r4, #12]
    8bbc:	4313      	orrs	r3, r2
    8bbe:	81a3      	strh	r3, [r4, #12]
    8bc0:	2300      	movs	r3, #0
    8bc2:	60a3      	str	r3, [r4, #8]
    8bc4:	0023      	movs	r3, r4
    8bc6:	3347      	adds	r3, #71	; 0x47
    8bc8:	6023      	str	r3, [r4, #0]
    8bca:	6123      	str	r3, [r4, #16]
    8bcc:	2301      	movs	r3, #1
    8bce:	6163      	str	r3, [r4, #20]
    8bd0:	b005      	add	sp, #20
    8bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8bd4:	4b21      	ldr	r3, [pc, #132]	; (8c5c <setvbuf+0x150>)
    8bd6:	429c      	cmp	r4, r3
    8bd8:	d101      	bne.n	8bde <setvbuf+0xd2>
    8bda:	68b4      	ldr	r4, [r6, #8]
    8bdc:	e7aa      	b.n	8b34 <setvbuf+0x28>
    8bde:	4b20      	ldr	r3, [pc, #128]	; (8c60 <setvbuf+0x154>)
    8be0:	429c      	cmp	r4, r3
    8be2:	d1a7      	bne.n	8b34 <setvbuf+0x28>
    8be4:	68f4      	ldr	r4, [r6, #12]
    8be6:	e7a5      	b.n	8b34 <setvbuf+0x28>
    8be8:	2f00      	cmp	r7, #0
    8bea:	d0d9      	beq.n	8ba0 <setvbuf+0x94>
    8bec:	69b3      	ldr	r3, [r6, #24]
    8bee:	2b00      	cmp	r3, #0
    8bf0:	d102      	bne.n	8bf8 <setvbuf+0xec>
    8bf2:	0030      	movs	r0, r6
    8bf4:	f000 fa46 	bl	9084 <__sinit>
    8bf8:	9b00      	ldr	r3, [sp, #0]
    8bfa:	2b01      	cmp	r3, #1
    8bfc:	d103      	bne.n	8c06 <setvbuf+0xfa>
    8bfe:	89a3      	ldrh	r3, [r4, #12]
    8c00:	9a00      	ldr	r2, [sp, #0]
    8c02:	431a      	orrs	r2, r3
    8c04:	81a2      	strh	r2, [r4, #12]
    8c06:	2008      	movs	r0, #8
    8c08:	89a3      	ldrh	r3, [r4, #12]
    8c0a:	6027      	str	r7, [r4, #0]
    8c0c:	6127      	str	r7, [r4, #16]
    8c0e:	6165      	str	r5, [r4, #20]
    8c10:	4018      	ands	r0, r3
    8c12:	d018      	beq.n	8c46 <setvbuf+0x13a>
    8c14:	2001      	movs	r0, #1
    8c16:	4018      	ands	r0, r3
    8c18:	2300      	movs	r3, #0
    8c1a:	4298      	cmp	r0, r3
    8c1c:	d011      	beq.n	8c42 <setvbuf+0x136>
    8c1e:	426d      	negs	r5, r5
    8c20:	60a3      	str	r3, [r4, #8]
    8c22:	61a5      	str	r5, [r4, #24]
    8c24:	0018      	movs	r0, r3
    8c26:	e7d3      	b.n	8bd0 <setvbuf+0xc4>
    8c28:	9801      	ldr	r0, [sp, #4]
    8c2a:	f7ff fde5 	bl	87f8 <malloc>
    8c2e:	1e07      	subs	r7, r0, #0
    8c30:	d0c0      	beq.n	8bb4 <setvbuf+0xa8>
    8c32:	2380      	movs	r3, #128	; 0x80
    8c34:	89a2      	ldrh	r2, [r4, #12]
    8c36:	9d01      	ldr	r5, [sp, #4]
    8c38:	4313      	orrs	r3, r2
    8c3a:	81a3      	strh	r3, [r4, #12]
    8c3c:	e7d6      	b.n	8bec <setvbuf+0xe0>
    8c3e:	2000      	movs	r0, #0
    8c40:	e7ba      	b.n	8bb8 <setvbuf+0xac>
    8c42:	60a5      	str	r5, [r4, #8]
    8c44:	e7c4      	b.n	8bd0 <setvbuf+0xc4>
    8c46:	60a0      	str	r0, [r4, #8]
    8c48:	e7c2      	b.n	8bd0 <setvbuf+0xc4>
    8c4a:	2001      	movs	r0, #1
    8c4c:	4240      	negs	r0, r0
    8c4e:	e7bf      	b.n	8bd0 <setvbuf+0xc4>
    8c50:	2000001c 	.word	0x2000001c
    8c54:	0000afec 	.word	0x0000afec
    8c58:	fffff35c 	.word	0xfffff35c
    8c5c:	0000b00c 	.word	0x0000b00c
    8c60:	0000afcc 	.word	0x0000afcc

00008c64 <siprintf>:
    8c64:	b40e      	push	{r1, r2, r3}
    8c66:	b510      	push	{r4, lr}
    8c68:	b09d      	sub	sp, #116	; 0x74
    8c6a:	a902      	add	r1, sp, #8
    8c6c:	9002      	str	r0, [sp, #8]
    8c6e:	6108      	str	r0, [r1, #16]
    8c70:	480b      	ldr	r0, [pc, #44]	; (8ca0 <siprintf+0x3c>)
    8c72:	2482      	movs	r4, #130	; 0x82
    8c74:	6088      	str	r0, [r1, #8]
    8c76:	6148      	str	r0, [r1, #20]
    8c78:	2001      	movs	r0, #1
    8c7a:	4240      	negs	r0, r0
    8c7c:	ab1f      	add	r3, sp, #124	; 0x7c
    8c7e:	81c8      	strh	r0, [r1, #14]
    8c80:	4808      	ldr	r0, [pc, #32]	; (8ca4 <siprintf+0x40>)
    8c82:	cb04      	ldmia	r3!, {r2}
    8c84:	00a4      	lsls	r4, r4, #2
    8c86:	6800      	ldr	r0, [r0, #0]
    8c88:	9301      	str	r3, [sp, #4]
    8c8a:	818c      	strh	r4, [r1, #12]
    8c8c:	f000 fb5a 	bl	9344 <_svfiprintf_r>
    8c90:	2300      	movs	r3, #0
    8c92:	9a02      	ldr	r2, [sp, #8]
    8c94:	7013      	strb	r3, [r2, #0]
    8c96:	b01d      	add	sp, #116	; 0x74
    8c98:	bc10      	pop	{r4}
    8c9a:	bc08      	pop	{r3}
    8c9c:	b003      	add	sp, #12
    8c9e:	4718      	bx	r3
    8ca0:	7fffffff 	.word	0x7fffffff
    8ca4:	2000001c 	.word	0x2000001c

00008ca8 <strcmp>:
    8ca8:	7802      	ldrb	r2, [r0, #0]
    8caa:	780b      	ldrb	r3, [r1, #0]
    8cac:	2a00      	cmp	r2, #0
    8cae:	d003      	beq.n	8cb8 <strcmp+0x10>
    8cb0:	3001      	adds	r0, #1
    8cb2:	3101      	adds	r1, #1
    8cb4:	429a      	cmp	r2, r3
    8cb6:	d0f7      	beq.n	8ca8 <strcmp>
    8cb8:	1ad0      	subs	r0, r2, r3
    8cba:	4770      	bx	lr

00008cbc <strcpy>:
    8cbc:	1c03      	adds	r3, r0, #0
    8cbe:	780a      	ldrb	r2, [r1, #0]
    8cc0:	3101      	adds	r1, #1
    8cc2:	701a      	strb	r2, [r3, #0]
    8cc4:	3301      	adds	r3, #1
    8cc6:	2a00      	cmp	r2, #0
    8cc8:	d1f9      	bne.n	8cbe <strcpy+0x2>
    8cca:	4770      	bx	lr

00008ccc <strlen>:
    8ccc:	2300      	movs	r3, #0
    8cce:	5cc2      	ldrb	r2, [r0, r3]
    8cd0:	3301      	adds	r3, #1
    8cd2:	2a00      	cmp	r2, #0
    8cd4:	d1fb      	bne.n	8cce <strlen+0x2>
    8cd6:	1e58      	subs	r0, r3, #1
    8cd8:	4770      	bx	lr

00008cda <strncmp>:
    8cda:	2300      	movs	r3, #0
    8cdc:	b530      	push	{r4, r5, lr}
    8cde:	429a      	cmp	r2, r3
    8ce0:	d00a      	beq.n	8cf8 <strncmp+0x1e>
    8ce2:	3a01      	subs	r2, #1
    8ce4:	5cc4      	ldrb	r4, [r0, r3]
    8ce6:	5ccd      	ldrb	r5, [r1, r3]
    8ce8:	42ac      	cmp	r4, r5
    8cea:	d104      	bne.n	8cf6 <strncmp+0x1c>
    8cec:	429a      	cmp	r2, r3
    8cee:	d002      	beq.n	8cf6 <strncmp+0x1c>
    8cf0:	3301      	adds	r3, #1
    8cf2:	2c00      	cmp	r4, #0
    8cf4:	d1f6      	bne.n	8ce4 <strncmp+0xa>
    8cf6:	1b63      	subs	r3, r4, r5
    8cf8:	0018      	movs	r0, r3
    8cfa:	bd30      	pop	{r4, r5, pc}

00008cfc <__swbuf_r>:
    8cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8cfe:	0005      	movs	r5, r0
    8d00:	000e      	movs	r6, r1
    8d02:	0014      	movs	r4, r2
    8d04:	2800      	cmp	r0, #0
    8d06:	d004      	beq.n	8d12 <__swbuf_r+0x16>
    8d08:	6983      	ldr	r3, [r0, #24]
    8d0a:	2b00      	cmp	r3, #0
    8d0c:	d101      	bne.n	8d12 <__swbuf_r+0x16>
    8d0e:	f000 f9b9 	bl	9084 <__sinit>
    8d12:	4b22      	ldr	r3, [pc, #136]	; (8d9c <__swbuf_r+0xa0>)
    8d14:	429c      	cmp	r4, r3
    8d16:	d12d      	bne.n	8d74 <__swbuf_r+0x78>
    8d18:	686c      	ldr	r4, [r5, #4]
    8d1a:	69a3      	ldr	r3, [r4, #24]
    8d1c:	60a3      	str	r3, [r4, #8]
    8d1e:	89a3      	ldrh	r3, [r4, #12]
    8d20:	071b      	lsls	r3, r3, #28
    8d22:	d531      	bpl.n	8d88 <__swbuf_r+0x8c>
    8d24:	6923      	ldr	r3, [r4, #16]
    8d26:	2b00      	cmp	r3, #0
    8d28:	d02e      	beq.n	8d88 <__swbuf_r+0x8c>
    8d2a:	6823      	ldr	r3, [r4, #0]
    8d2c:	6922      	ldr	r2, [r4, #16]
    8d2e:	b2f7      	uxtb	r7, r6
    8d30:	1a98      	subs	r0, r3, r2
    8d32:	6963      	ldr	r3, [r4, #20]
    8d34:	b2f6      	uxtb	r6, r6
    8d36:	4298      	cmp	r0, r3
    8d38:	db05      	blt.n	8d46 <__swbuf_r+0x4a>
    8d3a:	0021      	movs	r1, r4
    8d3c:	0028      	movs	r0, r5
    8d3e:	f000 f933 	bl	8fa8 <_fflush_r>
    8d42:	2800      	cmp	r0, #0
    8d44:	d126      	bne.n	8d94 <__swbuf_r+0x98>
    8d46:	68a3      	ldr	r3, [r4, #8]
    8d48:	3001      	adds	r0, #1
    8d4a:	3b01      	subs	r3, #1
    8d4c:	60a3      	str	r3, [r4, #8]
    8d4e:	6823      	ldr	r3, [r4, #0]
    8d50:	1c5a      	adds	r2, r3, #1
    8d52:	6022      	str	r2, [r4, #0]
    8d54:	701f      	strb	r7, [r3, #0]
    8d56:	6963      	ldr	r3, [r4, #20]
    8d58:	4298      	cmp	r0, r3
    8d5a:	d004      	beq.n	8d66 <__swbuf_r+0x6a>
    8d5c:	89a3      	ldrh	r3, [r4, #12]
    8d5e:	07db      	lsls	r3, r3, #31
    8d60:	d51a      	bpl.n	8d98 <__swbuf_r+0x9c>
    8d62:	2e0a      	cmp	r6, #10
    8d64:	d118      	bne.n	8d98 <__swbuf_r+0x9c>
    8d66:	0021      	movs	r1, r4
    8d68:	0028      	movs	r0, r5
    8d6a:	f000 f91d 	bl	8fa8 <_fflush_r>
    8d6e:	2800      	cmp	r0, #0
    8d70:	d012      	beq.n	8d98 <__swbuf_r+0x9c>
    8d72:	e00f      	b.n	8d94 <__swbuf_r+0x98>
    8d74:	4b0a      	ldr	r3, [pc, #40]	; (8da0 <__swbuf_r+0xa4>)
    8d76:	429c      	cmp	r4, r3
    8d78:	d101      	bne.n	8d7e <__swbuf_r+0x82>
    8d7a:	68ac      	ldr	r4, [r5, #8]
    8d7c:	e7cd      	b.n	8d1a <__swbuf_r+0x1e>
    8d7e:	4b09      	ldr	r3, [pc, #36]	; (8da4 <__swbuf_r+0xa8>)
    8d80:	429c      	cmp	r4, r3
    8d82:	d1ca      	bne.n	8d1a <__swbuf_r+0x1e>
    8d84:	68ec      	ldr	r4, [r5, #12]
    8d86:	e7c8      	b.n	8d1a <__swbuf_r+0x1e>
    8d88:	0021      	movs	r1, r4
    8d8a:	0028      	movs	r0, r5
    8d8c:	f000 f80c 	bl	8da8 <__swsetup_r>
    8d90:	2800      	cmp	r0, #0
    8d92:	d0ca      	beq.n	8d2a <__swbuf_r+0x2e>
    8d94:	2601      	movs	r6, #1
    8d96:	4276      	negs	r6, r6
    8d98:	0030      	movs	r0, r6
    8d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8d9c:	0000afec 	.word	0x0000afec
    8da0:	0000b00c 	.word	0x0000b00c
    8da4:	0000afcc 	.word	0x0000afcc

00008da8 <__swsetup_r>:
    8da8:	4b36      	ldr	r3, [pc, #216]	; (8e84 <__swsetup_r+0xdc>)
    8daa:	b570      	push	{r4, r5, r6, lr}
    8dac:	681d      	ldr	r5, [r3, #0]
    8dae:	0006      	movs	r6, r0
    8db0:	000c      	movs	r4, r1
    8db2:	2d00      	cmp	r5, #0
    8db4:	d005      	beq.n	8dc2 <__swsetup_r+0x1a>
    8db6:	69ab      	ldr	r3, [r5, #24]
    8db8:	2b00      	cmp	r3, #0
    8dba:	d102      	bne.n	8dc2 <__swsetup_r+0x1a>
    8dbc:	0028      	movs	r0, r5
    8dbe:	f000 f961 	bl	9084 <__sinit>
    8dc2:	4b31      	ldr	r3, [pc, #196]	; (8e88 <__swsetup_r+0xe0>)
    8dc4:	429c      	cmp	r4, r3
    8dc6:	d10f      	bne.n	8de8 <__swsetup_r+0x40>
    8dc8:	686c      	ldr	r4, [r5, #4]
    8dca:	230c      	movs	r3, #12
    8dcc:	5ee2      	ldrsh	r2, [r4, r3]
    8dce:	b293      	uxth	r3, r2
    8dd0:	0719      	lsls	r1, r3, #28
    8dd2:	d42d      	bmi.n	8e30 <__swsetup_r+0x88>
    8dd4:	06d9      	lsls	r1, r3, #27
    8dd6:	d411      	bmi.n	8dfc <__swsetup_r+0x54>
    8dd8:	2309      	movs	r3, #9
    8dda:	2001      	movs	r0, #1
    8ddc:	6033      	str	r3, [r6, #0]
    8dde:	3337      	adds	r3, #55	; 0x37
    8de0:	4313      	orrs	r3, r2
    8de2:	81a3      	strh	r3, [r4, #12]
    8de4:	4240      	negs	r0, r0
    8de6:	bd70      	pop	{r4, r5, r6, pc}
    8de8:	4b28      	ldr	r3, [pc, #160]	; (8e8c <__swsetup_r+0xe4>)
    8dea:	429c      	cmp	r4, r3
    8dec:	d101      	bne.n	8df2 <__swsetup_r+0x4a>
    8dee:	68ac      	ldr	r4, [r5, #8]
    8df0:	e7eb      	b.n	8dca <__swsetup_r+0x22>
    8df2:	4b27      	ldr	r3, [pc, #156]	; (8e90 <__swsetup_r+0xe8>)
    8df4:	429c      	cmp	r4, r3
    8df6:	d1e8      	bne.n	8dca <__swsetup_r+0x22>
    8df8:	68ec      	ldr	r4, [r5, #12]
    8dfa:	e7e6      	b.n	8dca <__swsetup_r+0x22>
    8dfc:	075b      	lsls	r3, r3, #29
    8dfe:	d513      	bpl.n	8e28 <__swsetup_r+0x80>
    8e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8e02:	2900      	cmp	r1, #0
    8e04:	d008      	beq.n	8e18 <__swsetup_r+0x70>
    8e06:	0023      	movs	r3, r4
    8e08:	3344      	adds	r3, #68	; 0x44
    8e0a:	4299      	cmp	r1, r3
    8e0c:	d002      	beq.n	8e14 <__swsetup_r+0x6c>
    8e0e:	0030      	movs	r0, r6
    8e10:	f7ff fd20 	bl	8854 <_free_r>
    8e14:	2300      	movs	r3, #0
    8e16:	6363      	str	r3, [r4, #52]	; 0x34
    8e18:	2224      	movs	r2, #36	; 0x24
    8e1a:	89a3      	ldrh	r3, [r4, #12]
    8e1c:	4393      	bics	r3, r2
    8e1e:	81a3      	strh	r3, [r4, #12]
    8e20:	2300      	movs	r3, #0
    8e22:	6063      	str	r3, [r4, #4]
    8e24:	6923      	ldr	r3, [r4, #16]
    8e26:	6023      	str	r3, [r4, #0]
    8e28:	2308      	movs	r3, #8
    8e2a:	89a2      	ldrh	r2, [r4, #12]
    8e2c:	4313      	orrs	r3, r2
    8e2e:	81a3      	strh	r3, [r4, #12]
    8e30:	6923      	ldr	r3, [r4, #16]
    8e32:	2b00      	cmp	r3, #0
    8e34:	d10b      	bne.n	8e4e <__swsetup_r+0xa6>
    8e36:	21a0      	movs	r1, #160	; 0xa0
    8e38:	2280      	movs	r2, #128	; 0x80
    8e3a:	89a3      	ldrh	r3, [r4, #12]
    8e3c:	0089      	lsls	r1, r1, #2
    8e3e:	0092      	lsls	r2, r2, #2
    8e40:	400b      	ands	r3, r1
    8e42:	4293      	cmp	r3, r2
    8e44:	d003      	beq.n	8e4e <__swsetup_r+0xa6>
    8e46:	0021      	movs	r1, r4
    8e48:	0030      	movs	r0, r6
    8e4a:	f000 f9d9 	bl	9200 <__smakebuf_r>
    8e4e:	2301      	movs	r3, #1
    8e50:	89a2      	ldrh	r2, [r4, #12]
    8e52:	4013      	ands	r3, r2
    8e54:	d011      	beq.n	8e7a <__swsetup_r+0xd2>
    8e56:	2300      	movs	r3, #0
    8e58:	60a3      	str	r3, [r4, #8]
    8e5a:	6963      	ldr	r3, [r4, #20]
    8e5c:	425b      	negs	r3, r3
    8e5e:	61a3      	str	r3, [r4, #24]
    8e60:	2000      	movs	r0, #0
    8e62:	6923      	ldr	r3, [r4, #16]
    8e64:	4283      	cmp	r3, r0
    8e66:	d1be      	bne.n	8de6 <__swsetup_r+0x3e>
    8e68:	230c      	movs	r3, #12
    8e6a:	5ee2      	ldrsh	r2, [r4, r3]
    8e6c:	0613      	lsls	r3, r2, #24
    8e6e:	d5ba      	bpl.n	8de6 <__swsetup_r+0x3e>
    8e70:	2340      	movs	r3, #64	; 0x40
    8e72:	4313      	orrs	r3, r2
    8e74:	81a3      	strh	r3, [r4, #12]
    8e76:	3801      	subs	r0, #1
    8e78:	e7b5      	b.n	8de6 <__swsetup_r+0x3e>
    8e7a:	0792      	lsls	r2, r2, #30
    8e7c:	d400      	bmi.n	8e80 <__swsetup_r+0xd8>
    8e7e:	6963      	ldr	r3, [r4, #20]
    8e80:	60a3      	str	r3, [r4, #8]
    8e82:	e7ed      	b.n	8e60 <__swsetup_r+0xb8>
    8e84:	2000001c 	.word	0x2000001c
    8e88:	0000afec 	.word	0x0000afec
    8e8c:	0000b00c 	.word	0x0000b00c
    8e90:	0000afcc 	.word	0x0000afcc

00008e94 <__sflush_r>:
    8e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8e96:	898a      	ldrh	r2, [r1, #12]
    8e98:	0005      	movs	r5, r0
    8e9a:	000c      	movs	r4, r1
    8e9c:	0713      	lsls	r3, r2, #28
    8e9e:	d460      	bmi.n	8f62 <__sflush_r+0xce>
    8ea0:	684b      	ldr	r3, [r1, #4]
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	dc04      	bgt.n	8eb0 <__sflush_r+0x1c>
    8ea6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    8ea8:	2b00      	cmp	r3, #0
    8eaa:	dc01      	bgt.n	8eb0 <__sflush_r+0x1c>
    8eac:	2000      	movs	r0, #0
    8eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8eb0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8eb2:	2f00      	cmp	r7, #0
    8eb4:	d0fa      	beq.n	8eac <__sflush_r+0x18>
    8eb6:	2300      	movs	r3, #0
    8eb8:	682e      	ldr	r6, [r5, #0]
    8eba:	602b      	str	r3, [r5, #0]
    8ebc:	2380      	movs	r3, #128	; 0x80
    8ebe:	015b      	lsls	r3, r3, #5
    8ec0:	401a      	ands	r2, r3
    8ec2:	d034      	beq.n	8f2e <__sflush_r+0x9a>
    8ec4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    8ec6:	89a3      	ldrh	r3, [r4, #12]
    8ec8:	075b      	lsls	r3, r3, #29
    8eca:	d506      	bpl.n	8eda <__sflush_r+0x46>
    8ecc:	6863      	ldr	r3, [r4, #4]
    8ece:	1ac0      	subs	r0, r0, r3
    8ed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d001      	beq.n	8eda <__sflush_r+0x46>
    8ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    8ed8:	1ac0      	subs	r0, r0, r3
    8eda:	0002      	movs	r2, r0
    8edc:	6a21      	ldr	r1, [r4, #32]
    8ede:	2300      	movs	r3, #0
    8ee0:	0028      	movs	r0, r5
    8ee2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    8ee4:	47b8      	blx	r7
    8ee6:	89a1      	ldrh	r1, [r4, #12]
    8ee8:	1c43      	adds	r3, r0, #1
    8eea:	d106      	bne.n	8efa <__sflush_r+0x66>
    8eec:	682b      	ldr	r3, [r5, #0]
    8eee:	2b1d      	cmp	r3, #29
    8ef0:	d831      	bhi.n	8f56 <__sflush_r+0xc2>
    8ef2:	4a2c      	ldr	r2, [pc, #176]	; (8fa4 <__sflush_r+0x110>)
    8ef4:	40da      	lsrs	r2, r3
    8ef6:	07d3      	lsls	r3, r2, #31
    8ef8:	d52d      	bpl.n	8f56 <__sflush_r+0xc2>
    8efa:	2300      	movs	r3, #0
    8efc:	6063      	str	r3, [r4, #4]
    8efe:	6923      	ldr	r3, [r4, #16]
    8f00:	6023      	str	r3, [r4, #0]
    8f02:	04cb      	lsls	r3, r1, #19
    8f04:	d505      	bpl.n	8f12 <__sflush_r+0x7e>
    8f06:	1c43      	adds	r3, r0, #1
    8f08:	d102      	bne.n	8f10 <__sflush_r+0x7c>
    8f0a:	682b      	ldr	r3, [r5, #0]
    8f0c:	2b00      	cmp	r3, #0
    8f0e:	d100      	bne.n	8f12 <__sflush_r+0x7e>
    8f10:	6560      	str	r0, [r4, #84]	; 0x54
    8f12:	6b61      	ldr	r1, [r4, #52]	; 0x34
    8f14:	602e      	str	r6, [r5, #0]
    8f16:	2900      	cmp	r1, #0
    8f18:	d0c8      	beq.n	8eac <__sflush_r+0x18>
    8f1a:	0023      	movs	r3, r4
    8f1c:	3344      	adds	r3, #68	; 0x44
    8f1e:	4299      	cmp	r1, r3
    8f20:	d002      	beq.n	8f28 <__sflush_r+0x94>
    8f22:	0028      	movs	r0, r5
    8f24:	f7ff fc96 	bl	8854 <_free_r>
    8f28:	2000      	movs	r0, #0
    8f2a:	6360      	str	r0, [r4, #52]	; 0x34
    8f2c:	e7bf      	b.n	8eae <__sflush_r+0x1a>
    8f2e:	2301      	movs	r3, #1
    8f30:	6a21      	ldr	r1, [r4, #32]
    8f32:	0028      	movs	r0, r5
    8f34:	47b8      	blx	r7
    8f36:	1c43      	adds	r3, r0, #1
    8f38:	d1c5      	bne.n	8ec6 <__sflush_r+0x32>
    8f3a:	682b      	ldr	r3, [r5, #0]
    8f3c:	2b00      	cmp	r3, #0
    8f3e:	d0c2      	beq.n	8ec6 <__sflush_r+0x32>
    8f40:	2b1d      	cmp	r3, #29
    8f42:	d001      	beq.n	8f48 <__sflush_r+0xb4>
    8f44:	2b16      	cmp	r3, #22
    8f46:	d101      	bne.n	8f4c <__sflush_r+0xb8>
    8f48:	602e      	str	r6, [r5, #0]
    8f4a:	e7af      	b.n	8eac <__sflush_r+0x18>
    8f4c:	2340      	movs	r3, #64	; 0x40
    8f4e:	89a2      	ldrh	r2, [r4, #12]
    8f50:	4313      	orrs	r3, r2
    8f52:	81a3      	strh	r3, [r4, #12]
    8f54:	e7ab      	b.n	8eae <__sflush_r+0x1a>
    8f56:	2340      	movs	r3, #64	; 0x40
    8f58:	430b      	orrs	r3, r1
    8f5a:	2001      	movs	r0, #1
    8f5c:	81a3      	strh	r3, [r4, #12]
    8f5e:	4240      	negs	r0, r0
    8f60:	e7a5      	b.n	8eae <__sflush_r+0x1a>
    8f62:	690f      	ldr	r7, [r1, #16]
    8f64:	2f00      	cmp	r7, #0
    8f66:	d0a1      	beq.n	8eac <__sflush_r+0x18>
    8f68:	680b      	ldr	r3, [r1, #0]
    8f6a:	600f      	str	r7, [r1, #0]
    8f6c:	1bdb      	subs	r3, r3, r7
    8f6e:	9301      	str	r3, [sp, #4]
    8f70:	2300      	movs	r3, #0
    8f72:	0792      	lsls	r2, r2, #30
    8f74:	d100      	bne.n	8f78 <__sflush_r+0xe4>
    8f76:	694b      	ldr	r3, [r1, #20]
    8f78:	60a3      	str	r3, [r4, #8]
    8f7a:	9b01      	ldr	r3, [sp, #4]
    8f7c:	2b00      	cmp	r3, #0
    8f7e:	dc00      	bgt.n	8f82 <__sflush_r+0xee>
    8f80:	e794      	b.n	8eac <__sflush_r+0x18>
    8f82:	9b01      	ldr	r3, [sp, #4]
    8f84:	003a      	movs	r2, r7
    8f86:	6a21      	ldr	r1, [r4, #32]
    8f88:	0028      	movs	r0, r5
    8f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    8f8c:	47b0      	blx	r6
    8f8e:	2800      	cmp	r0, #0
    8f90:	dc03      	bgt.n	8f9a <__sflush_r+0x106>
    8f92:	2340      	movs	r3, #64	; 0x40
    8f94:	89a2      	ldrh	r2, [r4, #12]
    8f96:	4313      	orrs	r3, r2
    8f98:	e7df      	b.n	8f5a <__sflush_r+0xc6>
    8f9a:	9b01      	ldr	r3, [sp, #4]
    8f9c:	183f      	adds	r7, r7, r0
    8f9e:	1a1b      	subs	r3, r3, r0
    8fa0:	9301      	str	r3, [sp, #4]
    8fa2:	e7ea      	b.n	8f7a <__sflush_r+0xe6>
    8fa4:	20400001 	.word	0x20400001

00008fa8 <_fflush_r>:
    8fa8:	690b      	ldr	r3, [r1, #16]
    8faa:	b570      	push	{r4, r5, r6, lr}
    8fac:	0005      	movs	r5, r0
    8fae:	000c      	movs	r4, r1
    8fb0:	2b00      	cmp	r3, #0
    8fb2:	d101      	bne.n	8fb8 <_fflush_r+0x10>
    8fb4:	2000      	movs	r0, #0
    8fb6:	bd70      	pop	{r4, r5, r6, pc}
    8fb8:	2800      	cmp	r0, #0
    8fba:	d004      	beq.n	8fc6 <_fflush_r+0x1e>
    8fbc:	6983      	ldr	r3, [r0, #24]
    8fbe:	2b00      	cmp	r3, #0
    8fc0:	d101      	bne.n	8fc6 <_fflush_r+0x1e>
    8fc2:	f000 f85f 	bl	9084 <__sinit>
    8fc6:	4b0b      	ldr	r3, [pc, #44]	; (8ff4 <_fflush_r+0x4c>)
    8fc8:	429c      	cmp	r4, r3
    8fca:	d109      	bne.n	8fe0 <_fflush_r+0x38>
    8fcc:	686c      	ldr	r4, [r5, #4]
    8fce:	220c      	movs	r2, #12
    8fd0:	5ea3      	ldrsh	r3, [r4, r2]
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	d0ee      	beq.n	8fb4 <_fflush_r+0xc>
    8fd6:	0021      	movs	r1, r4
    8fd8:	0028      	movs	r0, r5
    8fda:	f7ff ff5b 	bl	8e94 <__sflush_r>
    8fde:	e7ea      	b.n	8fb6 <_fflush_r+0xe>
    8fe0:	4b05      	ldr	r3, [pc, #20]	; (8ff8 <_fflush_r+0x50>)
    8fe2:	429c      	cmp	r4, r3
    8fe4:	d101      	bne.n	8fea <_fflush_r+0x42>
    8fe6:	68ac      	ldr	r4, [r5, #8]
    8fe8:	e7f1      	b.n	8fce <_fflush_r+0x26>
    8fea:	4b04      	ldr	r3, [pc, #16]	; (8ffc <_fflush_r+0x54>)
    8fec:	429c      	cmp	r4, r3
    8fee:	d1ee      	bne.n	8fce <_fflush_r+0x26>
    8ff0:	68ec      	ldr	r4, [r5, #12]
    8ff2:	e7ec      	b.n	8fce <_fflush_r+0x26>
    8ff4:	0000afec 	.word	0x0000afec
    8ff8:	0000b00c 	.word	0x0000b00c
    8ffc:	0000afcc 	.word	0x0000afcc

00009000 <_cleanup_r>:
    9000:	b510      	push	{r4, lr}
    9002:	4902      	ldr	r1, [pc, #8]	; (900c <_cleanup_r+0xc>)
    9004:	f000 f8b2 	bl	916c <_fwalk_reent>
    9008:	bd10      	pop	{r4, pc}
    900a:	46c0      	nop			; (mov r8, r8)
    900c:	00008fa9 	.word	0x00008fa9

00009010 <std.isra.0>:
    9010:	2300      	movs	r3, #0
    9012:	b510      	push	{r4, lr}
    9014:	0004      	movs	r4, r0
    9016:	6003      	str	r3, [r0, #0]
    9018:	6043      	str	r3, [r0, #4]
    901a:	6083      	str	r3, [r0, #8]
    901c:	8181      	strh	r1, [r0, #12]
    901e:	6643      	str	r3, [r0, #100]	; 0x64
    9020:	81c2      	strh	r2, [r0, #14]
    9022:	6103      	str	r3, [r0, #16]
    9024:	6143      	str	r3, [r0, #20]
    9026:	6183      	str	r3, [r0, #24]
    9028:	0019      	movs	r1, r3
    902a:	2208      	movs	r2, #8
    902c:	305c      	adds	r0, #92	; 0x5c
    902e:	f7ff fc08 	bl	8842 <memset>
    9032:	4b05      	ldr	r3, [pc, #20]	; (9048 <std.isra.0+0x38>)
    9034:	6224      	str	r4, [r4, #32]
    9036:	6263      	str	r3, [r4, #36]	; 0x24
    9038:	4b04      	ldr	r3, [pc, #16]	; (904c <std.isra.0+0x3c>)
    903a:	62a3      	str	r3, [r4, #40]	; 0x28
    903c:	4b04      	ldr	r3, [pc, #16]	; (9050 <std.isra.0+0x40>)
    903e:	62e3      	str	r3, [r4, #44]	; 0x2c
    9040:	4b04      	ldr	r3, [pc, #16]	; (9054 <std.isra.0+0x44>)
    9042:	6323      	str	r3, [r4, #48]	; 0x30
    9044:	bd10      	pop	{r4, pc}
    9046:	46c0      	nop			; (mov r8, r8)
    9048:	00009b51 	.word	0x00009b51
    904c:	00009b79 	.word	0x00009b79
    9050:	00009bb1 	.word	0x00009bb1
    9054:	00009bdd 	.word	0x00009bdd

00009058 <__sfmoreglue>:
    9058:	b570      	push	{r4, r5, r6, lr}
    905a:	2568      	movs	r5, #104	; 0x68
    905c:	1e4a      	subs	r2, r1, #1
    905e:	4355      	muls	r5, r2
    9060:	000e      	movs	r6, r1
    9062:	0029      	movs	r1, r5
    9064:	3174      	adds	r1, #116	; 0x74
    9066:	f7ff fc3f 	bl	88e8 <_malloc_r>
    906a:	1e04      	subs	r4, r0, #0
    906c:	d008      	beq.n	9080 <__sfmoreglue+0x28>
    906e:	2100      	movs	r1, #0
    9070:	002a      	movs	r2, r5
    9072:	6001      	str	r1, [r0, #0]
    9074:	6046      	str	r6, [r0, #4]
    9076:	300c      	adds	r0, #12
    9078:	60a0      	str	r0, [r4, #8]
    907a:	3268      	adds	r2, #104	; 0x68
    907c:	f7ff fbe1 	bl	8842 <memset>
    9080:	0020      	movs	r0, r4
    9082:	bd70      	pop	{r4, r5, r6, pc}

00009084 <__sinit>:
    9084:	6983      	ldr	r3, [r0, #24]
    9086:	b513      	push	{r0, r1, r4, lr}
    9088:	0004      	movs	r4, r0
    908a:	2b00      	cmp	r3, #0
    908c:	d128      	bne.n	90e0 <__sinit+0x5c>
    908e:	6483      	str	r3, [r0, #72]	; 0x48
    9090:	64c3      	str	r3, [r0, #76]	; 0x4c
    9092:	6503      	str	r3, [r0, #80]	; 0x50
    9094:	4b13      	ldr	r3, [pc, #76]	; (90e4 <__sinit+0x60>)
    9096:	4a14      	ldr	r2, [pc, #80]	; (90e8 <__sinit+0x64>)
    9098:	681b      	ldr	r3, [r3, #0]
    909a:	6282      	str	r2, [r0, #40]	; 0x28
    909c:	9301      	str	r3, [sp, #4]
    909e:	4298      	cmp	r0, r3
    90a0:	d101      	bne.n	90a6 <__sinit+0x22>
    90a2:	2301      	movs	r3, #1
    90a4:	6183      	str	r3, [r0, #24]
    90a6:	0020      	movs	r0, r4
    90a8:	f000 f820 	bl	90ec <__sfp>
    90ac:	6060      	str	r0, [r4, #4]
    90ae:	0020      	movs	r0, r4
    90b0:	f000 f81c 	bl	90ec <__sfp>
    90b4:	60a0      	str	r0, [r4, #8]
    90b6:	0020      	movs	r0, r4
    90b8:	f000 f818 	bl	90ec <__sfp>
    90bc:	2200      	movs	r2, #0
    90be:	60e0      	str	r0, [r4, #12]
    90c0:	2104      	movs	r1, #4
    90c2:	6860      	ldr	r0, [r4, #4]
    90c4:	f7ff ffa4 	bl	9010 <std.isra.0>
    90c8:	2201      	movs	r2, #1
    90ca:	2109      	movs	r1, #9
    90cc:	68a0      	ldr	r0, [r4, #8]
    90ce:	f7ff ff9f 	bl	9010 <std.isra.0>
    90d2:	2202      	movs	r2, #2
    90d4:	2112      	movs	r1, #18
    90d6:	68e0      	ldr	r0, [r4, #12]
    90d8:	f7ff ff9a 	bl	9010 <std.isra.0>
    90dc:	2301      	movs	r3, #1
    90de:	61a3      	str	r3, [r4, #24]
    90e0:	bd13      	pop	{r0, r1, r4, pc}
    90e2:	46c0      	nop			; (mov r8, r8)
    90e4:	0000afc8 	.word	0x0000afc8
    90e8:	00009001 	.word	0x00009001

000090ec <__sfp>:
    90ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ee:	4b1e      	ldr	r3, [pc, #120]	; (9168 <__sfp+0x7c>)
    90f0:	0007      	movs	r7, r0
    90f2:	681e      	ldr	r6, [r3, #0]
    90f4:	69b3      	ldr	r3, [r6, #24]
    90f6:	2b00      	cmp	r3, #0
    90f8:	d102      	bne.n	9100 <__sfp+0x14>
    90fa:	0030      	movs	r0, r6
    90fc:	f7ff ffc2 	bl	9084 <__sinit>
    9100:	3648      	adds	r6, #72	; 0x48
    9102:	68b4      	ldr	r4, [r6, #8]
    9104:	6873      	ldr	r3, [r6, #4]
    9106:	3b01      	subs	r3, #1
    9108:	d504      	bpl.n	9114 <__sfp+0x28>
    910a:	6833      	ldr	r3, [r6, #0]
    910c:	2b00      	cmp	r3, #0
    910e:	d007      	beq.n	9120 <__sfp+0x34>
    9110:	6836      	ldr	r6, [r6, #0]
    9112:	e7f6      	b.n	9102 <__sfp+0x16>
    9114:	220c      	movs	r2, #12
    9116:	5ea5      	ldrsh	r5, [r4, r2]
    9118:	2d00      	cmp	r5, #0
    911a:	d00d      	beq.n	9138 <__sfp+0x4c>
    911c:	3468      	adds	r4, #104	; 0x68
    911e:	e7f2      	b.n	9106 <__sfp+0x1a>
    9120:	2104      	movs	r1, #4
    9122:	0038      	movs	r0, r7
    9124:	f7ff ff98 	bl	9058 <__sfmoreglue>
    9128:	6030      	str	r0, [r6, #0]
    912a:	2800      	cmp	r0, #0
    912c:	d1f0      	bne.n	9110 <__sfp+0x24>
    912e:	230c      	movs	r3, #12
    9130:	0004      	movs	r4, r0
    9132:	603b      	str	r3, [r7, #0]
    9134:	0020      	movs	r0, r4
    9136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9138:	2301      	movs	r3, #1
    913a:	0020      	movs	r0, r4
    913c:	425b      	negs	r3, r3
    913e:	81e3      	strh	r3, [r4, #14]
    9140:	3302      	adds	r3, #2
    9142:	81a3      	strh	r3, [r4, #12]
    9144:	6665      	str	r5, [r4, #100]	; 0x64
    9146:	6025      	str	r5, [r4, #0]
    9148:	60a5      	str	r5, [r4, #8]
    914a:	6065      	str	r5, [r4, #4]
    914c:	6125      	str	r5, [r4, #16]
    914e:	6165      	str	r5, [r4, #20]
    9150:	61a5      	str	r5, [r4, #24]
    9152:	2208      	movs	r2, #8
    9154:	0029      	movs	r1, r5
    9156:	305c      	adds	r0, #92	; 0x5c
    9158:	f7ff fb73 	bl	8842 <memset>
    915c:	6365      	str	r5, [r4, #52]	; 0x34
    915e:	63a5      	str	r5, [r4, #56]	; 0x38
    9160:	64a5      	str	r5, [r4, #72]	; 0x48
    9162:	64e5      	str	r5, [r4, #76]	; 0x4c
    9164:	e7e6      	b.n	9134 <__sfp+0x48>
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	0000afc8 	.word	0x0000afc8

0000916c <_fwalk_reent>:
    916c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    916e:	0004      	movs	r4, r0
    9170:	0007      	movs	r7, r0
    9172:	2600      	movs	r6, #0
    9174:	9101      	str	r1, [sp, #4]
    9176:	3448      	adds	r4, #72	; 0x48
    9178:	2c00      	cmp	r4, #0
    917a:	d101      	bne.n	9180 <_fwalk_reent+0x14>
    917c:	0030      	movs	r0, r6
    917e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    9180:	6863      	ldr	r3, [r4, #4]
    9182:	68a5      	ldr	r5, [r4, #8]
    9184:	9300      	str	r3, [sp, #0]
    9186:	9b00      	ldr	r3, [sp, #0]
    9188:	3b01      	subs	r3, #1
    918a:	9300      	str	r3, [sp, #0]
    918c:	d501      	bpl.n	9192 <_fwalk_reent+0x26>
    918e:	6824      	ldr	r4, [r4, #0]
    9190:	e7f2      	b.n	9178 <_fwalk_reent+0xc>
    9192:	89ab      	ldrh	r3, [r5, #12]
    9194:	2b01      	cmp	r3, #1
    9196:	d908      	bls.n	91aa <_fwalk_reent+0x3e>
    9198:	220e      	movs	r2, #14
    919a:	5eab      	ldrsh	r3, [r5, r2]
    919c:	3301      	adds	r3, #1
    919e:	d004      	beq.n	91aa <_fwalk_reent+0x3e>
    91a0:	0029      	movs	r1, r5
    91a2:	0038      	movs	r0, r7
    91a4:	9b01      	ldr	r3, [sp, #4]
    91a6:	4798      	blx	r3
    91a8:	4306      	orrs	r6, r0
    91aa:	3568      	adds	r5, #104	; 0x68
    91ac:	e7eb      	b.n	9186 <_fwalk_reent+0x1a>
	...

000091b0 <__swhatbuf_r>:
    91b0:	b570      	push	{r4, r5, r6, lr}
    91b2:	000e      	movs	r6, r1
    91b4:	001d      	movs	r5, r3
    91b6:	230e      	movs	r3, #14
    91b8:	5ec9      	ldrsh	r1, [r1, r3]
    91ba:	b090      	sub	sp, #64	; 0x40
    91bc:	0014      	movs	r4, r2
    91be:	2900      	cmp	r1, #0
    91c0:	da07      	bge.n	91d2 <__swhatbuf_r+0x22>
    91c2:	2300      	movs	r3, #0
    91c4:	602b      	str	r3, [r5, #0]
    91c6:	89b3      	ldrh	r3, [r6, #12]
    91c8:	061b      	lsls	r3, r3, #24
    91ca:	d411      	bmi.n	91f0 <__swhatbuf_r+0x40>
    91cc:	2380      	movs	r3, #128	; 0x80
    91ce:	00db      	lsls	r3, r3, #3
    91d0:	e00f      	b.n	91f2 <__swhatbuf_r+0x42>
    91d2:	aa01      	add	r2, sp, #4
    91d4:	f000 fd2e 	bl	9c34 <_fstat_r>
    91d8:	2800      	cmp	r0, #0
    91da:	dbf2      	blt.n	91c2 <__swhatbuf_r+0x12>
    91dc:	22f0      	movs	r2, #240	; 0xf0
    91de:	9b02      	ldr	r3, [sp, #8]
    91e0:	0212      	lsls	r2, r2, #8
    91e2:	4013      	ands	r3, r2
    91e4:	4a05      	ldr	r2, [pc, #20]	; (91fc <__swhatbuf_r+0x4c>)
    91e6:	189b      	adds	r3, r3, r2
    91e8:	425a      	negs	r2, r3
    91ea:	4153      	adcs	r3, r2
    91ec:	602b      	str	r3, [r5, #0]
    91ee:	e7ed      	b.n	91cc <__swhatbuf_r+0x1c>
    91f0:	2340      	movs	r3, #64	; 0x40
    91f2:	2000      	movs	r0, #0
    91f4:	6023      	str	r3, [r4, #0]
    91f6:	b010      	add	sp, #64	; 0x40
    91f8:	bd70      	pop	{r4, r5, r6, pc}
    91fa:	46c0      	nop			; (mov r8, r8)
    91fc:	ffffe000 	.word	0xffffe000

00009200 <__smakebuf_r>:
    9200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9202:	2602      	movs	r6, #2
    9204:	898b      	ldrh	r3, [r1, #12]
    9206:	0005      	movs	r5, r0
    9208:	000c      	movs	r4, r1
    920a:	4233      	tst	r3, r6
    920c:	d006      	beq.n	921c <__smakebuf_r+0x1c>
    920e:	0023      	movs	r3, r4
    9210:	3347      	adds	r3, #71	; 0x47
    9212:	6023      	str	r3, [r4, #0]
    9214:	6123      	str	r3, [r4, #16]
    9216:	2301      	movs	r3, #1
    9218:	6163      	str	r3, [r4, #20]
    921a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    921c:	ab01      	add	r3, sp, #4
    921e:	466a      	mov	r2, sp
    9220:	f7ff ffc6 	bl	91b0 <__swhatbuf_r>
    9224:	9900      	ldr	r1, [sp, #0]
    9226:	0007      	movs	r7, r0
    9228:	0028      	movs	r0, r5
    922a:	f7ff fb5d 	bl	88e8 <_malloc_r>
    922e:	2800      	cmp	r0, #0
    9230:	d106      	bne.n	9240 <__smakebuf_r+0x40>
    9232:	220c      	movs	r2, #12
    9234:	5ea3      	ldrsh	r3, [r4, r2]
    9236:	059a      	lsls	r2, r3, #22
    9238:	d4ef      	bmi.n	921a <__smakebuf_r+0x1a>
    923a:	431e      	orrs	r6, r3
    923c:	81a6      	strh	r6, [r4, #12]
    923e:	e7e6      	b.n	920e <__smakebuf_r+0xe>
    9240:	4b0d      	ldr	r3, [pc, #52]	; (9278 <__smakebuf_r+0x78>)
    9242:	62ab      	str	r3, [r5, #40]	; 0x28
    9244:	2380      	movs	r3, #128	; 0x80
    9246:	89a2      	ldrh	r2, [r4, #12]
    9248:	6020      	str	r0, [r4, #0]
    924a:	4313      	orrs	r3, r2
    924c:	81a3      	strh	r3, [r4, #12]
    924e:	9b00      	ldr	r3, [sp, #0]
    9250:	6120      	str	r0, [r4, #16]
    9252:	6163      	str	r3, [r4, #20]
    9254:	9b01      	ldr	r3, [sp, #4]
    9256:	2b00      	cmp	r3, #0
    9258:	d00a      	beq.n	9270 <__smakebuf_r+0x70>
    925a:	230e      	movs	r3, #14
    925c:	5ee1      	ldrsh	r1, [r4, r3]
    925e:	0028      	movs	r0, r5
    9260:	f000 fcfa 	bl	9c58 <_isatty_r>
    9264:	2800      	cmp	r0, #0
    9266:	d003      	beq.n	9270 <__smakebuf_r+0x70>
    9268:	2301      	movs	r3, #1
    926a:	89a2      	ldrh	r2, [r4, #12]
    926c:	4313      	orrs	r3, r2
    926e:	81a3      	strh	r3, [r4, #12]
    9270:	89a0      	ldrh	r0, [r4, #12]
    9272:	4338      	orrs	r0, r7
    9274:	81a0      	strh	r0, [r4, #12]
    9276:	e7d0      	b.n	921a <__smakebuf_r+0x1a>
    9278:	00009001 	.word	0x00009001

0000927c <__malloc_lock>:
    927c:	4770      	bx	lr

0000927e <__malloc_unlock>:
    927e:	4770      	bx	lr

00009280 <__ssputs_r>:
    9280:	b5f0      	push	{r4, r5, r6, r7, lr}
    9282:	688e      	ldr	r6, [r1, #8]
    9284:	b085      	sub	sp, #20
    9286:	0007      	movs	r7, r0
    9288:	000c      	movs	r4, r1
    928a:	9203      	str	r2, [sp, #12]
    928c:	9301      	str	r3, [sp, #4]
    928e:	429e      	cmp	r6, r3
    9290:	d839      	bhi.n	9306 <__ssputs_r+0x86>
    9292:	2390      	movs	r3, #144	; 0x90
    9294:	898a      	ldrh	r2, [r1, #12]
    9296:	00db      	lsls	r3, r3, #3
    9298:	421a      	tst	r2, r3
    929a:	d034      	beq.n	9306 <__ssputs_r+0x86>
    929c:	2503      	movs	r5, #3
    929e:	6909      	ldr	r1, [r1, #16]
    92a0:	6823      	ldr	r3, [r4, #0]
    92a2:	1a5b      	subs	r3, r3, r1
    92a4:	9302      	str	r3, [sp, #8]
    92a6:	6963      	ldr	r3, [r4, #20]
    92a8:	9802      	ldr	r0, [sp, #8]
    92aa:	435d      	muls	r5, r3
    92ac:	0feb      	lsrs	r3, r5, #31
    92ae:	195d      	adds	r5, r3, r5
    92b0:	9b01      	ldr	r3, [sp, #4]
    92b2:	106d      	asrs	r5, r5, #1
    92b4:	3301      	adds	r3, #1
    92b6:	181b      	adds	r3, r3, r0
    92b8:	42ab      	cmp	r3, r5
    92ba:	d900      	bls.n	92be <__ssputs_r+0x3e>
    92bc:	001d      	movs	r5, r3
    92be:	0553      	lsls	r3, r2, #21
    92c0:	d532      	bpl.n	9328 <__ssputs_r+0xa8>
    92c2:	0029      	movs	r1, r5
    92c4:	0038      	movs	r0, r7
    92c6:	f7ff fb0f 	bl	88e8 <_malloc_r>
    92ca:	1e06      	subs	r6, r0, #0
    92cc:	d109      	bne.n	92e2 <__ssputs_r+0x62>
    92ce:	230c      	movs	r3, #12
    92d0:	603b      	str	r3, [r7, #0]
    92d2:	2340      	movs	r3, #64	; 0x40
    92d4:	2001      	movs	r0, #1
    92d6:	89a2      	ldrh	r2, [r4, #12]
    92d8:	4240      	negs	r0, r0
    92da:	4313      	orrs	r3, r2
    92dc:	81a3      	strh	r3, [r4, #12]
    92de:	b005      	add	sp, #20
    92e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    92e2:	9a02      	ldr	r2, [sp, #8]
    92e4:	6921      	ldr	r1, [r4, #16]
    92e6:	f7ff fa91 	bl	880c <memcpy>
    92ea:	89a3      	ldrh	r3, [r4, #12]
    92ec:	4a14      	ldr	r2, [pc, #80]	; (9340 <__ssputs_r+0xc0>)
    92ee:	401a      	ands	r2, r3
    92f0:	2380      	movs	r3, #128	; 0x80
    92f2:	4313      	orrs	r3, r2
    92f4:	81a3      	strh	r3, [r4, #12]
    92f6:	9b02      	ldr	r3, [sp, #8]
    92f8:	6126      	str	r6, [r4, #16]
    92fa:	18f6      	adds	r6, r6, r3
    92fc:	6026      	str	r6, [r4, #0]
    92fe:	6165      	str	r5, [r4, #20]
    9300:	9e01      	ldr	r6, [sp, #4]
    9302:	1aed      	subs	r5, r5, r3
    9304:	60a5      	str	r5, [r4, #8]
    9306:	9b01      	ldr	r3, [sp, #4]
    9308:	42b3      	cmp	r3, r6
    930a:	d200      	bcs.n	930e <__ssputs_r+0x8e>
    930c:	001e      	movs	r6, r3
    930e:	0032      	movs	r2, r6
    9310:	9903      	ldr	r1, [sp, #12]
    9312:	6820      	ldr	r0, [r4, #0]
    9314:	f7ff fa83 	bl	881e <memmove>
    9318:	68a3      	ldr	r3, [r4, #8]
    931a:	2000      	movs	r0, #0
    931c:	1b9b      	subs	r3, r3, r6
    931e:	60a3      	str	r3, [r4, #8]
    9320:	6823      	ldr	r3, [r4, #0]
    9322:	199e      	adds	r6, r3, r6
    9324:	6026      	str	r6, [r4, #0]
    9326:	e7da      	b.n	92de <__ssputs_r+0x5e>
    9328:	002a      	movs	r2, r5
    932a:	0038      	movs	r0, r7
    932c:	f000 fcc5 	bl	9cba <_realloc_r>
    9330:	1e06      	subs	r6, r0, #0
    9332:	d1e0      	bne.n	92f6 <__ssputs_r+0x76>
    9334:	6921      	ldr	r1, [r4, #16]
    9336:	0038      	movs	r0, r7
    9338:	f7ff fa8c 	bl	8854 <_free_r>
    933c:	e7c7      	b.n	92ce <__ssputs_r+0x4e>
    933e:	46c0      	nop			; (mov r8, r8)
    9340:	fffffb7f 	.word	0xfffffb7f

00009344 <_svfiprintf_r>:
    9344:	b5f0      	push	{r4, r5, r6, r7, lr}
    9346:	b09f      	sub	sp, #124	; 0x7c
    9348:	9002      	str	r0, [sp, #8]
    934a:	9305      	str	r3, [sp, #20]
    934c:	898b      	ldrh	r3, [r1, #12]
    934e:	000f      	movs	r7, r1
    9350:	0016      	movs	r6, r2
    9352:	061b      	lsls	r3, r3, #24
    9354:	d511      	bpl.n	937a <_svfiprintf_r+0x36>
    9356:	690b      	ldr	r3, [r1, #16]
    9358:	2b00      	cmp	r3, #0
    935a:	d10e      	bne.n	937a <_svfiprintf_r+0x36>
    935c:	2140      	movs	r1, #64	; 0x40
    935e:	f7ff fac3 	bl	88e8 <_malloc_r>
    9362:	6038      	str	r0, [r7, #0]
    9364:	6138      	str	r0, [r7, #16]
    9366:	2800      	cmp	r0, #0
    9368:	d105      	bne.n	9376 <_svfiprintf_r+0x32>
    936a:	230c      	movs	r3, #12
    936c:	9a02      	ldr	r2, [sp, #8]
    936e:	3801      	subs	r0, #1
    9370:	6013      	str	r3, [r2, #0]
    9372:	b01f      	add	sp, #124	; 0x7c
    9374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9376:	2340      	movs	r3, #64	; 0x40
    9378:	617b      	str	r3, [r7, #20]
    937a:	2300      	movs	r3, #0
    937c:	ad06      	add	r5, sp, #24
    937e:	616b      	str	r3, [r5, #20]
    9380:	3320      	adds	r3, #32
    9382:	766b      	strb	r3, [r5, #25]
    9384:	3310      	adds	r3, #16
    9386:	76ab      	strb	r3, [r5, #26]
    9388:	0034      	movs	r4, r6
    938a:	7823      	ldrb	r3, [r4, #0]
    938c:	2b00      	cmp	r3, #0
    938e:	d147      	bne.n	9420 <_svfiprintf_r+0xdc>
    9390:	1ba3      	subs	r3, r4, r6
    9392:	9304      	str	r3, [sp, #16]
    9394:	d00d      	beq.n	93b2 <_svfiprintf_r+0x6e>
    9396:	1ba3      	subs	r3, r4, r6
    9398:	0032      	movs	r2, r6
    939a:	0039      	movs	r1, r7
    939c:	9802      	ldr	r0, [sp, #8]
    939e:	f7ff ff6f 	bl	9280 <__ssputs_r>
    93a2:	1c43      	adds	r3, r0, #1
    93a4:	d100      	bne.n	93a8 <_svfiprintf_r+0x64>
    93a6:	e0b5      	b.n	9514 <_svfiprintf_r+0x1d0>
    93a8:	696a      	ldr	r2, [r5, #20]
    93aa:	9b04      	ldr	r3, [sp, #16]
    93ac:	4694      	mov	ip, r2
    93ae:	4463      	add	r3, ip
    93b0:	616b      	str	r3, [r5, #20]
    93b2:	7823      	ldrb	r3, [r4, #0]
    93b4:	2b00      	cmp	r3, #0
    93b6:	d100      	bne.n	93ba <_svfiprintf_r+0x76>
    93b8:	e0ac      	b.n	9514 <_svfiprintf_r+0x1d0>
    93ba:	2201      	movs	r2, #1
    93bc:	2300      	movs	r3, #0
    93be:	4252      	negs	r2, r2
    93c0:	606a      	str	r2, [r5, #4]
    93c2:	a902      	add	r1, sp, #8
    93c4:	3254      	adds	r2, #84	; 0x54
    93c6:	1852      	adds	r2, r2, r1
    93c8:	3401      	adds	r4, #1
    93ca:	602b      	str	r3, [r5, #0]
    93cc:	60eb      	str	r3, [r5, #12]
    93ce:	60ab      	str	r3, [r5, #8]
    93d0:	7013      	strb	r3, [r2, #0]
    93d2:	65ab      	str	r3, [r5, #88]	; 0x58
    93d4:	4e58      	ldr	r6, [pc, #352]	; (9538 <_svfiprintf_r+0x1f4>)
    93d6:	2205      	movs	r2, #5
    93d8:	7821      	ldrb	r1, [r4, #0]
    93da:	0030      	movs	r0, r6
    93dc:	f000 fc62 	bl	9ca4 <memchr>
    93e0:	1c62      	adds	r2, r4, #1
    93e2:	2800      	cmp	r0, #0
    93e4:	d120      	bne.n	9428 <_svfiprintf_r+0xe4>
    93e6:	6829      	ldr	r1, [r5, #0]
    93e8:	06cb      	lsls	r3, r1, #27
    93ea:	d504      	bpl.n	93f6 <_svfiprintf_r+0xb2>
    93ec:	2353      	movs	r3, #83	; 0x53
    93ee:	ae02      	add	r6, sp, #8
    93f0:	3020      	adds	r0, #32
    93f2:	199b      	adds	r3, r3, r6
    93f4:	7018      	strb	r0, [r3, #0]
    93f6:	070b      	lsls	r3, r1, #28
    93f8:	d504      	bpl.n	9404 <_svfiprintf_r+0xc0>
    93fa:	2353      	movs	r3, #83	; 0x53
    93fc:	202b      	movs	r0, #43	; 0x2b
    93fe:	ae02      	add	r6, sp, #8
    9400:	199b      	adds	r3, r3, r6
    9402:	7018      	strb	r0, [r3, #0]
    9404:	7823      	ldrb	r3, [r4, #0]
    9406:	2b2a      	cmp	r3, #42	; 0x2a
    9408:	d016      	beq.n	9438 <_svfiprintf_r+0xf4>
    940a:	2000      	movs	r0, #0
    940c:	210a      	movs	r1, #10
    940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9410:	7822      	ldrb	r2, [r4, #0]
    9412:	3a30      	subs	r2, #48	; 0x30
    9414:	2a09      	cmp	r2, #9
    9416:	d955      	bls.n	94c4 <_svfiprintf_r+0x180>
    9418:	2800      	cmp	r0, #0
    941a:	d015      	beq.n	9448 <_svfiprintf_r+0x104>
    941c:	9309      	str	r3, [sp, #36]	; 0x24
    941e:	e013      	b.n	9448 <_svfiprintf_r+0x104>
    9420:	2b25      	cmp	r3, #37	; 0x25
    9422:	d0b5      	beq.n	9390 <_svfiprintf_r+0x4c>
    9424:	3401      	adds	r4, #1
    9426:	e7b0      	b.n	938a <_svfiprintf_r+0x46>
    9428:	2301      	movs	r3, #1
    942a:	1b80      	subs	r0, r0, r6
    942c:	4083      	lsls	r3, r0
    942e:	6829      	ldr	r1, [r5, #0]
    9430:	0014      	movs	r4, r2
    9432:	430b      	orrs	r3, r1
    9434:	602b      	str	r3, [r5, #0]
    9436:	e7cd      	b.n	93d4 <_svfiprintf_r+0x90>
    9438:	9b05      	ldr	r3, [sp, #20]
    943a:	1d18      	adds	r0, r3, #4
    943c:	681b      	ldr	r3, [r3, #0]
    943e:	9005      	str	r0, [sp, #20]
    9440:	2b00      	cmp	r3, #0
    9442:	db39      	blt.n	94b8 <_svfiprintf_r+0x174>
    9444:	9309      	str	r3, [sp, #36]	; 0x24
    9446:	0014      	movs	r4, r2
    9448:	7823      	ldrb	r3, [r4, #0]
    944a:	2b2e      	cmp	r3, #46	; 0x2e
    944c:	d10b      	bne.n	9466 <_svfiprintf_r+0x122>
    944e:	7863      	ldrb	r3, [r4, #1]
    9450:	1c62      	adds	r2, r4, #1
    9452:	2b2a      	cmp	r3, #42	; 0x2a
    9454:	d13e      	bne.n	94d4 <_svfiprintf_r+0x190>
    9456:	9b05      	ldr	r3, [sp, #20]
    9458:	3402      	adds	r4, #2
    945a:	1d1a      	adds	r2, r3, #4
    945c:	681b      	ldr	r3, [r3, #0]
    945e:	9205      	str	r2, [sp, #20]
    9460:	2b00      	cmp	r3, #0
    9462:	db34      	blt.n	94ce <_svfiprintf_r+0x18a>
    9464:	9307      	str	r3, [sp, #28]
    9466:	4e35      	ldr	r6, [pc, #212]	; (953c <_svfiprintf_r+0x1f8>)
    9468:	7821      	ldrb	r1, [r4, #0]
    946a:	2203      	movs	r2, #3
    946c:	0030      	movs	r0, r6
    946e:	f000 fc19 	bl	9ca4 <memchr>
    9472:	2800      	cmp	r0, #0
    9474:	d006      	beq.n	9484 <_svfiprintf_r+0x140>
    9476:	2340      	movs	r3, #64	; 0x40
    9478:	1b80      	subs	r0, r0, r6
    947a:	4083      	lsls	r3, r0
    947c:	682a      	ldr	r2, [r5, #0]
    947e:	3401      	adds	r4, #1
    9480:	4313      	orrs	r3, r2
    9482:	602b      	str	r3, [r5, #0]
    9484:	7821      	ldrb	r1, [r4, #0]
    9486:	2206      	movs	r2, #6
    9488:	482d      	ldr	r0, [pc, #180]	; (9540 <_svfiprintf_r+0x1fc>)
    948a:	1c66      	adds	r6, r4, #1
    948c:	7629      	strb	r1, [r5, #24]
    948e:	f000 fc09 	bl	9ca4 <memchr>
    9492:	2800      	cmp	r0, #0
    9494:	d046      	beq.n	9524 <_svfiprintf_r+0x1e0>
    9496:	4b2b      	ldr	r3, [pc, #172]	; (9544 <_svfiprintf_r+0x200>)
    9498:	2b00      	cmp	r3, #0
    949a:	d12f      	bne.n	94fc <_svfiprintf_r+0x1b8>
    949c:	6829      	ldr	r1, [r5, #0]
    949e:	9b05      	ldr	r3, [sp, #20]
    94a0:	2207      	movs	r2, #7
    94a2:	05c9      	lsls	r1, r1, #23
    94a4:	d528      	bpl.n	94f8 <_svfiprintf_r+0x1b4>
    94a6:	189b      	adds	r3, r3, r2
    94a8:	4393      	bics	r3, r2
    94aa:	3308      	adds	r3, #8
    94ac:	9305      	str	r3, [sp, #20]
    94ae:	696b      	ldr	r3, [r5, #20]
    94b0:	9a03      	ldr	r2, [sp, #12]
    94b2:	189b      	adds	r3, r3, r2
    94b4:	616b      	str	r3, [r5, #20]
    94b6:	e767      	b.n	9388 <_svfiprintf_r+0x44>
    94b8:	425b      	negs	r3, r3
    94ba:	60eb      	str	r3, [r5, #12]
    94bc:	2302      	movs	r3, #2
    94be:	430b      	orrs	r3, r1
    94c0:	602b      	str	r3, [r5, #0]
    94c2:	e7c0      	b.n	9446 <_svfiprintf_r+0x102>
    94c4:	434b      	muls	r3, r1
    94c6:	3401      	adds	r4, #1
    94c8:	189b      	adds	r3, r3, r2
    94ca:	2001      	movs	r0, #1
    94cc:	e7a0      	b.n	9410 <_svfiprintf_r+0xcc>
    94ce:	2301      	movs	r3, #1
    94d0:	425b      	negs	r3, r3
    94d2:	e7c7      	b.n	9464 <_svfiprintf_r+0x120>
    94d4:	2300      	movs	r3, #0
    94d6:	0014      	movs	r4, r2
    94d8:	200a      	movs	r0, #10
    94da:	001a      	movs	r2, r3
    94dc:	606b      	str	r3, [r5, #4]
    94de:	7821      	ldrb	r1, [r4, #0]
    94e0:	3930      	subs	r1, #48	; 0x30
    94e2:	2909      	cmp	r1, #9
    94e4:	d903      	bls.n	94ee <_svfiprintf_r+0x1aa>
    94e6:	2b00      	cmp	r3, #0
    94e8:	d0bd      	beq.n	9466 <_svfiprintf_r+0x122>
    94ea:	9207      	str	r2, [sp, #28]
    94ec:	e7bb      	b.n	9466 <_svfiprintf_r+0x122>
    94ee:	4342      	muls	r2, r0
    94f0:	3401      	adds	r4, #1
    94f2:	1852      	adds	r2, r2, r1
    94f4:	2301      	movs	r3, #1
    94f6:	e7f2      	b.n	94de <_svfiprintf_r+0x19a>
    94f8:	3307      	adds	r3, #7
    94fa:	e7d5      	b.n	94a8 <_svfiprintf_r+0x164>
    94fc:	ab05      	add	r3, sp, #20
    94fe:	9300      	str	r3, [sp, #0]
    9500:	003a      	movs	r2, r7
    9502:	4b11      	ldr	r3, [pc, #68]	; (9548 <_svfiprintf_r+0x204>)
    9504:	0029      	movs	r1, r5
    9506:	9802      	ldr	r0, [sp, #8]
    9508:	e000      	b.n	950c <_svfiprintf_r+0x1c8>
    950a:	bf00      	nop
    950c:	9003      	str	r0, [sp, #12]
    950e:	9b03      	ldr	r3, [sp, #12]
    9510:	3301      	adds	r3, #1
    9512:	d1cc      	bne.n	94ae <_svfiprintf_r+0x16a>
    9514:	89bb      	ldrh	r3, [r7, #12]
    9516:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9518:	065b      	lsls	r3, r3, #25
    951a:	d400      	bmi.n	951e <_svfiprintf_r+0x1da>
    951c:	e729      	b.n	9372 <_svfiprintf_r+0x2e>
    951e:	2001      	movs	r0, #1
    9520:	4240      	negs	r0, r0
    9522:	e726      	b.n	9372 <_svfiprintf_r+0x2e>
    9524:	ab05      	add	r3, sp, #20
    9526:	9300      	str	r3, [sp, #0]
    9528:	003a      	movs	r2, r7
    952a:	4b07      	ldr	r3, [pc, #28]	; (9548 <_svfiprintf_r+0x204>)
    952c:	0029      	movs	r1, r5
    952e:	9802      	ldr	r0, [sp, #8]
    9530:	f000 f9be 	bl	98b0 <_printf_i>
    9534:	e7ea      	b.n	950c <_svfiprintf_r+0x1c8>
    9536:	46c0      	nop			; (mov r8, r8)
    9538:	0000b02c 	.word	0x0000b02c
    953c:	0000b032 	.word	0x0000b032
    9540:	0000b036 	.word	0x0000b036
    9544:	00000000 	.word	0x00000000
    9548:	00009281 	.word	0x00009281

0000954c <__sfputc_r>:
    954c:	6893      	ldr	r3, [r2, #8]
    954e:	b510      	push	{r4, lr}
    9550:	3b01      	subs	r3, #1
    9552:	6093      	str	r3, [r2, #8]
    9554:	2b00      	cmp	r3, #0
    9556:	da05      	bge.n	9564 <__sfputc_r+0x18>
    9558:	6994      	ldr	r4, [r2, #24]
    955a:	42a3      	cmp	r3, r4
    955c:	db08      	blt.n	9570 <__sfputc_r+0x24>
    955e:	b2cb      	uxtb	r3, r1
    9560:	2b0a      	cmp	r3, #10
    9562:	d005      	beq.n	9570 <__sfputc_r+0x24>
    9564:	6813      	ldr	r3, [r2, #0]
    9566:	1c58      	adds	r0, r3, #1
    9568:	6010      	str	r0, [r2, #0]
    956a:	7019      	strb	r1, [r3, #0]
    956c:	b2c8      	uxtb	r0, r1
    956e:	bd10      	pop	{r4, pc}
    9570:	f7ff fbc4 	bl	8cfc <__swbuf_r>
    9574:	e7fb      	b.n	956e <__sfputc_r+0x22>

00009576 <__sfputs_r>:
    9576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9578:	0006      	movs	r6, r0
    957a:	000f      	movs	r7, r1
    957c:	0014      	movs	r4, r2
    957e:	18d5      	adds	r5, r2, r3
    9580:	42ac      	cmp	r4, r5
    9582:	d101      	bne.n	9588 <__sfputs_r+0x12>
    9584:	2000      	movs	r0, #0
    9586:	e007      	b.n	9598 <__sfputs_r+0x22>
    9588:	7821      	ldrb	r1, [r4, #0]
    958a:	003a      	movs	r2, r7
    958c:	0030      	movs	r0, r6
    958e:	f7ff ffdd 	bl	954c <__sfputc_r>
    9592:	3401      	adds	r4, #1
    9594:	1c43      	adds	r3, r0, #1
    9596:	d1f3      	bne.n	9580 <__sfputs_r+0xa>
    9598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000959c <_vfiprintf_r>:
    959c:	b5f0      	push	{r4, r5, r6, r7, lr}
    959e:	b09f      	sub	sp, #124	; 0x7c
    95a0:	0006      	movs	r6, r0
    95a2:	000f      	movs	r7, r1
    95a4:	0014      	movs	r4, r2
    95a6:	9305      	str	r3, [sp, #20]
    95a8:	2800      	cmp	r0, #0
    95aa:	d004      	beq.n	95b6 <_vfiprintf_r+0x1a>
    95ac:	6983      	ldr	r3, [r0, #24]
    95ae:	2b00      	cmp	r3, #0
    95b0:	d101      	bne.n	95b6 <_vfiprintf_r+0x1a>
    95b2:	f7ff fd67 	bl	9084 <__sinit>
    95b6:	4b7f      	ldr	r3, [pc, #508]	; (97b4 <_vfiprintf_r+0x218>)
    95b8:	429f      	cmp	r7, r3
    95ba:	d15c      	bne.n	9676 <_vfiprintf_r+0xda>
    95bc:	6877      	ldr	r7, [r6, #4]
    95be:	89bb      	ldrh	r3, [r7, #12]
    95c0:	071b      	lsls	r3, r3, #28
    95c2:	d562      	bpl.n	968a <_vfiprintf_r+0xee>
    95c4:	693b      	ldr	r3, [r7, #16]
    95c6:	2b00      	cmp	r3, #0
    95c8:	d05f      	beq.n	968a <_vfiprintf_r+0xee>
    95ca:	2300      	movs	r3, #0
    95cc:	ad06      	add	r5, sp, #24
    95ce:	616b      	str	r3, [r5, #20]
    95d0:	3320      	adds	r3, #32
    95d2:	766b      	strb	r3, [r5, #25]
    95d4:	3310      	adds	r3, #16
    95d6:	76ab      	strb	r3, [r5, #26]
    95d8:	9402      	str	r4, [sp, #8]
    95da:	9c02      	ldr	r4, [sp, #8]
    95dc:	7823      	ldrb	r3, [r4, #0]
    95de:	2b00      	cmp	r3, #0
    95e0:	d15d      	bne.n	969e <_vfiprintf_r+0x102>
    95e2:	9b02      	ldr	r3, [sp, #8]
    95e4:	1ae3      	subs	r3, r4, r3
    95e6:	9304      	str	r3, [sp, #16]
    95e8:	d00d      	beq.n	9606 <_vfiprintf_r+0x6a>
    95ea:	9b04      	ldr	r3, [sp, #16]
    95ec:	9a02      	ldr	r2, [sp, #8]
    95ee:	0039      	movs	r1, r7
    95f0:	0030      	movs	r0, r6
    95f2:	f7ff ffc0 	bl	9576 <__sfputs_r>
    95f6:	1c43      	adds	r3, r0, #1
    95f8:	d100      	bne.n	95fc <_vfiprintf_r+0x60>
    95fa:	e0cc      	b.n	9796 <_vfiprintf_r+0x1fa>
    95fc:	696a      	ldr	r2, [r5, #20]
    95fe:	9b04      	ldr	r3, [sp, #16]
    9600:	4694      	mov	ip, r2
    9602:	4463      	add	r3, ip
    9604:	616b      	str	r3, [r5, #20]
    9606:	7823      	ldrb	r3, [r4, #0]
    9608:	2b00      	cmp	r3, #0
    960a:	d100      	bne.n	960e <_vfiprintf_r+0x72>
    960c:	e0c3      	b.n	9796 <_vfiprintf_r+0x1fa>
    960e:	2201      	movs	r2, #1
    9610:	2300      	movs	r3, #0
    9612:	4252      	negs	r2, r2
    9614:	606a      	str	r2, [r5, #4]
    9616:	a902      	add	r1, sp, #8
    9618:	3254      	adds	r2, #84	; 0x54
    961a:	1852      	adds	r2, r2, r1
    961c:	3401      	adds	r4, #1
    961e:	602b      	str	r3, [r5, #0]
    9620:	60eb      	str	r3, [r5, #12]
    9622:	60ab      	str	r3, [r5, #8]
    9624:	7013      	strb	r3, [r2, #0]
    9626:	65ab      	str	r3, [r5, #88]	; 0x58
    9628:	7821      	ldrb	r1, [r4, #0]
    962a:	2205      	movs	r2, #5
    962c:	4862      	ldr	r0, [pc, #392]	; (97b8 <_vfiprintf_r+0x21c>)
    962e:	f000 fb39 	bl	9ca4 <memchr>
    9632:	1c63      	adds	r3, r4, #1
    9634:	469c      	mov	ip, r3
    9636:	2800      	cmp	r0, #0
    9638:	d135      	bne.n	96a6 <_vfiprintf_r+0x10a>
    963a:	6829      	ldr	r1, [r5, #0]
    963c:	06cb      	lsls	r3, r1, #27
    963e:	d504      	bpl.n	964a <_vfiprintf_r+0xae>
    9640:	2353      	movs	r3, #83	; 0x53
    9642:	aa02      	add	r2, sp, #8
    9644:	3020      	adds	r0, #32
    9646:	189b      	adds	r3, r3, r2
    9648:	7018      	strb	r0, [r3, #0]
    964a:	070b      	lsls	r3, r1, #28
    964c:	d504      	bpl.n	9658 <_vfiprintf_r+0xbc>
    964e:	2353      	movs	r3, #83	; 0x53
    9650:	202b      	movs	r0, #43	; 0x2b
    9652:	aa02      	add	r2, sp, #8
    9654:	189b      	adds	r3, r3, r2
    9656:	7018      	strb	r0, [r3, #0]
    9658:	7823      	ldrb	r3, [r4, #0]
    965a:	2b2a      	cmp	r3, #42	; 0x2a
    965c:	d02c      	beq.n	96b8 <_vfiprintf_r+0x11c>
    965e:	2000      	movs	r0, #0
    9660:	210a      	movs	r1, #10
    9662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9664:	7822      	ldrb	r2, [r4, #0]
    9666:	3a30      	subs	r2, #48	; 0x30
    9668:	2a09      	cmp	r2, #9
    966a:	d800      	bhi.n	966e <_vfiprintf_r+0xd2>
    966c:	e06b      	b.n	9746 <_vfiprintf_r+0x1aa>
    966e:	2800      	cmp	r0, #0
    9670:	d02a      	beq.n	96c8 <_vfiprintf_r+0x12c>
    9672:	9309      	str	r3, [sp, #36]	; 0x24
    9674:	e028      	b.n	96c8 <_vfiprintf_r+0x12c>
    9676:	4b51      	ldr	r3, [pc, #324]	; (97bc <_vfiprintf_r+0x220>)
    9678:	429f      	cmp	r7, r3
    967a:	d101      	bne.n	9680 <_vfiprintf_r+0xe4>
    967c:	68b7      	ldr	r7, [r6, #8]
    967e:	e79e      	b.n	95be <_vfiprintf_r+0x22>
    9680:	4b4f      	ldr	r3, [pc, #316]	; (97c0 <_vfiprintf_r+0x224>)
    9682:	429f      	cmp	r7, r3
    9684:	d19b      	bne.n	95be <_vfiprintf_r+0x22>
    9686:	68f7      	ldr	r7, [r6, #12]
    9688:	e799      	b.n	95be <_vfiprintf_r+0x22>
    968a:	0039      	movs	r1, r7
    968c:	0030      	movs	r0, r6
    968e:	f7ff fb8b 	bl	8da8 <__swsetup_r>
    9692:	2800      	cmp	r0, #0
    9694:	d099      	beq.n	95ca <_vfiprintf_r+0x2e>
    9696:	2001      	movs	r0, #1
    9698:	4240      	negs	r0, r0
    969a:	b01f      	add	sp, #124	; 0x7c
    969c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    969e:	2b25      	cmp	r3, #37	; 0x25
    96a0:	d09f      	beq.n	95e2 <_vfiprintf_r+0x46>
    96a2:	3401      	adds	r4, #1
    96a4:	e79a      	b.n	95dc <_vfiprintf_r+0x40>
    96a6:	4b44      	ldr	r3, [pc, #272]	; (97b8 <_vfiprintf_r+0x21c>)
    96a8:	6829      	ldr	r1, [r5, #0]
    96aa:	1ac0      	subs	r0, r0, r3
    96ac:	2301      	movs	r3, #1
    96ae:	4083      	lsls	r3, r0
    96b0:	430b      	orrs	r3, r1
    96b2:	602b      	str	r3, [r5, #0]
    96b4:	4664      	mov	r4, ip
    96b6:	e7b7      	b.n	9628 <_vfiprintf_r+0x8c>
    96b8:	9b05      	ldr	r3, [sp, #20]
    96ba:	1d18      	adds	r0, r3, #4
    96bc:	681b      	ldr	r3, [r3, #0]
    96be:	9005      	str	r0, [sp, #20]
    96c0:	2b00      	cmp	r3, #0
    96c2:	db3a      	blt.n	973a <_vfiprintf_r+0x19e>
    96c4:	9309      	str	r3, [sp, #36]	; 0x24
    96c6:	4664      	mov	r4, ip
    96c8:	7823      	ldrb	r3, [r4, #0]
    96ca:	2b2e      	cmp	r3, #46	; 0x2e
    96cc:	d10b      	bne.n	96e6 <_vfiprintf_r+0x14a>
    96ce:	7863      	ldrb	r3, [r4, #1]
    96d0:	1c62      	adds	r2, r4, #1
    96d2:	2b2a      	cmp	r3, #42	; 0x2a
    96d4:	d13f      	bne.n	9756 <_vfiprintf_r+0x1ba>
    96d6:	9b05      	ldr	r3, [sp, #20]
    96d8:	3402      	adds	r4, #2
    96da:	1d1a      	adds	r2, r3, #4
    96dc:	681b      	ldr	r3, [r3, #0]
    96de:	9205      	str	r2, [sp, #20]
    96e0:	2b00      	cmp	r3, #0
    96e2:	db35      	blt.n	9750 <_vfiprintf_r+0x1b4>
    96e4:	9307      	str	r3, [sp, #28]
    96e6:	7821      	ldrb	r1, [r4, #0]
    96e8:	2203      	movs	r2, #3
    96ea:	4836      	ldr	r0, [pc, #216]	; (97c4 <_vfiprintf_r+0x228>)
    96ec:	f000 fada 	bl	9ca4 <memchr>
    96f0:	2800      	cmp	r0, #0
    96f2:	d007      	beq.n	9704 <_vfiprintf_r+0x168>
    96f4:	4b33      	ldr	r3, [pc, #204]	; (97c4 <_vfiprintf_r+0x228>)
    96f6:	682a      	ldr	r2, [r5, #0]
    96f8:	1ac0      	subs	r0, r0, r3
    96fa:	2340      	movs	r3, #64	; 0x40
    96fc:	4083      	lsls	r3, r0
    96fe:	4313      	orrs	r3, r2
    9700:	602b      	str	r3, [r5, #0]
    9702:	3401      	adds	r4, #1
    9704:	7821      	ldrb	r1, [r4, #0]
    9706:	1c63      	adds	r3, r4, #1
    9708:	2206      	movs	r2, #6
    970a:	482f      	ldr	r0, [pc, #188]	; (97c8 <_vfiprintf_r+0x22c>)
    970c:	9302      	str	r3, [sp, #8]
    970e:	7629      	strb	r1, [r5, #24]
    9710:	f000 fac8 	bl	9ca4 <memchr>
    9714:	2800      	cmp	r0, #0
    9716:	d044      	beq.n	97a2 <_vfiprintf_r+0x206>
    9718:	4b2c      	ldr	r3, [pc, #176]	; (97cc <_vfiprintf_r+0x230>)
    971a:	2b00      	cmp	r3, #0
    971c:	d12f      	bne.n	977e <_vfiprintf_r+0x1e2>
    971e:	6829      	ldr	r1, [r5, #0]
    9720:	9b05      	ldr	r3, [sp, #20]
    9722:	2207      	movs	r2, #7
    9724:	05c9      	lsls	r1, r1, #23
    9726:	d528      	bpl.n	977a <_vfiprintf_r+0x1de>
    9728:	189b      	adds	r3, r3, r2
    972a:	4393      	bics	r3, r2
    972c:	3308      	adds	r3, #8
    972e:	9305      	str	r3, [sp, #20]
    9730:	696b      	ldr	r3, [r5, #20]
    9732:	9a03      	ldr	r2, [sp, #12]
    9734:	189b      	adds	r3, r3, r2
    9736:	616b      	str	r3, [r5, #20]
    9738:	e74f      	b.n	95da <_vfiprintf_r+0x3e>
    973a:	425b      	negs	r3, r3
    973c:	60eb      	str	r3, [r5, #12]
    973e:	2302      	movs	r3, #2
    9740:	430b      	orrs	r3, r1
    9742:	602b      	str	r3, [r5, #0]
    9744:	e7bf      	b.n	96c6 <_vfiprintf_r+0x12a>
    9746:	434b      	muls	r3, r1
    9748:	3401      	adds	r4, #1
    974a:	189b      	adds	r3, r3, r2
    974c:	2001      	movs	r0, #1
    974e:	e789      	b.n	9664 <_vfiprintf_r+0xc8>
    9750:	2301      	movs	r3, #1
    9752:	425b      	negs	r3, r3
    9754:	e7c6      	b.n	96e4 <_vfiprintf_r+0x148>
    9756:	2300      	movs	r3, #0
    9758:	0014      	movs	r4, r2
    975a:	200a      	movs	r0, #10
    975c:	001a      	movs	r2, r3
    975e:	606b      	str	r3, [r5, #4]
    9760:	7821      	ldrb	r1, [r4, #0]
    9762:	3930      	subs	r1, #48	; 0x30
    9764:	2909      	cmp	r1, #9
    9766:	d903      	bls.n	9770 <_vfiprintf_r+0x1d4>
    9768:	2b00      	cmp	r3, #0
    976a:	d0bc      	beq.n	96e6 <_vfiprintf_r+0x14a>
    976c:	9207      	str	r2, [sp, #28]
    976e:	e7ba      	b.n	96e6 <_vfiprintf_r+0x14a>
    9770:	4342      	muls	r2, r0
    9772:	3401      	adds	r4, #1
    9774:	1852      	adds	r2, r2, r1
    9776:	2301      	movs	r3, #1
    9778:	e7f2      	b.n	9760 <_vfiprintf_r+0x1c4>
    977a:	3307      	adds	r3, #7
    977c:	e7d5      	b.n	972a <_vfiprintf_r+0x18e>
    977e:	ab05      	add	r3, sp, #20
    9780:	9300      	str	r3, [sp, #0]
    9782:	003a      	movs	r2, r7
    9784:	4b12      	ldr	r3, [pc, #72]	; (97d0 <_vfiprintf_r+0x234>)
    9786:	0029      	movs	r1, r5
    9788:	0030      	movs	r0, r6
    978a:	e000      	b.n	978e <_vfiprintf_r+0x1f2>
    978c:	bf00      	nop
    978e:	9003      	str	r0, [sp, #12]
    9790:	9b03      	ldr	r3, [sp, #12]
    9792:	3301      	adds	r3, #1
    9794:	d1cc      	bne.n	9730 <_vfiprintf_r+0x194>
    9796:	89bb      	ldrh	r3, [r7, #12]
    9798:	065b      	lsls	r3, r3, #25
    979a:	d500      	bpl.n	979e <_vfiprintf_r+0x202>
    979c:	e77b      	b.n	9696 <_vfiprintf_r+0xfa>
    979e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    97a0:	e77b      	b.n	969a <_vfiprintf_r+0xfe>
    97a2:	ab05      	add	r3, sp, #20
    97a4:	9300      	str	r3, [sp, #0]
    97a6:	003a      	movs	r2, r7
    97a8:	4b09      	ldr	r3, [pc, #36]	; (97d0 <_vfiprintf_r+0x234>)
    97aa:	0029      	movs	r1, r5
    97ac:	0030      	movs	r0, r6
    97ae:	f000 f87f 	bl	98b0 <_printf_i>
    97b2:	e7ec      	b.n	978e <_vfiprintf_r+0x1f2>
    97b4:	0000afec 	.word	0x0000afec
    97b8:	0000b02c 	.word	0x0000b02c
    97bc:	0000b00c 	.word	0x0000b00c
    97c0:	0000afcc 	.word	0x0000afcc
    97c4:	0000b032 	.word	0x0000b032
    97c8:	0000b036 	.word	0x0000b036
    97cc:	00000000 	.word	0x00000000
    97d0:	00009577 	.word	0x00009577

000097d4 <_printf_common>:
    97d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    97d6:	0015      	movs	r5, r2
    97d8:	9301      	str	r3, [sp, #4]
    97da:	688a      	ldr	r2, [r1, #8]
    97dc:	690b      	ldr	r3, [r1, #16]
    97de:	9000      	str	r0, [sp, #0]
    97e0:	000c      	movs	r4, r1
    97e2:	4293      	cmp	r3, r2
    97e4:	da00      	bge.n	97e8 <_printf_common+0x14>
    97e6:	0013      	movs	r3, r2
    97e8:	0022      	movs	r2, r4
    97ea:	602b      	str	r3, [r5, #0]
    97ec:	3243      	adds	r2, #67	; 0x43
    97ee:	7812      	ldrb	r2, [r2, #0]
    97f0:	2a00      	cmp	r2, #0
    97f2:	d001      	beq.n	97f8 <_printf_common+0x24>
    97f4:	3301      	adds	r3, #1
    97f6:	602b      	str	r3, [r5, #0]
    97f8:	6823      	ldr	r3, [r4, #0]
    97fa:	069b      	lsls	r3, r3, #26
    97fc:	d502      	bpl.n	9804 <_printf_common+0x30>
    97fe:	682b      	ldr	r3, [r5, #0]
    9800:	3302      	adds	r3, #2
    9802:	602b      	str	r3, [r5, #0]
    9804:	2706      	movs	r7, #6
    9806:	6823      	ldr	r3, [r4, #0]
    9808:	401f      	ands	r7, r3
    980a:	d027      	beq.n	985c <_printf_common+0x88>
    980c:	0023      	movs	r3, r4
    980e:	3343      	adds	r3, #67	; 0x43
    9810:	781b      	ldrb	r3, [r3, #0]
    9812:	1e5a      	subs	r2, r3, #1
    9814:	4193      	sbcs	r3, r2
    9816:	6822      	ldr	r2, [r4, #0]
    9818:	0692      	lsls	r2, r2, #26
    981a:	d430      	bmi.n	987e <_printf_common+0xaa>
    981c:	0022      	movs	r2, r4
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	3243      	adds	r2, #67	; 0x43
    9822:	9800      	ldr	r0, [sp, #0]
    9824:	9e08      	ldr	r6, [sp, #32]
    9826:	47b0      	blx	r6
    9828:	1c43      	adds	r3, r0, #1
    982a:	d025      	beq.n	9878 <_printf_common+0xa4>
    982c:	2306      	movs	r3, #6
    982e:	6820      	ldr	r0, [r4, #0]
    9830:	682a      	ldr	r2, [r5, #0]
    9832:	68e1      	ldr	r1, [r4, #12]
    9834:	4003      	ands	r3, r0
    9836:	2500      	movs	r5, #0
    9838:	2b04      	cmp	r3, #4
    983a:	d103      	bne.n	9844 <_printf_common+0x70>
    983c:	1a8d      	subs	r5, r1, r2
    983e:	43eb      	mvns	r3, r5
    9840:	17db      	asrs	r3, r3, #31
    9842:	401d      	ands	r5, r3
    9844:	68a3      	ldr	r3, [r4, #8]
    9846:	6922      	ldr	r2, [r4, #16]
    9848:	4293      	cmp	r3, r2
    984a:	dd01      	ble.n	9850 <_printf_common+0x7c>
    984c:	1a9b      	subs	r3, r3, r2
    984e:	18ed      	adds	r5, r5, r3
    9850:	2700      	movs	r7, #0
    9852:	42bd      	cmp	r5, r7
    9854:	d120      	bne.n	9898 <_printf_common+0xc4>
    9856:	2000      	movs	r0, #0
    9858:	e010      	b.n	987c <_printf_common+0xa8>
    985a:	3701      	adds	r7, #1
    985c:	68e3      	ldr	r3, [r4, #12]
    985e:	682a      	ldr	r2, [r5, #0]
    9860:	1a9b      	subs	r3, r3, r2
    9862:	429f      	cmp	r7, r3
    9864:	dad2      	bge.n	980c <_printf_common+0x38>
    9866:	0022      	movs	r2, r4
    9868:	2301      	movs	r3, #1
    986a:	3219      	adds	r2, #25
    986c:	9901      	ldr	r1, [sp, #4]
    986e:	9800      	ldr	r0, [sp, #0]
    9870:	9e08      	ldr	r6, [sp, #32]
    9872:	47b0      	blx	r6
    9874:	1c43      	adds	r3, r0, #1
    9876:	d1f0      	bne.n	985a <_printf_common+0x86>
    9878:	2001      	movs	r0, #1
    987a:	4240      	negs	r0, r0
    987c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    987e:	2030      	movs	r0, #48	; 0x30
    9880:	18e1      	adds	r1, r4, r3
    9882:	3143      	adds	r1, #67	; 0x43
    9884:	7008      	strb	r0, [r1, #0]
    9886:	0021      	movs	r1, r4
    9888:	1c5a      	adds	r2, r3, #1
    988a:	3145      	adds	r1, #69	; 0x45
    988c:	7809      	ldrb	r1, [r1, #0]
    988e:	18a2      	adds	r2, r4, r2
    9890:	3243      	adds	r2, #67	; 0x43
    9892:	3302      	adds	r3, #2
    9894:	7011      	strb	r1, [r2, #0]
    9896:	e7c1      	b.n	981c <_printf_common+0x48>
    9898:	0022      	movs	r2, r4
    989a:	2301      	movs	r3, #1
    989c:	321a      	adds	r2, #26
    989e:	9901      	ldr	r1, [sp, #4]
    98a0:	9800      	ldr	r0, [sp, #0]
    98a2:	9e08      	ldr	r6, [sp, #32]
    98a4:	47b0      	blx	r6
    98a6:	1c43      	adds	r3, r0, #1
    98a8:	d0e6      	beq.n	9878 <_printf_common+0xa4>
    98aa:	3701      	adds	r7, #1
    98ac:	e7d1      	b.n	9852 <_printf_common+0x7e>
	...

000098b0 <_printf_i>:
    98b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    98b2:	b08b      	sub	sp, #44	; 0x2c
    98b4:	9206      	str	r2, [sp, #24]
    98b6:	000a      	movs	r2, r1
    98b8:	3243      	adds	r2, #67	; 0x43
    98ba:	9307      	str	r3, [sp, #28]
    98bc:	9005      	str	r0, [sp, #20]
    98be:	9204      	str	r2, [sp, #16]
    98c0:	7e0a      	ldrb	r2, [r1, #24]
    98c2:	000c      	movs	r4, r1
    98c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98c6:	2a6e      	cmp	r2, #110	; 0x6e
    98c8:	d100      	bne.n	98cc <_printf_i+0x1c>
    98ca:	e08f      	b.n	99ec <_printf_i+0x13c>
    98cc:	d817      	bhi.n	98fe <_printf_i+0x4e>
    98ce:	2a63      	cmp	r2, #99	; 0x63
    98d0:	d02c      	beq.n	992c <_printf_i+0x7c>
    98d2:	d808      	bhi.n	98e6 <_printf_i+0x36>
    98d4:	2a00      	cmp	r2, #0
    98d6:	d100      	bne.n	98da <_printf_i+0x2a>
    98d8:	e099      	b.n	9a0e <_printf_i+0x15e>
    98da:	2a58      	cmp	r2, #88	; 0x58
    98dc:	d054      	beq.n	9988 <_printf_i+0xd8>
    98de:	0026      	movs	r6, r4
    98e0:	3642      	adds	r6, #66	; 0x42
    98e2:	7032      	strb	r2, [r6, #0]
    98e4:	e029      	b.n	993a <_printf_i+0x8a>
    98e6:	2a64      	cmp	r2, #100	; 0x64
    98e8:	d001      	beq.n	98ee <_printf_i+0x3e>
    98ea:	2a69      	cmp	r2, #105	; 0x69
    98ec:	d1f7      	bne.n	98de <_printf_i+0x2e>
    98ee:	6821      	ldr	r1, [r4, #0]
    98f0:	681a      	ldr	r2, [r3, #0]
    98f2:	0608      	lsls	r0, r1, #24
    98f4:	d523      	bpl.n	993e <_printf_i+0x8e>
    98f6:	1d11      	adds	r1, r2, #4
    98f8:	6019      	str	r1, [r3, #0]
    98fa:	6815      	ldr	r5, [r2, #0]
    98fc:	e025      	b.n	994a <_printf_i+0x9a>
    98fe:	2a73      	cmp	r2, #115	; 0x73
    9900:	d100      	bne.n	9904 <_printf_i+0x54>
    9902:	e088      	b.n	9a16 <_printf_i+0x166>
    9904:	d808      	bhi.n	9918 <_printf_i+0x68>
    9906:	2a6f      	cmp	r2, #111	; 0x6f
    9908:	d029      	beq.n	995e <_printf_i+0xae>
    990a:	2a70      	cmp	r2, #112	; 0x70
    990c:	d1e7      	bne.n	98de <_printf_i+0x2e>
    990e:	2220      	movs	r2, #32
    9910:	6809      	ldr	r1, [r1, #0]
    9912:	430a      	orrs	r2, r1
    9914:	6022      	str	r2, [r4, #0]
    9916:	e003      	b.n	9920 <_printf_i+0x70>
    9918:	2a75      	cmp	r2, #117	; 0x75
    991a:	d020      	beq.n	995e <_printf_i+0xae>
    991c:	2a78      	cmp	r2, #120	; 0x78
    991e:	d1de      	bne.n	98de <_printf_i+0x2e>
    9920:	0022      	movs	r2, r4
    9922:	2178      	movs	r1, #120	; 0x78
    9924:	3245      	adds	r2, #69	; 0x45
    9926:	7011      	strb	r1, [r2, #0]
    9928:	4a6c      	ldr	r2, [pc, #432]	; (9adc <_printf_i+0x22c>)
    992a:	e030      	b.n	998e <_printf_i+0xde>
    992c:	000e      	movs	r6, r1
    992e:	681a      	ldr	r2, [r3, #0]
    9930:	3642      	adds	r6, #66	; 0x42
    9932:	1d11      	adds	r1, r2, #4
    9934:	6019      	str	r1, [r3, #0]
    9936:	6813      	ldr	r3, [r2, #0]
    9938:	7033      	strb	r3, [r6, #0]
    993a:	2301      	movs	r3, #1
    993c:	e079      	b.n	9a32 <_printf_i+0x182>
    993e:	0649      	lsls	r1, r1, #25
    9940:	d5d9      	bpl.n	98f6 <_printf_i+0x46>
    9942:	1d11      	adds	r1, r2, #4
    9944:	6019      	str	r1, [r3, #0]
    9946:	2300      	movs	r3, #0
    9948:	5ed5      	ldrsh	r5, [r2, r3]
    994a:	2d00      	cmp	r5, #0
    994c:	da03      	bge.n	9956 <_printf_i+0xa6>
    994e:	232d      	movs	r3, #45	; 0x2d
    9950:	9a04      	ldr	r2, [sp, #16]
    9952:	426d      	negs	r5, r5
    9954:	7013      	strb	r3, [r2, #0]
    9956:	4b62      	ldr	r3, [pc, #392]	; (9ae0 <_printf_i+0x230>)
    9958:	270a      	movs	r7, #10
    995a:	9303      	str	r3, [sp, #12]
    995c:	e02f      	b.n	99be <_printf_i+0x10e>
    995e:	6820      	ldr	r0, [r4, #0]
    9960:	6819      	ldr	r1, [r3, #0]
    9962:	0605      	lsls	r5, r0, #24
    9964:	d503      	bpl.n	996e <_printf_i+0xbe>
    9966:	1d08      	adds	r0, r1, #4
    9968:	6018      	str	r0, [r3, #0]
    996a:	680d      	ldr	r5, [r1, #0]
    996c:	e005      	b.n	997a <_printf_i+0xca>
    996e:	0640      	lsls	r0, r0, #25
    9970:	d5f9      	bpl.n	9966 <_printf_i+0xb6>
    9972:	680d      	ldr	r5, [r1, #0]
    9974:	1d08      	adds	r0, r1, #4
    9976:	6018      	str	r0, [r3, #0]
    9978:	b2ad      	uxth	r5, r5
    997a:	4b59      	ldr	r3, [pc, #356]	; (9ae0 <_printf_i+0x230>)
    997c:	2708      	movs	r7, #8
    997e:	9303      	str	r3, [sp, #12]
    9980:	2a6f      	cmp	r2, #111	; 0x6f
    9982:	d018      	beq.n	99b6 <_printf_i+0x106>
    9984:	270a      	movs	r7, #10
    9986:	e016      	b.n	99b6 <_printf_i+0x106>
    9988:	3145      	adds	r1, #69	; 0x45
    998a:	700a      	strb	r2, [r1, #0]
    998c:	4a54      	ldr	r2, [pc, #336]	; (9ae0 <_printf_i+0x230>)
    998e:	9203      	str	r2, [sp, #12]
    9990:	681a      	ldr	r2, [r3, #0]
    9992:	6821      	ldr	r1, [r4, #0]
    9994:	1d10      	adds	r0, r2, #4
    9996:	6018      	str	r0, [r3, #0]
    9998:	6815      	ldr	r5, [r2, #0]
    999a:	0608      	lsls	r0, r1, #24
    999c:	d522      	bpl.n	99e4 <_printf_i+0x134>
    999e:	07cb      	lsls	r3, r1, #31
    99a0:	d502      	bpl.n	99a8 <_printf_i+0xf8>
    99a2:	2320      	movs	r3, #32
    99a4:	4319      	orrs	r1, r3
    99a6:	6021      	str	r1, [r4, #0]
    99a8:	2710      	movs	r7, #16
    99aa:	2d00      	cmp	r5, #0
    99ac:	d103      	bne.n	99b6 <_printf_i+0x106>
    99ae:	2320      	movs	r3, #32
    99b0:	6822      	ldr	r2, [r4, #0]
    99b2:	439a      	bics	r2, r3
    99b4:	6022      	str	r2, [r4, #0]
    99b6:	0023      	movs	r3, r4
    99b8:	2200      	movs	r2, #0
    99ba:	3343      	adds	r3, #67	; 0x43
    99bc:	701a      	strb	r2, [r3, #0]
    99be:	6863      	ldr	r3, [r4, #4]
    99c0:	60a3      	str	r3, [r4, #8]
    99c2:	2b00      	cmp	r3, #0
    99c4:	db5c      	blt.n	9a80 <_printf_i+0x1d0>
    99c6:	2204      	movs	r2, #4
    99c8:	6821      	ldr	r1, [r4, #0]
    99ca:	4391      	bics	r1, r2
    99cc:	6021      	str	r1, [r4, #0]
    99ce:	2d00      	cmp	r5, #0
    99d0:	d158      	bne.n	9a84 <_printf_i+0x1d4>
    99d2:	9e04      	ldr	r6, [sp, #16]
    99d4:	2b00      	cmp	r3, #0
    99d6:	d064      	beq.n	9aa2 <_printf_i+0x1f2>
    99d8:	0026      	movs	r6, r4
    99da:	9b03      	ldr	r3, [sp, #12]
    99dc:	3642      	adds	r6, #66	; 0x42
    99de:	781b      	ldrb	r3, [r3, #0]
    99e0:	7033      	strb	r3, [r6, #0]
    99e2:	e05e      	b.n	9aa2 <_printf_i+0x1f2>
    99e4:	0648      	lsls	r0, r1, #25
    99e6:	d5da      	bpl.n	999e <_printf_i+0xee>
    99e8:	b2ad      	uxth	r5, r5
    99ea:	e7d8      	b.n	999e <_printf_i+0xee>
    99ec:	6809      	ldr	r1, [r1, #0]
    99ee:	681a      	ldr	r2, [r3, #0]
    99f0:	0608      	lsls	r0, r1, #24
    99f2:	d505      	bpl.n	9a00 <_printf_i+0x150>
    99f4:	1d11      	adds	r1, r2, #4
    99f6:	6019      	str	r1, [r3, #0]
    99f8:	6813      	ldr	r3, [r2, #0]
    99fa:	6962      	ldr	r2, [r4, #20]
    99fc:	601a      	str	r2, [r3, #0]
    99fe:	e006      	b.n	9a0e <_printf_i+0x15e>
    9a00:	0649      	lsls	r1, r1, #25
    9a02:	d5f7      	bpl.n	99f4 <_printf_i+0x144>
    9a04:	1d11      	adds	r1, r2, #4
    9a06:	6019      	str	r1, [r3, #0]
    9a08:	6813      	ldr	r3, [r2, #0]
    9a0a:	8aa2      	ldrh	r2, [r4, #20]
    9a0c:	801a      	strh	r2, [r3, #0]
    9a0e:	2300      	movs	r3, #0
    9a10:	9e04      	ldr	r6, [sp, #16]
    9a12:	6123      	str	r3, [r4, #16]
    9a14:	e054      	b.n	9ac0 <_printf_i+0x210>
    9a16:	681a      	ldr	r2, [r3, #0]
    9a18:	1d11      	adds	r1, r2, #4
    9a1a:	6019      	str	r1, [r3, #0]
    9a1c:	6816      	ldr	r6, [r2, #0]
    9a1e:	2100      	movs	r1, #0
    9a20:	6862      	ldr	r2, [r4, #4]
    9a22:	0030      	movs	r0, r6
    9a24:	f000 f93e 	bl	9ca4 <memchr>
    9a28:	2800      	cmp	r0, #0
    9a2a:	d001      	beq.n	9a30 <_printf_i+0x180>
    9a2c:	1b80      	subs	r0, r0, r6
    9a2e:	6060      	str	r0, [r4, #4]
    9a30:	6863      	ldr	r3, [r4, #4]
    9a32:	6123      	str	r3, [r4, #16]
    9a34:	2300      	movs	r3, #0
    9a36:	9a04      	ldr	r2, [sp, #16]
    9a38:	7013      	strb	r3, [r2, #0]
    9a3a:	e041      	b.n	9ac0 <_printf_i+0x210>
    9a3c:	6923      	ldr	r3, [r4, #16]
    9a3e:	0032      	movs	r2, r6
    9a40:	9906      	ldr	r1, [sp, #24]
    9a42:	9805      	ldr	r0, [sp, #20]
    9a44:	9d07      	ldr	r5, [sp, #28]
    9a46:	47a8      	blx	r5
    9a48:	1c43      	adds	r3, r0, #1
    9a4a:	d043      	beq.n	9ad4 <_printf_i+0x224>
    9a4c:	6823      	ldr	r3, [r4, #0]
    9a4e:	2500      	movs	r5, #0
    9a50:	079b      	lsls	r3, r3, #30
    9a52:	d40f      	bmi.n	9a74 <_printf_i+0x1c4>
    9a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9a56:	68e0      	ldr	r0, [r4, #12]
    9a58:	4298      	cmp	r0, r3
    9a5a:	da3d      	bge.n	9ad8 <_printf_i+0x228>
    9a5c:	0018      	movs	r0, r3
    9a5e:	e03b      	b.n	9ad8 <_printf_i+0x228>
    9a60:	0022      	movs	r2, r4
    9a62:	2301      	movs	r3, #1
    9a64:	3219      	adds	r2, #25
    9a66:	9906      	ldr	r1, [sp, #24]
    9a68:	9805      	ldr	r0, [sp, #20]
    9a6a:	9e07      	ldr	r6, [sp, #28]
    9a6c:	47b0      	blx	r6
    9a6e:	1c43      	adds	r3, r0, #1
    9a70:	d030      	beq.n	9ad4 <_printf_i+0x224>
    9a72:	3501      	adds	r5, #1
    9a74:	68e3      	ldr	r3, [r4, #12]
    9a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9a78:	1a9b      	subs	r3, r3, r2
    9a7a:	429d      	cmp	r5, r3
    9a7c:	dbf0      	blt.n	9a60 <_printf_i+0x1b0>
    9a7e:	e7e9      	b.n	9a54 <_printf_i+0x1a4>
    9a80:	2d00      	cmp	r5, #0
    9a82:	d0a9      	beq.n	99d8 <_printf_i+0x128>
    9a84:	9e04      	ldr	r6, [sp, #16]
    9a86:	0028      	movs	r0, r5
    9a88:	0039      	movs	r1, r7
    9a8a:	f7fd fae1 	bl	7050 <__aeabi_uidivmod>
    9a8e:	9b03      	ldr	r3, [sp, #12]
    9a90:	3e01      	subs	r6, #1
    9a92:	5c5b      	ldrb	r3, [r3, r1]
    9a94:	0028      	movs	r0, r5
    9a96:	7033      	strb	r3, [r6, #0]
    9a98:	0039      	movs	r1, r7
    9a9a:	f7fd fa53 	bl	6f44 <__udivsi3>
    9a9e:	1e05      	subs	r5, r0, #0
    9aa0:	d1f1      	bne.n	9a86 <_printf_i+0x1d6>
    9aa2:	2f08      	cmp	r7, #8
    9aa4:	d109      	bne.n	9aba <_printf_i+0x20a>
    9aa6:	6823      	ldr	r3, [r4, #0]
    9aa8:	07db      	lsls	r3, r3, #31
    9aaa:	d506      	bpl.n	9aba <_printf_i+0x20a>
    9aac:	6863      	ldr	r3, [r4, #4]
    9aae:	6922      	ldr	r2, [r4, #16]
    9ab0:	4293      	cmp	r3, r2
    9ab2:	dc02      	bgt.n	9aba <_printf_i+0x20a>
    9ab4:	2330      	movs	r3, #48	; 0x30
    9ab6:	3e01      	subs	r6, #1
    9ab8:	7033      	strb	r3, [r6, #0]
    9aba:	9b04      	ldr	r3, [sp, #16]
    9abc:	1b9b      	subs	r3, r3, r6
    9abe:	6123      	str	r3, [r4, #16]
    9ac0:	9b07      	ldr	r3, [sp, #28]
    9ac2:	aa09      	add	r2, sp, #36	; 0x24
    9ac4:	9300      	str	r3, [sp, #0]
    9ac6:	0021      	movs	r1, r4
    9ac8:	9b06      	ldr	r3, [sp, #24]
    9aca:	9805      	ldr	r0, [sp, #20]
    9acc:	f7ff fe82 	bl	97d4 <_printf_common>
    9ad0:	1c43      	adds	r3, r0, #1
    9ad2:	d1b3      	bne.n	9a3c <_printf_i+0x18c>
    9ad4:	2001      	movs	r0, #1
    9ad6:	4240      	negs	r0, r0
    9ad8:	b00b      	add	sp, #44	; 0x2c
    9ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9adc:	0000b04e 	.word	0x0000b04e
    9ae0:	0000b03d 	.word	0x0000b03d

00009ae4 <_putc_r>:
    9ae4:	b570      	push	{r4, r5, r6, lr}
    9ae6:	0006      	movs	r6, r0
    9ae8:	000d      	movs	r5, r1
    9aea:	0014      	movs	r4, r2
    9aec:	2800      	cmp	r0, #0
    9aee:	d004      	beq.n	9afa <_putc_r+0x16>
    9af0:	6983      	ldr	r3, [r0, #24]
    9af2:	2b00      	cmp	r3, #0
    9af4:	d101      	bne.n	9afa <_putc_r+0x16>
    9af6:	f7ff fac5 	bl	9084 <__sinit>
    9afa:	4b12      	ldr	r3, [pc, #72]	; (9b44 <_putc_r+0x60>)
    9afc:	429c      	cmp	r4, r3
    9afe:	d111      	bne.n	9b24 <_putc_r+0x40>
    9b00:	6874      	ldr	r4, [r6, #4]
    9b02:	68a3      	ldr	r3, [r4, #8]
    9b04:	3b01      	subs	r3, #1
    9b06:	60a3      	str	r3, [r4, #8]
    9b08:	2b00      	cmp	r3, #0
    9b0a:	da05      	bge.n	9b18 <_putc_r+0x34>
    9b0c:	69a2      	ldr	r2, [r4, #24]
    9b0e:	4293      	cmp	r3, r2
    9b10:	db12      	blt.n	9b38 <_putc_r+0x54>
    9b12:	b2eb      	uxtb	r3, r5
    9b14:	2b0a      	cmp	r3, #10
    9b16:	d00f      	beq.n	9b38 <_putc_r+0x54>
    9b18:	6823      	ldr	r3, [r4, #0]
    9b1a:	b2e8      	uxtb	r0, r5
    9b1c:	1c5a      	adds	r2, r3, #1
    9b1e:	6022      	str	r2, [r4, #0]
    9b20:	701d      	strb	r5, [r3, #0]
    9b22:	bd70      	pop	{r4, r5, r6, pc}
    9b24:	4b08      	ldr	r3, [pc, #32]	; (9b48 <_putc_r+0x64>)
    9b26:	429c      	cmp	r4, r3
    9b28:	d101      	bne.n	9b2e <_putc_r+0x4a>
    9b2a:	68b4      	ldr	r4, [r6, #8]
    9b2c:	e7e9      	b.n	9b02 <_putc_r+0x1e>
    9b2e:	4b07      	ldr	r3, [pc, #28]	; (9b4c <_putc_r+0x68>)
    9b30:	429c      	cmp	r4, r3
    9b32:	d1e6      	bne.n	9b02 <_putc_r+0x1e>
    9b34:	68f4      	ldr	r4, [r6, #12]
    9b36:	e7e4      	b.n	9b02 <_putc_r+0x1e>
    9b38:	0022      	movs	r2, r4
    9b3a:	0029      	movs	r1, r5
    9b3c:	0030      	movs	r0, r6
    9b3e:	f7ff f8dd 	bl	8cfc <__swbuf_r>
    9b42:	e7ee      	b.n	9b22 <_putc_r+0x3e>
    9b44:	0000afec 	.word	0x0000afec
    9b48:	0000b00c 	.word	0x0000b00c
    9b4c:	0000afcc 	.word	0x0000afcc

00009b50 <__sread>:
    9b50:	b570      	push	{r4, r5, r6, lr}
    9b52:	000c      	movs	r4, r1
    9b54:	250e      	movs	r5, #14
    9b56:	5f49      	ldrsh	r1, [r1, r5]
    9b58:	f000 f8d6 	bl	9d08 <_read_r>
    9b5c:	2800      	cmp	r0, #0
    9b5e:	db03      	blt.n	9b68 <__sread+0x18>
    9b60:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9b62:	181b      	adds	r3, r3, r0
    9b64:	6563      	str	r3, [r4, #84]	; 0x54
    9b66:	bd70      	pop	{r4, r5, r6, pc}
    9b68:	89a3      	ldrh	r3, [r4, #12]
    9b6a:	4a02      	ldr	r2, [pc, #8]	; (9b74 <__sread+0x24>)
    9b6c:	4013      	ands	r3, r2
    9b6e:	81a3      	strh	r3, [r4, #12]
    9b70:	e7f9      	b.n	9b66 <__sread+0x16>
    9b72:	46c0      	nop			; (mov r8, r8)
    9b74:	ffffefff 	.word	0xffffefff

00009b78 <__swrite>:
    9b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b7a:	001f      	movs	r7, r3
    9b7c:	898b      	ldrh	r3, [r1, #12]
    9b7e:	0005      	movs	r5, r0
    9b80:	000c      	movs	r4, r1
    9b82:	0016      	movs	r6, r2
    9b84:	05db      	lsls	r3, r3, #23
    9b86:	d505      	bpl.n	9b94 <__swrite+0x1c>
    9b88:	230e      	movs	r3, #14
    9b8a:	5ec9      	ldrsh	r1, [r1, r3]
    9b8c:	2200      	movs	r2, #0
    9b8e:	2302      	movs	r3, #2
    9b90:	f000 f874 	bl	9c7c <_lseek_r>
    9b94:	89a3      	ldrh	r3, [r4, #12]
    9b96:	4a05      	ldr	r2, [pc, #20]	; (9bac <__swrite+0x34>)
    9b98:	0028      	movs	r0, r5
    9b9a:	4013      	ands	r3, r2
    9b9c:	81a3      	strh	r3, [r4, #12]
    9b9e:	0032      	movs	r2, r6
    9ba0:	230e      	movs	r3, #14
    9ba2:	5ee1      	ldrsh	r1, [r4, r3]
    9ba4:	003b      	movs	r3, r7
    9ba6:	f000 f81f 	bl	9be8 <_write_r>
    9baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bac:	ffffefff 	.word	0xffffefff

00009bb0 <__sseek>:
    9bb0:	b570      	push	{r4, r5, r6, lr}
    9bb2:	000c      	movs	r4, r1
    9bb4:	250e      	movs	r5, #14
    9bb6:	5f49      	ldrsh	r1, [r1, r5]
    9bb8:	f000 f860 	bl	9c7c <_lseek_r>
    9bbc:	89a3      	ldrh	r3, [r4, #12]
    9bbe:	1c42      	adds	r2, r0, #1
    9bc0:	d103      	bne.n	9bca <__sseek+0x1a>
    9bc2:	4a05      	ldr	r2, [pc, #20]	; (9bd8 <__sseek+0x28>)
    9bc4:	4013      	ands	r3, r2
    9bc6:	81a3      	strh	r3, [r4, #12]
    9bc8:	bd70      	pop	{r4, r5, r6, pc}
    9bca:	2280      	movs	r2, #128	; 0x80
    9bcc:	0152      	lsls	r2, r2, #5
    9bce:	4313      	orrs	r3, r2
    9bd0:	81a3      	strh	r3, [r4, #12]
    9bd2:	6560      	str	r0, [r4, #84]	; 0x54
    9bd4:	e7f8      	b.n	9bc8 <__sseek+0x18>
    9bd6:	46c0      	nop			; (mov r8, r8)
    9bd8:	ffffefff 	.word	0xffffefff

00009bdc <__sclose>:
    9bdc:	b510      	push	{r4, lr}
    9bde:	230e      	movs	r3, #14
    9be0:	5ec9      	ldrsh	r1, [r1, r3]
    9be2:	f000 f815 	bl	9c10 <_close_r>
    9be6:	bd10      	pop	{r4, pc}

00009be8 <_write_r>:
    9be8:	b570      	push	{r4, r5, r6, lr}
    9bea:	0005      	movs	r5, r0
    9bec:	0008      	movs	r0, r1
    9bee:	0011      	movs	r1, r2
    9bf0:	2200      	movs	r2, #0
    9bf2:	4c06      	ldr	r4, [pc, #24]	; (9c0c <_write_r+0x24>)
    9bf4:	6022      	str	r2, [r4, #0]
    9bf6:	001a      	movs	r2, r3
    9bf8:	f7fb fe42 	bl	5880 <_write>
    9bfc:	1c43      	adds	r3, r0, #1
    9bfe:	d103      	bne.n	9c08 <_write_r+0x20>
    9c00:	6823      	ldr	r3, [r4, #0]
    9c02:	2b00      	cmp	r3, #0
    9c04:	d000      	beq.n	9c08 <_write_r+0x20>
    9c06:	602b      	str	r3, [r5, #0]
    9c08:	bd70      	pop	{r4, r5, r6, pc}
    9c0a:	46c0      	nop			; (mov r8, r8)
    9c0c:	200004ac 	.word	0x200004ac

00009c10 <_close_r>:
    9c10:	2300      	movs	r3, #0
    9c12:	b570      	push	{r4, r5, r6, lr}
    9c14:	4c06      	ldr	r4, [pc, #24]	; (9c30 <_close_r+0x20>)
    9c16:	0005      	movs	r5, r0
    9c18:	0008      	movs	r0, r1
    9c1a:	6023      	str	r3, [r4, #0]
    9c1c:	f7fb fe6a 	bl	58f4 <_close>
    9c20:	1c43      	adds	r3, r0, #1
    9c22:	d103      	bne.n	9c2c <_close_r+0x1c>
    9c24:	6823      	ldr	r3, [r4, #0]
    9c26:	2b00      	cmp	r3, #0
    9c28:	d000      	beq.n	9c2c <_close_r+0x1c>
    9c2a:	602b      	str	r3, [r5, #0]
    9c2c:	bd70      	pop	{r4, r5, r6, pc}
    9c2e:	46c0      	nop			; (mov r8, r8)
    9c30:	200004ac 	.word	0x200004ac

00009c34 <_fstat_r>:
    9c34:	2300      	movs	r3, #0
    9c36:	b570      	push	{r4, r5, r6, lr}
    9c38:	4c06      	ldr	r4, [pc, #24]	; (9c54 <_fstat_r+0x20>)
    9c3a:	0005      	movs	r5, r0
    9c3c:	0008      	movs	r0, r1
    9c3e:	0011      	movs	r1, r2
    9c40:	6023      	str	r3, [r4, #0]
    9c42:	f7fb fe5a 	bl	58fa <_fstat>
    9c46:	1c43      	adds	r3, r0, #1
    9c48:	d103      	bne.n	9c52 <_fstat_r+0x1e>
    9c4a:	6823      	ldr	r3, [r4, #0]
    9c4c:	2b00      	cmp	r3, #0
    9c4e:	d000      	beq.n	9c52 <_fstat_r+0x1e>
    9c50:	602b      	str	r3, [r5, #0]
    9c52:	bd70      	pop	{r4, r5, r6, pc}
    9c54:	200004ac 	.word	0x200004ac

00009c58 <_isatty_r>:
    9c58:	2300      	movs	r3, #0
    9c5a:	b570      	push	{r4, r5, r6, lr}
    9c5c:	4c06      	ldr	r4, [pc, #24]	; (9c78 <_isatty_r+0x20>)
    9c5e:	0005      	movs	r5, r0
    9c60:	0008      	movs	r0, r1
    9c62:	6023      	str	r3, [r4, #0]
    9c64:	f7fb fe4e 	bl	5904 <_isatty>
    9c68:	1c43      	adds	r3, r0, #1
    9c6a:	d103      	bne.n	9c74 <_isatty_r+0x1c>
    9c6c:	6823      	ldr	r3, [r4, #0]
    9c6e:	2b00      	cmp	r3, #0
    9c70:	d000      	beq.n	9c74 <_isatty_r+0x1c>
    9c72:	602b      	str	r3, [r5, #0]
    9c74:	bd70      	pop	{r4, r5, r6, pc}
    9c76:	46c0      	nop			; (mov r8, r8)
    9c78:	200004ac 	.word	0x200004ac

00009c7c <_lseek_r>:
    9c7c:	b570      	push	{r4, r5, r6, lr}
    9c7e:	0005      	movs	r5, r0
    9c80:	0008      	movs	r0, r1
    9c82:	0011      	movs	r1, r2
    9c84:	2200      	movs	r2, #0
    9c86:	4c06      	ldr	r4, [pc, #24]	; (9ca0 <_lseek_r+0x24>)
    9c88:	6022      	str	r2, [r4, #0]
    9c8a:	001a      	movs	r2, r3
    9c8c:	f7fb fe3c 	bl	5908 <_lseek>
    9c90:	1c43      	adds	r3, r0, #1
    9c92:	d103      	bne.n	9c9c <_lseek_r+0x20>
    9c94:	6823      	ldr	r3, [r4, #0]
    9c96:	2b00      	cmp	r3, #0
    9c98:	d000      	beq.n	9c9c <_lseek_r+0x20>
    9c9a:	602b      	str	r3, [r5, #0]
    9c9c:	bd70      	pop	{r4, r5, r6, pc}
    9c9e:	46c0      	nop			; (mov r8, r8)
    9ca0:	200004ac 	.word	0x200004ac

00009ca4 <memchr>:
    9ca4:	b2c9      	uxtb	r1, r1
    9ca6:	1882      	adds	r2, r0, r2
    9ca8:	4290      	cmp	r0, r2
    9caa:	d101      	bne.n	9cb0 <memchr+0xc>
    9cac:	2000      	movs	r0, #0
    9cae:	4770      	bx	lr
    9cb0:	7803      	ldrb	r3, [r0, #0]
    9cb2:	428b      	cmp	r3, r1
    9cb4:	d0fb      	beq.n	9cae <memchr+0xa>
    9cb6:	3001      	adds	r0, #1
    9cb8:	e7f6      	b.n	9ca8 <memchr+0x4>

00009cba <_realloc_r>:
    9cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cbc:	0007      	movs	r7, r0
    9cbe:	000d      	movs	r5, r1
    9cc0:	0016      	movs	r6, r2
    9cc2:	2900      	cmp	r1, #0
    9cc4:	d105      	bne.n	9cd2 <_realloc_r+0x18>
    9cc6:	0011      	movs	r1, r2
    9cc8:	f7fe fe0e 	bl	88e8 <_malloc_r>
    9ccc:	0004      	movs	r4, r0
    9cce:	0020      	movs	r0, r4
    9cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9cd2:	2a00      	cmp	r2, #0
    9cd4:	d103      	bne.n	9cde <_realloc_r+0x24>
    9cd6:	f7fe fdbd 	bl	8854 <_free_r>
    9cda:	0034      	movs	r4, r6
    9cdc:	e7f7      	b.n	9cce <_realloc_r+0x14>
    9cde:	f000 f827 	bl	9d30 <_malloc_usable_size_r>
    9ce2:	002c      	movs	r4, r5
    9ce4:	4286      	cmp	r6, r0
    9ce6:	d9f2      	bls.n	9cce <_realloc_r+0x14>
    9ce8:	0031      	movs	r1, r6
    9cea:	0038      	movs	r0, r7
    9cec:	f7fe fdfc 	bl	88e8 <_malloc_r>
    9cf0:	1e04      	subs	r4, r0, #0
    9cf2:	d0ec      	beq.n	9cce <_realloc_r+0x14>
    9cf4:	0029      	movs	r1, r5
    9cf6:	0032      	movs	r2, r6
    9cf8:	f7fe fd88 	bl	880c <memcpy>
    9cfc:	0029      	movs	r1, r5
    9cfe:	0038      	movs	r0, r7
    9d00:	f7fe fda8 	bl	8854 <_free_r>
    9d04:	e7e3      	b.n	9cce <_realloc_r+0x14>
	...

00009d08 <_read_r>:
    9d08:	b570      	push	{r4, r5, r6, lr}
    9d0a:	0005      	movs	r5, r0
    9d0c:	0008      	movs	r0, r1
    9d0e:	0011      	movs	r1, r2
    9d10:	2200      	movs	r2, #0
    9d12:	4c06      	ldr	r4, [pc, #24]	; (9d2c <_read_r+0x24>)
    9d14:	6022      	str	r2, [r4, #0]
    9d16:	001a      	movs	r2, r3
    9d18:	f7fb fd90 	bl	583c <_read>
    9d1c:	1c43      	adds	r3, r0, #1
    9d1e:	d103      	bne.n	9d28 <_read_r+0x20>
    9d20:	6823      	ldr	r3, [r4, #0]
    9d22:	2b00      	cmp	r3, #0
    9d24:	d000      	beq.n	9d28 <_read_r+0x20>
    9d26:	602b      	str	r3, [r5, #0]
    9d28:	bd70      	pop	{r4, r5, r6, pc}
    9d2a:	46c0      	nop			; (mov r8, r8)
    9d2c:	200004ac 	.word	0x200004ac

00009d30 <_malloc_usable_size_r>:
    9d30:	1f0b      	subs	r3, r1, #4
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	1f18      	subs	r0, r3, #4
    9d36:	2b00      	cmp	r3, #0
    9d38:	da01      	bge.n	9d3e <_malloc_usable_size_r+0xe>
    9d3a:	580b      	ldr	r3, [r1, r0]
    9d3c:	18c0      	adds	r0, r0, r3
    9d3e:	4770      	bx	lr

00009d40 <__FUNCTION__.14345>:
    9d40:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
    9d50:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
    9d60:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
    9d70:	746c 6320 646d 0000 0df4 0000 0dc4 0000     lt cmd..........
    9d80:	0dbc 0000 0dd4 0000 0dcc 0000 0dec 0000     ................
    9d90:	0ddc 0000 0de4 0000                         ........

00009d98 <__FUNCTION__.13058>:
    9d98:	6968 5f66 6573 646e 0000 0000               hif_send....

00009da4 <__FUNCTION__.13068>:
    9da4:	6968 5f66 7369 0072                         hif_isr.

00009dac <__FUNCTION__.13074>:
    9dac:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00009dbc <__FUNCTION__.13086>:
    9dbc:	6968 5f66 6572 6563 7669 0065               hif_receive.

00009dc8 <__FUNCTION__.13102>:
    9dc8:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
    9dd8:	6828 6669 2029 4957 4946 485f 534f 5f54     (hif) WIFI_HOST_
    9de8:	4352 5f56 5443 4c52 315f 6220 7375 6620     RCV_CTRL_1 bus f
    9df8:	6961 006c 6828 6669 2029 6461 7264 7365     ail.(hif) addres
    9e08:	2073 7562 2073 6166 6c69 0000 6828 6669     s bus fail..(hif
    9e18:	2029 6f43 7272 7075 6574 2064 6170 6b63     ) Corrupted pack
    9e28:	7465 5320 7a69 2065 203d 7525 3c20 204c     et Size = %u <L 
    9e38:	203d 7525 202c 2047 203d 7525 202c 504f     = %u, G = %u, OP
    9e48:	3d20 2520 3230 3e58 000a 0000 4957 4946      = %02X>....WIFI
    9e58:	6320 6c61 626c 6361 206b 7369 6e20 746f      callback is not
    9e68:	7220 6765 7369 6574 6572 0064 6353 6b6f      registered.Scok
    9e78:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
    9e88:	746f 7220 6765 7369 6574 6572 0064 0000     ot registered...
    9e98:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
    9ea8:	6f6e 2074 6572 6967 7473 7265 6465 0000     not registered..
    9eb8:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
    9ec8:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
    9ed8:	0064 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
    9ee8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
    9ef8:	7265 6465 0000 0000 6828 6669 2029 6e69     ered....(hif) in
    9f08:	6176 696c 2064 7267 756f 2070 4449 0000     valid group ID..
    9f18:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
    9f28:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
    9f38:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
    9f48:	2029 7257 6e6f 2067 6953 657a 0000 0000     ) Wrong Size....
    9f58:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
    9f68:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
    9f78:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
    9f88:	746e 7265 7572 7470 7220 6765 0000 0000     nterrupt reg....
    9f98:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
    9fa8:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
    9fb8:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
    9fc8:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
    9fd8:	6176 696c 2064 7261 7567 656d 746e 0000     valid argument..
    9fe8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
    9ff8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
    a008:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
    a018:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
    a028:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
    a038:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
    a048:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
    a058:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
    a068:	6e61 2064 656c 676e 6874 0000 5247 2070     and length..GRp 
    a078:	203f 6425 000a 0000 4128 5050 2829 4e49     ? %d....(APP)(IN
    a088:	4f46 0029 6c53 776f 6e69 2067 6f64 6e77     FO).Slowing down
    a098:	2e2e 002e 4828 4649 4629 6961 206c 6f74     ....(HIF)Fail to
    a0a8:	7720 6b61 7075 7420 6568 6320 6968 0070      wakup the chip.

0000a0b8 <__FUNCTION__.13037>:
    a0b8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

0000a0c4 <__FUNCTION__.13066>:
    a0c4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

0000a0d4 <__FUNCTION__.13094>:
    a0d4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
    a0e4:	735f 0063 6f43 666e 696c 7463 6465 4920     _sc.Conflicted I
    a0f4:	2050 2022 7525 252e 2e75 7525 252e 2075     P " %u.%u.%u.%u 
    a104:	2022 000a 4552 2051 6f4e 2074 6564 6966     " ..REQ Not defi
    a114:	656e 2064 6425 000a 654b 2079 7369 6e20     ned %d..Key is n
    a124:	746f 7620 6c61 6469 0000 0000 6e49 6176     ot valid....Inva
    a134:	696c 2064 654b 0079 5353 4449 4c20 4e45     lid Key.SSID LEN
    a144:	4920 564e 4c41 4449 0000 0000 4843 4920      INVALID....CH I
    a154:	564e 4c41 4449 0000 6e49 6176 696c 2064     NVALID..Invalid 
    a164:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
    a174:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
    a184:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
    a194:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
    a1a4:	2079 656c 676e 6874 0000 0000 6e75 6564     y length....unde
    a1b4:	6966 656e 2064 6573 2063 7974 6570 0000     fined sec type..
    a1c4:	6946 6d72 6177 6572 7620 7265 2020 3a20     Firmware ver   :
    a1d4:	2520 2e75 7525 252e 2075 7653 726e 7665      %u.%u.%u Svnrev
    a1e4:	2520 0a75 0000 0000 6946 6d72 6177 6572      %u.....Firmware
    a1f4:	4220 6975 646c 2520 2073 6954 656d 2520      Build %s Time %
    a204:	0a73 0000 6946 6d72 6177 6572 4d20 6e69     s...Firmware Min
    a214:	6420 6972 6576 2072 6576 2072 203a 7525      driver ver : %u
    a224:	252e 2e75 7525 000a 7244 7669 7265 7620     .%u.%u..Driver v
    a234:	7265 203a 7525 252e 2e75 7525 000a 0000     er: %u.%u.%u....
    a244:	3331 343a 3a34 3830 0000 0000 614d 2079     13:44:08....May 
    a254:	3220 3220 3130 0037 7244 7669 7265 6220      2 2017.Driver b
    a264:	6975 746c 6120 2074 7325 2509 0a73 0000     uilt at %s.%s...
    a274:	694d 6d73 7461 6863 4620 7269 616d 7277     Mismatch Firmawr
    a284:	2065 6556 7372 6f69 006e 0000               e Version...

0000a290 <__FUNCTION__.12900>:
    a290:	6863 7069 775f 6b61 0065 0000               chip_wake...

0000a29c <__FUNCTION__.12949>:
    a29c:	6863 7069 645f 6965 696e 0074 6166 6c69     chip_deinit.fail
    a2ac:	6465 7420 206f 6564 692d 696e 6974 6c61     ed to de-initial
    a2bc:	7a69 0065 7542 2073 7265 6f72 2072 3528     ize.Bus error (5
    a2cc:	2e29 6425 2520 786c 000a 0000 6146 6c69     ).%d %lx....Fail
    a2dc:	6465 7420 206f 6177 756b 2070 6874 2065     ed to wakup the 
    a2ec:	6863 7069 0000 0000 7244 7669 7265 6556     chip....DriverVe
    a2fc:	4972 666e 3a6f 3020 2578 3830 786c 000a     rInfo: 0x%08lx..

0000a30c <__FUNCTION__.12947>:
    a30c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0000a318 <__FUNCTION__.12954>:
    a318:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...
    a328:	6e5b 696d 7320 6f74 5d70 203a 6863 7069     [nmi stop]: chip
    a338:	645f 6965 696e 2074 6166 6c69 0000 0000     _deinit fail....
    a348:	6e5b 696d 7320 6f74 5d70 203a 5053 2049     [nmi stop]: SPI 
    a358:	6c66 7361 2068 6964 6173 6c62 2065 6166     flash disable fa
    a368:	6c69 0000 6e5b 696d 7320 6f74 5d70 203a     il..[nmi stop]: 
    a378:	6166 6c69 6920 696e 2074 7562 0073 0000     fail init bus...
    a388:	6166 6c69 6465 7420 206f 6e65 6261 656c     failed to enable
    a398:	6920 746e 7265 7572 7470 2e73 002e 0000      interrupts.....
    a3a8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
    a3b8:	206c 6e69 7469 6220 7375 0000 6843 7069     l init bus..Chip
    a3c8:	4920 2044 6c25 0a78 0000 0000 1dd4 0000      ID %lx.........
    a3d8:	1dd4 0000 1e04 0000 1d86 0000 1daa 0000     ................
    a3e8:	1db8 0000 1dea 0000 1dea 0000 1e32 0000     ............2...
    a3f8:	1d6a 0000 1e6c 0000 1e6c 0000 1e6c 0000     j...l...l...l...
    a408:	1e6c 0000 1dc6 0000 c9c3 cac4               l...........

0000a414 <__FUNCTION__.12253>:
    a414:	7073 5f69 6d63 0064                         spi_cmd.

0000a41c <__FUNCTION__.12260>:
    a41c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0000a42c <__FUNCTION__.12269>:
    a42c:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0000a438 <__FUNCTION__.12285>:
    a438:	7073 5f69 6164 6174 725f 6165 0064 0000     spi_data_read...

0000a448 <__FUNCTION__.12300>:
    a448:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0000a458 <__FUNCTION__.12312>:
    a458:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0000a468 <__FUNCTION__.12323>:
    a468:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0000a478 <__FUNCTION__.12335>:
    a478:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0000a488 <__FUNCTION__.12348>:
    a488:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0000a494 <__FUNCTION__.12369>:
    a494:	6d6e 735f 6970 695f 696e 0074               nm_spi_init.

0000a4a0 <crc7_syndrome_table>:
    a4a0:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
    a4b0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
    a4c0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
    a4d0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
    a4e0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
    a4f0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
    a500:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
    a510:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
    a520:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
    a530:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
    a540:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
    a550:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
    a560:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
    a570:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
    a580:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
    a590:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
    a5a0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    a5b0:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    a5c0:	7270 746f 636f 6c6f 7720 7469 2068 5243     protocol with CR
    a5d0:	2043 6e6f 202c 6572 7974 6972 676e 7720     C on, retyring w
    a5e0:	7469 2068 5243 2043 666f 2e66 2e2e 0000     ith CRC off.....
    a5f0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    a600:	2064 6e69 6574 6e72 6c61 7220 6165 2064     d internal read 
    a610:	7270 746f 636f 6c6f 2e2e 002e 6e5b 696d     protocol....[nmi
    a620:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
    a630:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
    a640:	6f74 6f63 206c 6572 2e67 2e2e 0000 0000     tocol reg.......
    a650:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
    a660:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
    a670:	2e2e 002e 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    a680:	6961 656c 2064 6d63 2c64 7220 6165 2064     ailed cmd, read 
    a690:	6c62 636f 206b 2528 3830 2978 2e2e 0a2e     block (%08x)....
    a6a0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    a6b0:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
    a6c0:	6573 202c 6572 6461 6220 6f6c 6b63 2820     se, read block (
    a6d0:	3025 7838 2e29 2e2e 000a 0000 6e5b 696d     %08x).......[nmi
    a6e0:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    a6f0:	636f 206b 6164 6174 7220 6165 2e64 2e2e     ock data read...
    a700:	0000 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
    a710:	7274 2079 6425 2520 786c 2520 0a64 0000     try %d %lx %d...
    a720:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    a730:	2064 6d63 2c64 7720 6972 6574 6220 6f6c     d cmd, write blo
    a740:	6b63 2820 3025 7838 2e29 2e2e 000a 0000     ck (%08x).......
    a750:	6e5b 696d 7320 6970 5d20 203a 6146 6c69     [nmi spi ]: Fail
    a760:	6465 6320 646d 7220 7365 6f70 736e 2c65     ed cmd response,
    a770:	7720 6972 6574 6220 6f6c 6b63 2820 3025      write block (%0
    a780:	7838 2e29 2e2e 000a 6e5b 696d 7320 6970     8x).....[nmi spi
    a790:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    a7a0:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
    a7b0:	7562 2073 7265 6f72 2e72 2e2e 0000 0000     bus error.......
    a7c0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    a7d0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
    a7e0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
    a7f0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    a800:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
    a810:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
    a820:	7265 6f72 2e72 2e2e 0000 0000 6e5b 696d     error.......[nmi
    a830:	7320 6970 3a5d 4620 6961 656c 2064 7562      spi]: Failed bu
    a840:	2073 7265 6f72 2e72 2e2e 0000 6e5b 696d     s error.....[nmi
    a850:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    a860:	6174 7220 7365 6f70 736e 2065 6572 6461     ta response read
    a870:	202c 7825 2520 2078 7825 000a 6e5b 696d     , %x %x %x..[nmi
    a880:	7320 6970 3a5d 4620 6961 656c 2064 6c62      spi]: Failed bl
    a890:	636f 206b 6164 6174 7720 6972 6574 2e2e     ock data write..
    a8a0:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    a8b0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
    a8c0:	6220 7375 6520 7272 726f 2e2e 002e 0000      bus error......
    a8d0:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    a8e0:	2064 6d63 2064 6572 7073 6e6f 6573 7220     d cmd response r
    a8f0:	6165 2c64 6220 7375 6520 7272 726f 2e2e     ead, bus error..
    a900:	002e 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
    a910:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
    a920:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
    a930:	6f72 2e72 2e2e 0000 6e5b 696d 7320 6970     ror.....[nmi spi
    a940:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
    a950:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
    a960:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
    a970:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    a980:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
    a990:	7272 726f 2e2e 002e 6e5b 696d 7320 6970     rror....[nmi spi
    a9a0:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
    a9b0:	6f6c 6b63 6320 6372 7220 6165 2c64 6220     lock crc read, b
    a9c0:	7375 6520 7272 726f 2e2e 002e 6e5b 696d     us error....[nmi
    a9d0:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
    a9e0:	2c64 7220 6165 2064 6572 2067 2528 3830     d, read reg (%08
    a9f0:	2978 2e2e 0a2e 0000 6e5b 696d 7320 6970     x)......[nmi spi
    aa00:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
    aa10:	7073 6e6f 6573 202c 6572 6461 7220 6765     sponse, read reg
    aa20:	2820 3025 7838 2e29 2e2e 000a 6e5b 696d      (%08x).....[nmi
    aa30:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
    aa40:	6174 7220 6165 2e64 2e2e 0000 6552 6573     ta read.....Rese
    aa50:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
    aa60:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
    aa70:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
    aa80:	7220 6765 2820 3025 7838 2e29 2e2e 000a      reg (%08x).....
    aa90:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
    aaa0:	2064 6d63 2064 6572 7073 6e6f 6573 202c     d cmd response, 
    aab0:	7277 7469 2065 6572 2067 2528 3830 2978     write reg (%08x)
    aac0:	2e2e 0a2e 0000 0000 6552 6573 2074 6e61     ........Reset an
    aad0:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
    aae0:	786c 000a 4528 5252 2952 7543 7272 6e65     lx..(ERRR)Curren
    aaf0:	2074 253c 3e64 000a 6f53 6b63 7420 206f     t <%d>..Sock to 
    ab00:	6564 656c 6574 3c20 6425 0a3e 0000 0000     delete <%d>.....
    ab10:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
    ab20:	206e 4449 3d20 2520 0d64 000a 35be 0000     n ID = %d....5..
    ab30:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    ab40:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    ab50:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    ab60:	380a 0000 380a 0000 380a 0000 35a6 0000     .8...8...8...5..
    ab70:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    ab80:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    ab90:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    aba0:	380a 0000 380a 0000 380a 0000 35b6 0000     .8...8...8...5..
    abb0:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    abc0:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    abd0:	380a 0000 380a 0000 380a 0000 380a 0000     .8...8...8...8..
    abe0:	380a 0000 380a 0000 380a 0000 35ae 0000     .8...8...8...5..
    abf0:	35c6 0000 358e 0000 359e 0000 3596 0000     .5...5...5...5..
    ac00:	0002 0000 0003 0000 0028 0000 0029 0000     ........(...)...
    ac10:	0004 0000 0005 0000 0006 0000 0007 0000     ................
    ac20:	ffff 0000 ffff 0000 0022 0000 0023 0000     ........"...#...
    ac30:	ffff 0000 ffff 0000 ffff 0000 ffff 0000     ................
    ac40:	0008 0000 0009 0000 000a 0000 000b 0000     ................
    ac50:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
    ac60:	1800 4200 1c00 4200 49ae 0000 49aa 0000     ...B...B.I...I..
    ac70:	49aa 0000 4a0c 0000 4a0c 0000 49c2 0000     .I...J...J...I..
    ac80:	49b4 0000 49c8 0000 49fa 0000 4b90 0000     .I...I...I...K..
    ac90:	4b70 0000 4b70 0000 4bfc 0000 4b82 0000     pK..pK...K...K..
    aca0:	4b9e 0000 4b74 0000 4bac 0000 4bec 0000     .K..tK...K...K..

0000acb0 <_tcc_apbcmasks>:
    acb0:	0100 0000 0200 0000 0400 0000               ............

0000acbc <_tcc_cc_nums>:
    acbc:	0204 0002                                   ....

0000acc0 <_tcc_gclk_ids>:
    acc0:	1a1a 001b                                   ....

0000acc4 <_tcc_maxs>:
    acc4:	ffff 00ff ffff 00ff ffff 0000               ............

0000acd0 <_tcc_ow_nums>:
    acd0:	0408 0002                                   ....

0000acd4 <_tcc_intflag>:
    acd4:	0001 0000 0002 0000 0004 0000 0008 0000     ................
    ace4:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
    acf4:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0000ad04 <tcc_interrupt_vectors.12434>:
    ad04:	100f 0011 2000 4200 2400 4200 2800 4200     ..... .B.$.B.(.B
    ad14:	2d2d 5720 4e49 3143 3035 2030 6957 462d     -- WINC1500 Wi-F
    ad24:	2069 514d 5454 6320 6168 2074 7865 6d61     i MQTT chat exam
    ad34:	6c70 2065 2d2d 0a0d 2d2d 5320 4d41 3257     ple --..-- SAMW2
    ad44:	5f35 5058 414c 4e49 4445 505f 4f52 2d20     5_XPLAINED_PRO -
    ad54:	0d2d 2d0a 202d 6f43 706d 6c69 6465 203a     -..-- Compiled: 
    ad64:	614d 2079 3220 3220 3130 2037 3631 333a     May  2 2017 16:3
    ad74:	3a34 3432 2d20 0d2d 0000 0000 514d 5454     4:24 --.....MQTT
    ad84:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
    ad94:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
    ada4:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
    adb4:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
    adc4:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
    add4:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
    ade4:	0d29 000a 7355 7265 3a20 2520 0d73 000a     )...User : %s...
    adf4:	6150 7373 6f77 6472 3a20 2520 0d73 000a     Password : %s...
    ae04:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
    ae14:	696e 2074 6163 6c6c 6520 7272 726f 2821     nit call error!(
    ae24:	6425 0d29 000a 0000 6425 0000               %d).....%d..

0000ae30 <main_mqtt_broker>:
    ae30:	316d 2e30 6c63 756f 6d64 7471 2e74 6f63     m10.cloudmqtt.co
    ae40:	006d 0000 6f43 6e6e 6365 2074 6166 6c69     m...Connect fail
    ae50:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
    ae60:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
    ae70:	6369 6c61 796c 0d2e 000a 0000 7365 3665     ically......ese6
    ae80:	3038 732f 6e65 6f73 2f72 0000 716d 7474     80/sensor/..mqtt
    ae90:	735f 6275 6373 6972 6562 253a 0a64 0000     _subscribe:%d...
    aea0:	7250 7065 7261 7461 6f69 206e 666f 7420     Preparation of t
    aeb0:	6568 6320 6168 2074 6168 2073 6562 6e65     he chat has been
    aec0:	6320 6d6f 6c70 7465 6465 0d2e 0000 0000      completed......
    aed0:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
    aee0:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
    aef0:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
    af00:	0000 0000 3e20 203e 0000 0000 000d 0000     .... >> ........
    af10:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
    af20:	0d64 0000 6957 462d 2069 6f63 6e6e 6365     d...Wi-Fi connec
    af30:	6574 0d64 0000 0000 6957 462d 2069 6964     ted.....Wi-Fi di
    af40:	6373 6e6f 656e 7463 6465 000d 6557 636c     sconnected..Welc
    af50:	6d6f 4865 6c61 0000 7068 732d 7465 7075     omeHal..hp-setup
    af60:	312d 0000 6957 462d 2069 5049 6920 2073     -1..Wi-Fi IP is 
    af70:	7525 252e 2e75 7525 252e 0d75 000a 0000     %u.%u.%u.%u.....
    af80:	514d 7349 7064 0000 7ad0 0000 7990 0000     MQIsdp...z...y..
    af90:	7990 0000 798c 0000 7aa8 0000 7aa8 0000     .y...y...z...z..
    afa0:	7a9a 0000 798c 0000 7aa8 0000 7a9a 0000     .z...y...z...z..
    afb0:	7aa8 0000 798c 0000 7ab0 0000 7ab0 0000     .z...y...z...z..
    afc0:	7ab0 0000 7cb4 0000                         .z...|..

0000afc8 <_global_impure_ptr>:
    afc8:	0020 2000                                    .. 

0000afcc <__sf_fake_stderr>:
	...

0000afec <__sf_fake_stdin>:
	...

0000b00c <__sf_fake_stdout>:
	...
    b02c:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
    b03c:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
    b04c:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
    b05c:	6665 0000                                   ef..

0000b060 <_init>:
    b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b062:	46c0      	nop			; (mov r8, r8)
    b064:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b066:	bc08      	pop	{r3}
    b068:	469e      	mov	lr, r3
    b06a:	4770      	bx	lr

0000b06c <__init_array_start>:
    b06c:	000000dd 	.word	0x000000dd

0000b070 <_fini>:
    b070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b072:	46c0      	nop			; (mov r8, r8)
    b074:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b076:	bc08      	pop	{r3}
    b078:	469e      	mov	lr, r3
    b07a:	4770      	bx	lr

0000b07c <__fini_array_start>:
    b07c:	000000b5 	.word	0x000000b5
